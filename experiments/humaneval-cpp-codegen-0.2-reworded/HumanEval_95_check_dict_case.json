{
  "name": "HumanEval_95_check_dict_case",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n// True\n// >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n// False\n// >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n// False\n// >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n// False\n// >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n// True\nbool check_dict_case(std::map<std::string,std::string> dict) {\n",
  "tests": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n",
  "completions": [
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[0]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') continue;\n            if(key[0] >= 'a' && key[0] <= 'z') continue;\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isalpha(it->first[0])) {\n            all_lower = false;\n            if(std::islower(it->first[0])) continue;\n        }\n        if(std::isalpha(it->second[0])) {\n            all_upper = false;\n            if(std::isupper(it->second[0])) continue;\n        }\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::isalpha(it->first[0]) && std::islower(it->first[0])) return true;\n        if(std::isalpha(it->first[0]) && std::isupper(it->first[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n                return false;\n            }\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(std::tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty())\n            return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) {\n            all_lower = false;\n        }\n        if(std::islower(it->first[0])) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::tolower(it->first) != it->first) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::isalpha(it->first[0]) && std::islower(it->first[0])) return false;\n        if(std::isalpha(it->first[0]) && std::isupper(it->first[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) {\n            all_lower = false;\n        }\n        if(std::islower(it->first[0])) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(lower) {\n            if(std::tolower(it->first) != it->first) return false;\n        } else {\n            if(std::toupper(it->first) != it->first) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(std::tolower(*it2) != *it2) return false;\n        }\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        else if(std::islower(it->first[0]))\n            continue;\n        else\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n            } else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n            }\n        }\n        return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string lower, upper;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower = it->first;\n        upper = it->first;\n        std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\n        std::transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\n        if(lower != upper) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size()>1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::isupper(key[0]) && std::islower(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) all_upper = false;\n        if(std::islower(it->first[0])) all_lower = false;\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(lower && !isalpha(it->first[0])) return false;\n        if(!lower && !isalpha(it->first[0])) return false;\n        if(lower && !isalpha(it->second[0])) return false;\n        if(!lower && !isalpha(it->second[0])) return false;\n        lower = !lower;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.empty())\n            return false;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[0]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(std::tolower(it->first[i]) != std::tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(std::tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(lower) {\n            if(std::isupper(it->first[0])) return false;\n        }\n        else {\n            if(std::islower(it->first[0])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() == 1) {\n            if(tolower(key[0]) != key[0]) return false;\n        }\n        else if(key.size() == 2) {\n            if(tolower(key[0]) != key[0] || tolower(key[1]) != key[1]) return false;\n        }\n        else return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                return false;\n            }\n            if(key[0] >= 'a' && key[0] <= 'z') continue;\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string str;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        str = it->first;\n        if(str.empty()) return false;\n        if(str.length() != 1) return false;\n        if(str[0] >= 'A' && str[0] <= 'Z') continue;\n        if(str[0] >= 'a' && str[0] <= 'z') continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key)\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    bool lower=true;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(lower) {\n            if(std::isupper(it->first[0]))\n                return false;\n        } else {\n            if(std::islower(it->first[0]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(std::tolower(it->first) != it->second)\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n            }\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') {\n                    continue;\n                }\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') {\n                    continue;\n                }\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string lower, upper;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        lower = it->first;\n        upper = it->first;\n        std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\n        std::transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\n        if(lower != upper) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.length() != it->second.length()) return false;\n        if(it->first.length() == 1) continue;\n        if(it->first[0] != it->second[0]) return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') continue;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') {\n                    continue;\n                }\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') {\n                    continue;\n                }\n            }\n        }\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(std::tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                else return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') continue;\n            else return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                else return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') continue;\n            else return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[0])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[0]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            all_lower = false;\n        if(std::islower(it->first[0]))\n            all_upper = false;\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(tolower(*it2) != tolower(*it2)) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(std::tolower(*it2) != *it2) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size()>1) {\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n        }\n        else if(!isalpha(key[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') return false;\n            if(key[0] >= 'a' && key[0] <= 'z') return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) {\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() == 1) continue;\n        if(key[0] >= 'A' && key[0] <= 'Z') continue;\n        if(key[0] >= 'a' && key[0] <= 'z') continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.empty())\n            return false;\n        if(key[0] >= 'A' && key[0] <= 'Z') {\n            if(key[0] != key[0] - 'A' + 'a')\n                return false;\n        } else if(key[0] >= 'a' && key[0] <= 'z') {\n            if(key[0] != key[0] - 'a' + 'A')\n                return false;\n        } else {\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            all_lower = false;\n        else\n            all_upper = false;\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n            if(!isalpha(key[0]) && !isalpha(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[0])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) return false;\n        if(std::islower(it->first[0])) {\n            if(std::isupper(it->second[0])) return false;\n        } else {\n            if(std::islower(it->second[0])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::tolower(key[0]) != key[0] && std::toupper(key[0]) != key[0]) return false;\n            for(int i = 1; i < key.size(); i++) {\n                if(std::tolower(key[i]) != key[i] && std::toupper(key[i]) != key[i]) return false;\n            }\n        }\n    }\n    return true;",
    "    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(it->first.length() != it->second.length()) {\n            return false;\n        }\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            if(it->second[0] >= 'a' && it->second[0] <= 'z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            if(it->second[0] >= 'A' && it->second[0] <= 'Z') {\n                continue;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->second[0]))\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) {\n            return false;\n        }\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) {\n                return false;\n            }\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z')\n                    continue;\n                else\n                    return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z')\n                    continue;\n                else\n                    return false;\n            }\n            else\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z')\n            return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z')\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.size() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(auto it2 = it->first.begin(); it2 != it->first.end(); ++it2) {\n            if(std::tolower(*it2) != *it2) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::isupper(key[0]) && std::islower(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.empty()) return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z') continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z') continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::isupper(key[0]) && std::islower(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key) return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string lower_case_key;\n    std::string upper_case_key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        lower_case_key = it->first;\n        upper_case_key = it->first;\n        std::transform(lower_case_key.begin(), lower_case_key.end(), lower_case_key.begin(), ::tolower);\n        std::transform(upper_case_key.begin(), upper_case_key.end(), upper_case_key.begin(), ::toupper);\n        if(lower_case_key != upper_case_key)\n            return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length()) {\n            return false;\n        }\n        if(std::islower(it->first[0])) {\n            continue;\n        }\n        else if(std::isupper(it->first[0])) {\n            return false;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != it->second[i]) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) {\n            all_lower = false;\n        }\n        if(std::islower(it->first[0])) {\n            all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.empty()) return false;\n        if(key.size() > 1) {\n            if(!islower(key[0])) return false;\n            if(!isupper(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) all_lower = false;\n        if(std::islower(it->first[0])) all_upper = false;\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i=0; i<it->first.size(); ++i) {\n            if(tolower(it->first[i]) != it->second[i])\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            all_upper = false;\n        else\n            all_lower = false;\n    }\n    return all_lower || all_upper;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.size() > 1) {\n            if(key[0] >= 'A' && key[0] <= 'Z') {\n                if(key[1] >= 'a' && key[1] <= 'z') continue;\n                return false;\n            }\n            else if(key[0] >= 'a' && key[0] <= 'z') {\n                if(key[1] >= 'A' && key[1] <= 'Z') continue;\n                return false;\n            }\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n            if(std::islower(key[0]) && std::isupper(key[1])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it=dict.begin(); it!=dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;",
    "    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.length() != it->second.length())\n            return false;\n        if(it->first[0] >= 'A' && it->first[0] <= 'Z')\n            continue;\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n            continue;\n        return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(std::map<std::string,std::string>::iterator it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size())\n            return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->second[0])) return false;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0]))\n            return false;\n        if(std::islower(it->first[0]))\n            return true;\n    }\n    return true;",
    "    if(dict.empty())\n        return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1) {\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n            if(std::islower(key[0]) && std::isupper(key[1]))\n                return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); ++i) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string str;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        str = it->first;\n        if(str.length() > 1) {\n            if(str[0] >= 'A' && str[0] <= 'Z') {\n                if(str[1] >= 'a' && str[1] <= 'z') continue;\n                return false;\n            }\n            else if(str[0] >= 'a' && str[0] <= 'z') {\n                if(str[1] >= 'A' && str[1] <= 'Z') continue;\n                return false;\n            }\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(it->first.size() != it->second.size()) return false;\n        for(int i = 0; i < it->first.size(); i++) {\n            if(tolower(it->first[i]) != tolower(it->second[i])) return false;\n        }\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    std::string key;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        key = it->first;\n        if(key.length() > 1 && key[0] >= 'A' && key[0] <= 'Z') return false;\n        if(key.length() > 1 && key[0] >= 'a' && key[0] <= 'z') return false;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); ++it) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;",
    "    if(dict.empty()) return false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(std::isupper(it->first[0])) return false;\n        if(std::islower(it->first[0])) return true;\n    }\n    return true;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}