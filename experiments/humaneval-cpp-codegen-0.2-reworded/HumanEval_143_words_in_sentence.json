{
  "name": "HumanEval_143_words_in_sentence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n",
  "tests": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n",
  "completions": [
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res.append(res);\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::vector<int> prime_numbers;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            prime_numbers.push_back(i);\n        }\n    }\n    std::sort(prime_numbers.begin(), prime_numbers.end());\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            continue;\n        }\n        for (int j = 0; j < prime_numbers.size(); ++j) {\n            if (prime_numbers[j] >= sentence.size() - i) {\n                break;\n            }\n            if (sentence[i + prime_numbers[j]] == ' ') {\n                result.push_back(sentence[i]);\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;",
    "    std::string res;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            res += ' ';\n        } else {\n            res += std::to_string(std::count(res.begin(), res.end(), c));\n        }\n    }\n    return res;",
    "    std::string res;\n    std::vector<int> prime_nums;\n    for (int i = 2; i <= 100; ++i) {\n        if (std::all_of(sentence.begin(), sentence.end(), [i](char c){return c == ' ' || c == '.';})) {\n            prime_nums.push_back(i);\n        }\n    }\n    std::sort(prime_nums.begin(), prime_nums.end());\n    for (int i = 0; i < prime_nums.size(); ++i) {\n        for (int j = 0; j < prime_nums[i]; ++j) {\n            res += sentence[j];\n        }\n        sentence.erase(0, prime_nums[i]);\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::vector<int> primes;\n    std::vector<int>::iterator it;\n    std::string::iterator it2;\n    for (int i = 2; i <= 100; ++i) {\n        if (std::find(primes.begin(), primes.end(), i) == primes.end()) {\n            primes.push_back(i);\n        }\n    }\n    for (it2 = sentence.begin(); it2 != sentence.end(); ++it2) {\n        for (it = primes.begin(); it != primes.end(); ++it) {\n            if (*it2 == ' ') {\n                break;\n            }\n        }\n        if (it != primes.end()) {\n            res.push_back(*it2);\n        }\n    }\n    return res;",
    "    std::string result;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            result.push_back(' ');\n        } else {\n            result.push_back(sentence[i]);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else {\n            if (res.size() > 0) {\n                res.push_back(' ');\n            }\n        }\n    }\n    std::vector<int> primes;\n    for (auto i = 2; i < res.size(); ++i) {\n        if (std::find(primes.begin(), primes.end(), res[i]) == primes.end()) {\n            primes.push_back(res[i]);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (auto i = 0; i < primes.size(); ++i) {\n        res.push_back(primes[i]);\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); i++) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (std::is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::vector<std::string> words = split(sentence, ' ');\n    for (auto word : words) {\n        bool is_prime = true;\n        for (auto prime : primes) {\n            if (word.size() % prime != 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::vector<int> prime_nums;\n    for (int i = 2; i <= 100; ++i) {\n        if (is_prime(i)) {\n            prime_nums.push_back(i);\n        }\n    }\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); ++i) {\n        for (int j = 0; j < prime_nums.size(); ++j) {\n            if (words[i].length() == prime_nums[j]) {\n                res += words[i];\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res.insert(0, 1, ' ');\n    }\n    return res;",
    "    std::string result;\n    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        } else {\n            word.push_back(c);\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::vector<int> prime_numbers;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            prime_numbers.push_back(i);\n        }\n    }\n    std::vector<std::string> words = split_string(sentence);\n    for (auto word : words) {\n        for (auto prime_number : prime_numbers) {\n            if (word.length() % prime_number == 0) {\n                result += word;\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (auto it = words.begin(); it != words.end(); ++it) {\n        if (is_prime(*it)) {\n            result += *it;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.length())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.length() - 1);",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string result;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (!result.empty()) {\n                result += ' ';\n            }\n        } else {\n            result += sentence[i];\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while (ss >> res) {\n        if (is_prime(res.size()))\n            res += ' ';\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (auto &c : sentence) {\n        if (c == ' ') {\n            res.push_back(' ');\n        } else {\n            res.push_back(c);\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i < res.size(); ++i) {\n        if (std::find(primes.begin(), primes.end(), i) == primes.end()) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (int i = 0; i < primes.size(); ++i) {\n        for (int j = i + 1; j < primes.size(); ++j) {\n            if (primes[i] + primes[j] > res.size()) {\n                break;\n            }\n            std::string tmp = res.substr(primes[i], primes[j] - primes[i]);\n            if (std::find(primes.begin(), primes.end(), tmp.size()) != primes.end()) {\n                res.replace(primes[i], primes[j] - primes[i], tmp);\n            }\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res.insert(0, 1, ' ');\n    }\n    return res;",
    "    std::string res;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            if (!res.empty()) {\n                res += ' ';\n            }\n        } else {\n            res += c;\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i < res.size(); ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (auto i : primes) {\n        for (auto j = i; j < res.size(); j += i) {\n            res.insert(j, 1, ' ');\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string result;\n    std::vector<int> primes;\n    for (int i = 2; i <= 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); ++i) {\n        for (int j = 0; j < primes.size(); ++j) {\n            if (words[i].size() % primes[j] == 0) {\n                result += words[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length()))\n            res += word;\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            if (!word.empty()) {\n                result.append(word);\n                word.clear();\n            }\n        } else {\n            word.push_back(c);\n        }\n    }\n    if (!word.empty()) {\n        result.append(word);\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res.insert(0, 1, ' ');\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while (ss >> res) {\n        if (is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n            i++;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            result.append(word);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            if (!res.empty()) {\n                res += ' ';\n            }\n        } else {\n            if (is_prime(res.size() + 1)) {\n                res += c;\n            }\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i < res.size(); ++i) {\n        if (isprime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (int i = 0; i < primes.size(); ++i) {\n        for (int j = 0; j < primes[i]; ++j) {\n            res += res[j];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res.push_back(word);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    for (auto c : sentence) {\n        if (isalpha(c)) {\n            result.push_back(c);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.length())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.length() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (!res.empty()) {\n                res += ' ';\n            }\n        } else {\n            res += sentence[i];\n        }\n    }\n    std::vector<int> primes;\n    for (auto i = 2; i < res.size(); ++i) {\n        if (std::find(primes.begin(), primes.end(), res.size() - i) == primes.end()) {\n            primes.push_back(res.size() - i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (auto i = 0; i < primes.size(); ++i) {\n        for (auto j = 0; j < primes[i]; ++j) {\n            res += ' ';\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else {\n            if (isalpha(sentence[i + 1])) {\n                res.push_back(sentence[i]);\n            }\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.length())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            res += ' ';\n        } else {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res.push_back(word);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::vector<int> primes;\n    for (int i = 2; i <= 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::vector<std::string> words;\n    std::istringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); ++i) {\n        for (int j = 0; j < primes.size(); ++j) {\n            if (words[i].length() == primes[j]) {\n                res += words[i];\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while (ss >> res) {\n        if (is_prime(res.length()))\n            res += \" \";\n    }\n    return res.substr(0, res.length() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    while(ss >> result) {\n        if(is_prime(result.length())) {\n            result += ' ';\n        }\n    }\n    return result.substr(0, result.length() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            res += ' ';\n        } else {\n            res += sentence[i];\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i <= res.size(); ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (int i = 0; i < primes.size(); ++i) {\n        for (int j = 0; j < primes[i]; ++j) {\n            res += ' ';\n        }\n    }\n    return res;",
    "    std::string result;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            result.push_back(' ');\n        } else {\n            result.push_back(sentence[i]);\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            if (is_prime(res.size() + 1)) {\n                res += sentence[i];\n            }\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    while(ss >> result) {\n        if(is_prime(result.size())) {\n            result += ' ';\n        }\n    }\n    return result;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        if (i + 1 < sentence.size() && isalpha(sentence[i + 1])) {\n            res.push_back(sentence[i + 1]);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += \" \";\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length()))\n            res += word;\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string result;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (is_prime(sentence.substr(i, 1))) {\n            result.push_back(sentence[i]);\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result.append(word);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result.append(word);\n            result.append(\" \");\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (is_prime(sentence[i] - 'a')) {\n            result.push_back(sentence[i]);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (!word.empty()) {\n                int len = std::stoi(word);\n                if (is_prime(len)) {\n                    result.append(word);\n                }\n                word.clear();\n            }\n        } else {\n            word.append(1, sentence[i]);\n        }\n    }\n    if (!word.empty()) {\n        int len = std::stoi(word);\n        if (is_prime(len)) {\n            result.append(word);\n        }\n    }\n    return result;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    while (ss >> result) {\n        if (is_prime(result.size())) {\n            result += ' ';\n        }\n    }\n    return result.substr(0, result.size() - 1);",
    "    std::string res;\n    std::vector<int> prime_nums;\n    for (int i = 2; i <= 100; ++i) {\n        if (is_prime(i)) prime_nums.push_back(i);\n    }\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (std::find(prime_nums.begin(), prime_nums.end(), sentence.size() - i) != prime_nums.end()) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (!res.empty()) {\n                res += ' ';\n            }\n        } else {\n            res += sentence[i];\n        }\n    }\n    std::vector<int> v;\n    for (int i = 0; i < res.size(); ++i) {\n        if (is_prime(res[i] - 'a' + 1)) {\n            v.push_back(i);\n        }\n    }\n    std::sort(v.begin(), v.end());\n    for (int i = 0; i < v.size(); ++i) {\n        res.erase(v[i], 1);\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (res.size() > 0) {\n                res += ' ';\n            }\n        } else {\n            res += sentence[i];\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i <= res.size(); ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (int i = 0; i < primes.size(); ++i) {\n        for (int j = 0; j < primes[i]; ++j) {\n            res += ' ';\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            res += ' ';\n        } else {\n            res += sentence[i];\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += \" \";\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.length()))\n            res += ' ';\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += ' ';\n            res += sentence[i + 1];\n            i++;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    while(ss >> result) {\n        if(is_prime(result.size())) {\n            result += \" \";\n        }\n    }\n    return result.substr(0, result.size() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n            i++;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    for (auto i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;",
    "    std::string res;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            res.push_back(' ');\n        }\n        else {\n            res.push_back(c);\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i <= res.size(); ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (auto i : primes) {\n        for (auto j = i; j <= res.size(); j += i) {\n            res.erase(res.begin() + j - i, res.begin() + j);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.size())) {\n            result += word;\n        }\n    }\n    return result;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else {\n            if (i + 1 < sentence.size() && isalpha(sentence[i + 1])) {\n                res.push_back(sentence[i]);\n            }\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res.substr(0, res.size() - 1);",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res.push_back(sentence[i]);\n        }\n        else if (isalpha(sentence[i+1])) {\n            res.push_back(sentence[i]);\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (isalpha(sentence[i])) {\n            res += sentence[i];\n        }\n        else if (isalpha(sentence[i + 1])) {\n            res += sentence[i];\n            i++;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.size()))\n            res += ' ';\n    }\n    return res;",
    "    std::string res;\n    std::vector<int> primes;\n    for (int i = 2; i <= 100; i++) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::vector<std::string> words;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        words.push_back(word);\n    }\n    for (int i = 0; i < words.size(); i++) {\n        for (int j = 0; j < primes.size(); j++) {\n            if (words[i].length() == primes[j]) {\n                res += words[i];\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res.append(word);\n            res.append(\" \");\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string result;\n    std::string word;\n    for (int i = 0; i < sentence.size(); ++i) {\n        if (sentence[i] == ' ') {\n            if (!word.empty()) {\n                result.push_back(word);\n                word.clear();\n            }\n        }\n        else {\n            word.push_back(sentence[i]);\n        }\n    }\n    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return result;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while (ss >> word) {\n        if (is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.size()))\n            res += word;\n    }\n    return res;",
    "    std::string res;\n    for (auto c : sentence) {\n        if (c == ' ') {\n            res.push_back(' ');\n        } else {\n            res.push_back(c);\n        }\n    }\n    std::vector<int> primes;\n    for (int i = 2; i < res.size(); ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    std::sort(primes.begin(), primes.end());\n    for (int i = 0; i < primes.size(); ++i) {\n        int j = i;\n        while (j < primes.size() && primes[j] < res.size()) {\n            res[primes[i]] = res[primes[i]];\n            ++j;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.size())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(std::getline(ss, word, ' ')) {\n        if(is_prime(word.length())) {\n            res += word;\n        }\n    }\n    return res;",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.length())) {\n            res += ' ';\n        }\n    }\n    return res.substr(0, res.length() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    while(ss >> res) {\n        if(is_prime(res.length()))\n            res += ' ';\n    }\n    return res.substr(0, res.length() - 1);",
    "    std::string res;\n    std::stringstream ss(sentence);\n    std::string word;\n    while(ss >> word) {\n        if(is_prime(word.length()))\n            res.append(word);\n    }\n    return res;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}