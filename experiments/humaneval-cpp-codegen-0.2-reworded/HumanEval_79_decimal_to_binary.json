{
  "name": "HumanEval_79_decimal_to_binary",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n",
  "tests": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
  "completions": [
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    while (decimal != 0) {\n        binary = (decimal % 2) + binary;\n        decimal /= 2;\n    }\n    binary = \"db\" + binary;\n    return binary;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    result += '0';\n    result += '0';\n    return result;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    if (decimal == 0) {\n        result = \"0\";\n        return result;\n    }\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_string = \"\";\n    while (decimal != 0) {\n        binary_string += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary_string += \"db\";\n    return binary_string;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    return binary;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.append(\"db\");\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.append(\"db\");\n    return binary;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string str;\n    ss >> str;\n    for (int i = str.size() - 1; i >= 0; i--) {\n        binary.push_back(str[i]);\n    }\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string binary_str = \"\";\n    while (decimal != 0) {\n        binary_str = (decimal % 2) + binary_str;\n        decimal /= 2;\n    }\n    binary_str = \"db\" + binary_str;\n    return binary_str;",
    "    std::string binary;\n    while (decimal > 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '1');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    binary.push_back('0');\n    binary.push_back('0');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary_string = \"\";\n    while (decimal > 0) {\n        binary_string = (decimal % 2) + binary_string;\n        decimal /= 2;\n    }\n    binary_string = \"db\" + binary_string;\n    return binary_string;",
    "    std::string binary_string;\n    binary_string.reserve(decimal);\n    binary_string.insert(binary_string.begin(), 'd');\n    binary_string.insert(binary_string.end(), 'b');\n    while (decimal) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();",
    "    std::stringstream ss;\n    ss << std::hex << decimal;\n    std::string s = ss.str();\n    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == '0') {\n            result += \"0\";\n        } else if (s[i] == '1') {\n            result += \"1\";\n        } else {\n            assert(false);\n        }\n    }\n    result = \"db\" + result + \"db\";\n    return result;",
    "    std::string result = \"db\";\n    while (decimal != 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    while (decimal != 0) {\n        binary = (decimal % 2) + binary;\n        decimal /= 2;\n    }\n    binary = \"db\" + binary;\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_str = \"db\";\n    while (decimal != 0) {\n        binary_str.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary_str.push_back('0');\n    binary_str.push_back('0');\n    return binary_str;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    return ss.str();",
    "    std::string binary;\n    while (decimal > 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '1');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string result = \"db\";\n    long remainder = decimal;\n    while (remainder != 0) {\n        result.push_back(remainder % 2 + '0');\n        remainder = remainder / 2;\n    }\n    return result;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary_str = \"\";\n    while (decimal > 0) {\n        binary_str = (decimal % 2) + binary_str;\n        decimal /= 2;\n    }\n    binary_str = \"db\" + binary_str;\n    return binary_str;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();",
    "    std::string result;\n    while (decimal != 0) {\n        result.insert(result.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.insert(result.begin(), '0');\n    result.insert(result.end(), '1');\n    return result;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";",
    "    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_str = \"\";\n    while (decimal > 0) {\n        binary_str = (decimal % 2) + binary_str;\n        decimal /= 2;\n    }\n    binary_str = \"db\" + binary_str;\n    return binary_str;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_string;\n    binary_string.reserve(decimal * 2 + 2);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    while (decimal != 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '0');\n    binary.insert(binary.end(), '0');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_string = \"\";\n    while (decimal > 0) {\n        binary_string += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary_string += \"db\";\n    return binary_string;",
    "    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal != 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string binary_string;\n    binary_string.reserve(decimal * 2 + 2);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::string binary_string = \"\";\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string s;\n    ss >> s;\n    for (int i = s.size() - 1; i >= 0; i--) {\n        binary_string.push_back(s[i]);\n    }\n    return binary_string;",
    "    std::string binary_str = \"db\";\n    long decimal_copy = decimal;\n    while (decimal_copy > 0) {\n        binary_str.push_back(decimal_copy % 2 + '0');\n        decimal_copy /= 2;\n    }\n    binary_str.push_back('0');\n    return binary_str;",
    "    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    long decimal_copy = decimal;\n    while (decimal_copy > 0) {\n        int remainder = decimal_copy % 2;\n        decimal_copy = decimal_copy / 2;\n        binary_string.push_back(remainder + '0');\n    }\n    return binary_string;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    std::string s = ss.str();\n    return s;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    return binary;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    ss >> binary;\n    return binary;",
    "    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result = \"\";\n    if (decimal == 0) {\n        result = \"0\";\n    } else {\n        while (decimal != 0) {\n            result = (decimal % 2) + result;\n            decimal /= 2;\n        }\n    }\n    result = \"db\" + result;\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string binary;\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    binary.push_back('0');\n    return binary;",
    "    std::string binary_string;\n    binary_string.reserve(decimal);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back((decimal & 1) + '0');\n        decimal = decimal >> 1;\n    }\n    return binary_string;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    while (decimal != 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '0');\n    return binary;",
    "    std::string binary_str = \"\";\n    binary_str.insert(binary_str.begin(), 'd');\n    binary_str.insert(binary_str.end(), 'b');\n    while (decimal != 0) {\n        binary_str.insert(binary_str.begin(), decimal % 2);\n        decimal /= 2;\n    }\n    return binary_str;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    std::string s = ss.str();\n    s.erase(s.begin(), s.begin() + 2);\n    s.erase(s.end() - 2, s.end());\n    return s;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal & 1);\n        decimal >>= 1;\n    }\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();",
    "    std::string result;\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_string = \"\";\n    while (decimal > 0) {\n        binary_string += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary_string += '0';\n    binary_string += '0';\n    return binary_string;",
    "    std::string binary_string = \"\";\n    while (decimal != 0) {\n        binary_string = (decimal % 2) + binary_string;\n        decimal /= 2;\n    }\n    binary_string = \"db\" + binary_string + \"db\";\n    return binary_string;",
    "    std::stringstream ss;\n    ss << \"db\";\n    while (decimal) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_str = \"\";\n    binary_str += 'd';\n    binary_str += std::to_string(decimal);\n    binary_str += 'b';\n    return binary_str;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_str = \"\";\n    binary_str.append(\"db\");\n    while (decimal > 0) {\n        binary_str.append(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary_str.append(\"db\");\n    return binary_str;",
    "    std::string binary_string;\n    binary_string.append(\"db\");\n    while (decimal != 0) {\n        binary_string.append(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary_str = \"\";\n    binary_str.insert(binary_str.begin(), 'd');\n    binary_str.insert(binary_str.end(), 'b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string str;\n    ss >> str;\n    std::reverse(str.begin(), str.end());\n    for (int i = 0; i < str.size(); i++) {\n        binary_str.push_back(str[i]);\n    }\n    return binary_str;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;",
    "    std::string binary_str;\n    binary_str.push_back('d');\n    binary_str.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string str;\n    ss >> str;\n    for (int i = str.length() - 1; i >= 0; i--) {\n        binary_str.push_back(str[i]);\n    }\n    return binary_str;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    for (int i = 0; i < ss.str().length(); i++) {\n        binary_string.push_back(ss.str().at(i) - '0');\n    }\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    return binary_string;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::string binary;\n    binary.reserve(32);\n    binary.append(\"db\");\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.append(\"db\");\n    return binary;",
    "    std::string binary_str;\n    binary_str.reserve(decimal);\n    binary_str.push_back('d');\n    binary_str.push_back('b');\n    while (decimal > 0) {\n        binary_str.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return binary_str;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal != 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    while (decimal > 0) {\n        result.insert(result.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.insert(result.begin(), '0');\n    result.insert(result.end(), '1');\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    std::string str = ss.str();\n    str.erase(str.begin(), str.begin() + 2);\n    str.erase(str.end() - 2, str.end());\n    return str;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal * 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary_str = \"db\";\n    long temp = decimal;\n    while (temp > 0) {\n        binary_str.push_back(temp % 2 + '0');\n        temp /= 2;\n    }\n    return binary_str;",
    "    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    long temp = decimal;\n    while (temp > 0) {\n        binary.push_back(temp % 2 + '0');\n        temp /= 2;\n    }\n    return binary;",
    "    std::string binary_string;\n    binary_string.reserve(decimal);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal > 0) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;",
    "    std::string binary_string = \"\";\n    binary_string += 'd';\n    binary_string += 'b';\n    int decimal_length = decimal_to_binary_length(decimal);\n    for (int i = decimal_length - 1; i >= 0; i--) {\n        binary_string += decimal_to_binary_digit(decimal, i);\n    }\n    return binary_string;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary_str = \"db\";\n    while (decimal > 0) {\n        binary_str += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return binary_str;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result;\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.insert(0, \"db\");\n    result.push_back('0');\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
    "    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;",
    "    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}