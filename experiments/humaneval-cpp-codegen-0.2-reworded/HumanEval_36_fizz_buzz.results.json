{
  "name": "HumanEval_36_fizz_buzz",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n",
  "tests": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            cnt++;\n        }\n        if (n % 13 == 7) {\n            cnt++;\n        }\n        n /= 10;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpt0ibctfe: /tmp/tmpt0ibctfe.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp3kyivdt_: /tmp/tmp3kyivdt_.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            cnt++;\n        }\n        if (n % 13 == 7) {\n            cnt++;\n        }\n        n /= 10;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpt0ibctfe: /tmp/tmpt0ibctfe.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            cnt++;\n        }\n        if (n % 13 == 7) {\n            cnt++;\n        }\n        n /= 10;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpt0ibctfe: /tmp/tmpt0ibctfe.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            cnt++;\n        }\n        if (n % 13 == 7) {\n            cnt++;\n        }\n        n /= 10;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpt0ibctfe: /tmp/tmpt0ibctfe.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            cnt++;\n        }\n        n /= 10;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp8oe53ptj: /tmp/tmp8oe53ptj.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp4nh2k2g5: /tmp/tmp4nh2k2g5.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpxh9p5bvn: /tmp/tmpxh9p5bvn.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp3kyivdt_: /tmp/tmp3kyivdt_.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpcm6mpslp: /tmp/tmpcm6mpslp.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long cnt = 0;\n    while (n > 0) {\n        if (n % 11 == 7 || n % 13 == 7) {\n            cnt++;\n        }\n        n /= 10;\n    }\n    return cnt;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp8oe53ptj: /tmp/tmp8oe53ptj.cpp:23: int main(): Assertion `candidate((78)) == (2)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpapdhvc3r: /tmp/tmpapdhvc3r.cpp:21: int main(): Assertion `candidate((50)) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nlong fizz_buzz(long n) {\n    long count = 0;\n    while (n > 0) {\n        if (n % 11 == 7) {\n            count++;\n        }\n        if (n % 13 == 7) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpkzld7b0n: /tmp/tmpkzld7b0n.cpp:27: int main(): Assertion `candidate((79)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}