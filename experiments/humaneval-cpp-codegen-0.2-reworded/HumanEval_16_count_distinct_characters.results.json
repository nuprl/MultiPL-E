{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n",
  "tests": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpg4__dqyf: /tmp/tmpg4__dqyf.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (char c : string) {\n        char_count[c]++;\n    }\n    return char_count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp33vzhoq9: /tmp/tmp33vzhoq9.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    long count_distinct = 0;\n    for (auto c : count) {\n        count_distinct += c.second;\n    }\n    return count_distinct;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp60ikinji: /tmp/tmp60ikinji.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp432c1g17: /tmp/tmp432c1g17.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpg4__dqyf: /tmp/tmpg4__dqyf.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpp5ckogdy: /tmp/tmpp5ckogdy.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long count_ = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        count_ += it->second;\n    }\n    return count_;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpby_wq0wh: /tmp/tmpby_wq0wh.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpzjtnpray: /tmp/tmpzjtnpray.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "/tmp/tmpu6b7hsdf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpu6b7hsdf.cpp:11:41: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu6b7hsdf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu6b7hsdf.cpp:11:41: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpzjtnpray: /tmp/tmpzjtnpray.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    long result = 0;\n    for (auto c : count) {\n        result += c.second;\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmppauveq2h: /tmp/tmppauveq2h.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (char c : string) {\n        char_count[c]++;\n    }\n    return char_count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp33vzhoq9: /tmp/tmp33vzhoq9.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmprweakund: /tmp/tmprweakund.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long result = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        result += it->second;\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpg2rdilde: /tmp/tmpg2rdilde.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto c : char_count) {\n        count += c.second;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpjf695ut7: /tmp/tmpjf695ut7.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgd4f0d2n: /tmp/tmpgd4f0d2n.cpp:26: int main(): Assertion `candidate((\"aaaaAAAAaaaa\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        count += it->second;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpv2hw424r: /tmp/tmpv2hw424r.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpp5ckogdy: /tmp/tmpp5ckogdy.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long result = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        result += it->second;\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpz2vxjabb: /tmp/tmpz2vxjabb.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long count_distinct = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        if (it->second > 1) {\n            count_distinct++;\n        }\n    }\n    return count_distinct;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpd45batll: /tmp/tmpd45batll.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmppn1cihq6: /tmp/tmppn1cihq6.cpp:20: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpqn9vd51d: /tmp/tmpqn9vd51d.cpp:20: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto c : char_count) {\n        count += char_count[c];\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpt7d03ffr.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpt7d03ffr.cpp:15:28: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unordered_map<char, int>\u2019 and \u2018std::pair<const char, int>\u2019)\n   15 |         count += char_count[c];\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpt7d03ffr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&) [with _Key = char; _Tp = int; _Hash = std::hash<char>; _Pred = std::equal_to<char>; _Alloc = std::allocator<std::pair<const char, int> >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = int; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = char]\u2019\n  984 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:34: note:   no known conversion for argument 1 from \u2018std::pair<const char, int>\u2019 to \u2018const key_type&\u2019 {aka \u2018const char&\u2019}\n  984 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:988:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    long result = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        result += it->second;\n    }\n    return result;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpqeypmng1: /tmp/tmpqeypmng1.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmp0ww3ljjg: /tmp/tmp0ww3ljjg.cpp:20: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmprweakund: /tmp/tmprweakund.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        count += it->second;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpv2hw424r: /tmp/tmpv2hw424r.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpzjtnpray: /tmp/tmpzjtnpray.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpbzpovje7: /tmp/tmpbzpovje7.cpp:18: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::islower(c), std::uppercase(c), std::toupper(c));\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpk4m2frze.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpk4m2frze.cpp:11:61: error: invalid initialization of reference of type \u2018std::ios_base&\u2019 from expression of type \u2018char\u2019\n   11 |         count += std::count(std::islower(c), std::uppercase(c), std::toupper(c));\n      |                                                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpk4m2frze.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:965:23: note: in passing argument 1 of \u2018std::ios_base& std::uppercase(std::ios_base&)\u2019\n  965 |   uppercase(ios_base& __base)\n      |             ~~~~~~~~~~^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpbi9duuhf: /tmp/tmpbi9duuhf.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmprweakund: /tmp/tmprweakund.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmppn1cihq6: /tmp/tmppn1cihq6.cpp:20: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "/tmp/tmpu6b7hsdf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpu6b7hsdf.cpp:11:41: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu6b7hsdf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu6b7hsdf.cpp:11:41: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (char c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto& it : map) {\n        count += it.second;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292705,
      "stdout": "",
      "stderr": "tmpei78l8h_: /tmp/tmpei78l8h_.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    long count_distinct = 0;\n    for (auto c : count) {\n        count_distinct += count[c];\n    }\n    return count_distinct;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpkl3o7da5.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpkl3o7da5.cpp:15:32: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unordered_map<char, long int>\u2019 and \u2018std::pair<const char, long int>\u2019)\n   15 |         count_distinct += count[c];\n      |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpkl3o7da5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&) [with _Key = char; _Tp = long int; _Hash = std::hash<char>; _Pred = std::equal_to<char>; _Alloc = std::allocator<std::pair<const char, long int> >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = long int; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = char]\u2019\n  984 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:34: note:   no known conversion for argument 1 from \u2018std::pair<const char, long int>\u2019 to \u2018const key_type&\u2019 {aka \u2018const char&\u2019}\n  984 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:988:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](std::unordered_map<_Key",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto c : char_count) {\n        if (c.second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmp5h69c6pv: /tmp/tmp5h69c6pv.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpwfgi9g8h: /tmp/tmpwfgi9g8h.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    return char_count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmprae_cfa8: /tmp/tmprae_cfa8.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto c : char_count) {\n        count += char_count[c];\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpt7d03ffr.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpt7d03ffr.cpp:15:28: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unordered_map<char, int>\u2019 and \u2018std::pair<const char, int>\u2019)\n   15 |         count += char_count[c];\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpt7d03ffr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&) [with _Key = char; _Tp = int; _Hash = std::hash<char>; _Pred = std::equal_to<char>; _Alloc = std::allocator<std::pair<const char, int> >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = int; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = char]\u2019\n  984 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:34: note:   no known conversion for argument 1 from \u2018std::pair<const char, int>\u2019 to \u2018const key_type&\u2019 {aka \u2018const char&\u2019}\n  984 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:988:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long count_ = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        if (it->second > 1) {\n            count_++;\n        }\n    }\n    return count_;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpeem8j8_w: /tmp/tmpeem8j8_w.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto ch : string) {\n        count += std::count(std::begin(ch), std::end(ch), ch);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpavx_vbus.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpavx_vbus.cpp:11:42: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(ch), std::end(ch), ch);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpavx_vbus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpavx_vbus.cpp:11:42: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(ch), std::end(ch), ch);\n      |                                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    return char_count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmprae_cfa8: /tmp/tmprae_cfa8.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto &c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpeccya5ei: /tmp/tmpeccya5ei.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "/tmp/tmpu6b7hsdf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpu6b7hsdf.cpp:11:41: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu6b7hsdf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu6b7hsdf.cpp:11:41: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp432c1g17: /tmp/tmp432c1g17.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "/tmp/tmpu6b7hsdf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpu6b7hsdf.cpp:11:41: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu6b7hsdf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu6b7hsdf.cpp:11:41: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpzjtnpray: /tmp/tmpzjtnpray.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmprweakund: /tmp/tmprweakund.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (auto c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpzjtnpray: /tmp/tmpzjtnpray.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    long count_ = 0;\n    for (auto it = count.begin(); it != count.end(); it++) {\n        if (it->second > 1) {\n            count_++;\n        }\n    }\n    return count_;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpeem8j8_w: /tmp/tmpeem8j8_w.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto &c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpeccya5ei: /tmp/tmpeccya5ei.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp432c1g17: /tmp/tmp432c1g17.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> count;\n    for (char c : string) {\n        count[c]++;\n    }\n    return count.size();\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpbi9duuhf: /tmp/tmpbi9duuhf.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmprweakund: /tmp/tmprweakund.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), toupper(c));\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmp0j_c9dwl: /tmp/tmp0j_c9dwl.cpp:18: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto it = char_count.begin(); it != char_count.end(); it++) {\n        count += it->second;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmp6iumjfvt: /tmp/tmp6iumjfvt.cpp:23: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> char_count;\n    for (auto c : string) {\n        char_count[c]++;\n    }\n    long count = 0;\n    for (auto c : char_count) {\n        count += char_count[c];\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "/tmp/tmpt7d03ffr.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpt7d03ffr.cpp:15:28: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unordered_map<char, int>\u2019 and \u2018std::pair<const char, int>\u2019)\n   15 |         count += char_count[c];\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/functional:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/pstl/glue_algorithm_defs.h:13,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpt7d03ffr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&) [with _Key = char; _Tp = int; _Hash = std::hash<char>; _Pred = std::equal_to<char>; _Alloc = std::allocator<std::pair<const char, int> >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = int; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = char]\u2019\n  984 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:984:34: note:   no known conversion for argument 1 from \u2018std::pair<const char, int>\u2019 to \u2018const key_type&\u2019 {aka \u2018const char&\u2019}\n  984 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:988:7: note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmp432c1g17: /tmp/tmp432c1g17.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpbez2k9dx: /tmp/tmpbez2k9dx.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpp5ckogdy: /tmp/tmpp5ckogdy.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "/tmp/tmpu6b7hsdf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpu6b7hsdf.cpp:11:41: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu6b7hsdf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu6b7hsdf.cpp:11:41: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpg4__dqyf: /tmp/tmpg4__dqyf.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpkc8ehzaz: /tmp/tmpkc8ehzaz.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' && c <= 'z') ? 1 : 0;\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmppn1cihq6: /tmp/tmppn1cihq6.cpp:20: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += (c == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpm1wh16cn: /tmp/tmpm1wh16cn.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (auto c : string) {\n        count += std::count(std::begin(c), std::end(c), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "/tmp/tmpu6b7hsdf.cpp: In function \u2018long int count_distinct_characters(std::string)\u2019:\n/tmp/tmpu6b7hsdf.cpp:11:41: error: no matching function for call to \u2018begin(char&)\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/range_access.h:36,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpu6b7hsdf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/initializer_list:89:5: note:   template argument deduction/substitution failed:\n/tmp/tmpu6b7hsdf.cpp:11:41: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018char\u2019\n   11 |         count += std::count(std::begin(c), std::end(c), c);\n      |                                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:54,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (int i = 0; i < string.size(); i++) {\n        count += (string[i] == ' ') ? 0 : 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmpgxf_y86d: /tmp/tmpgxf_y86d.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    long count = 0;\n    for (char c : string) {\n        count += std::count(std::begin(string), std::end(string), c);\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292702,
      "stdout": "",
      "stderr": "tmphoi321_3: /tmp/tmphoi321_3.cpp:19: int main(): Assertion `candidate((\"abcdecadeCADE\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, int> map;\n    for (char c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmp2ugnjsef: /tmp/tmp2ugnjsef.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n// 4\nlong count_distinct_characters(std::string string) {\n    std::unordered_map<char, long> map;\n    for (auto c : string) {\n        map[c]++;\n    }\n    long count = 0;\n    for (auto it = map.begin(); it != map.end(); it++) {\n        if (it->second > 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n",
      "timestamp": 1664292704,
      "stdout": "",
      "stderr": "tmpkl5wmmig: /tmp/tmpkl5wmmig.cpp:24: int main(): Assertion `candidate((\"abcde\")) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}