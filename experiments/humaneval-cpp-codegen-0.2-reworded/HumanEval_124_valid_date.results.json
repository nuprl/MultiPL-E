{
  "name": "HumanEval_124_valid_date",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n",
  "tests": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 28) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmps2v5isdl: /tmp/tmps2v5isdl.cpp:41: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (year < 0 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmpsfk9t5sx: /tmp/tmpsfk9t5sx.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\") return false;\n    } else {\n        return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day.empty() || day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day.empty() || day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\") return false;\n    }\n    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmpjr58y04u: /tmp/tmpjr58y04u.cpp:48: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"15\",\"16\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months2[] = {\"04\",\"06\",\"09\",\"11\"};\n    std::string days2[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months4[] = {\"02\"};\n    std::string days4[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months5[] = {\"02\"};\n    std::string days5[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months6[] = {\"02\"};\n    std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "/tmp/tmpiwmvbvwm.cpp:33:148: warning: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\n      |                                                                                                                                                    ^\n/tmp/tmpiwmvbvwm.cpp:33:148: error: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\n      |                                                                                                                                                    ^~~\n/tmp/tmpiwmvbvwm.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpiwmvbvwm.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   35 | int main() {\n      | ^~~\n/tmp/tmpiwmvbvwm.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpiwmvbvwm.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpiwmvbvwm.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmpjiw95vcj: /tmp/tmpjiw95vcj.cpp:51: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    if (month < 1 || month > 12) return false;\n    int day = date[2] - '0';\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmp66uaaqpu: /tmp/tmp66uaaqpu.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day.empty() || day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day.empty() || day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day.empty() || day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmphoo9bk2h.cpp:42:35: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\n      |                                   ^\n/tmp/tmphoo9bk2h.cpp:42:35: error: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\n      |                                   ^~~\n/tmp/tmphoo9bk2h.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmphoo9bk2h.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmphoo9bk2h.cpp:42:34: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\n      |        ~                         ^\n      |                                  )\n   43 | }\n      | ~                                 \n/tmp/tmphoo9bk2h.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmphoo9bk2h.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 0 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmpphsgwrmo: /tmp/tmpphsgwrmo.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month.size() != 2 || day.size() != 2 || year.size() != 4)\n        return false;\n    if (month[0] < '1' || month[0] > '12' || month[1] < '0' || month[1] > '9')\n        return false;\n    if (day[0] < '1' || day[0] > '30' || day[1] < '0' || day[1] > '9')\n        return false;\n    if (month[0] == '2' && day[0] > '29')\n        return false;\n    if (month[0] == '1' || month[0] == '3' || month[0] == '5' || month[0] == '7' || month[0] == '8' || month[0] == '10' || month[0] == '12') {\n        if (day[0] < '1' || day[0] > '31')\n            return false;\n    } else if (month[0] == '4' || month[0] == '6' || month[0] == '9' || month[0] == '11') {\n        if (day[0] < '1' || day[0] > '30')\n            return false;\n    }\n    if (month[1] < '0' || month[1] > '9')\n        return false;\n    if (day[1] < '0' || day[1] > '9')\n        return false;\n    if (year[0] < '0' || year[0] > '9')\n        return false;\n    if (year[1] < '0' || year[1] > '9')\n        return false;\n    if (year[2] < '0' || year[2]\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmp2vu6nlhy.cpp:30:38: warning: multi-character character constant [-Wmultichar]\n   30 |     if (month[0] < '1' || month[0] > '12' || month[1] < '0' || month[1] > '9')\n      |                                      ^~~~\n/tmp/tmp2vu6nlhy.cpp:32:34: warning: multi-character character constant [-Wmultichar]\n   32 |     if (day[0] < '1' || day[0] > '30' || day[1] < '0' || day[1] > '9')\n      |                                  ^~~~\n/tmp/tmp2vu6nlhy.cpp:34:37: warning: multi-character character constant [-Wmultichar]\n   34 |     if (month[0] == '2' && day[0] > '29')\n      |                                     ^~~~\n/tmp/tmp2vu6nlhy.cpp:36:116: warning: multi-character character constant [-Wmultichar]\n   36 |     if (month[0] == '1' || month[0] == '3' || month[0] == '5' || month[0] == '7' || month[0] == '8' || month[0] == '10' || month[0] == '12') {\n      |                                                                                                                    ^~~~\n/tmp/tmp2vu6nlhy.cpp:36:136: warning: multi-character character constant [-Wmultichar]\n   36 |     if (month[0] == '1' || month[0] == '3' || month[0] == '5' || month[0] == '7' || month[0] == '8' || month[0] == '10' || month[0] == '12') {\n      |                                                                                                                                        ^~~~\n/tmp/tmp2vu6nlhy.cpp:37:38: warning: multi-character character constant [-Wmultichar]\n   37 |         if (day[0] < '1' || day[0] > '31')\n      |                                      ^~~~\n/tmp/tmp2vu6nlhy.cpp:39:85: warning: multi-character character constant [-Wmultichar]\n   39 |     } else if (month[0] == '4' || month[0] == '6' || month[0] == '9' || month[0] == '11') {\n      |                                                                                     ^~~~\n/tmp/tmp2vu6nlhy.cpp:40:38: warning: multi-character character constant [-Wmultichar]\n   40 |         if (day[0] < '1' || day[0] > '30')\n      |                                      ^~~~\n/tmp/tmp2vu6nlhy.cpp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year == \"0025\" || year == \"0026\" || year == \"0027\" || year == \"0028\" || year == \"0029\" || year == \"0030\" || year == \"0031\") {\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpnh979seu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpnh979seu.cpp:31:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   31 | int main() {\n      |            ^\n/tmp/tmpnh979seu.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpnh979seu.cpp:28:371: note: to match this \u2018{\u2019\n   28 |         if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\") {\n      |                                                                                                                                                                                                                                                                                                                                                                                   ^\n/tmp/tmpnh979seu.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpnh979seu.cpp:27:211: note: to match this \u2018{\u2019\n   27 |     if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n      |                                                                                                                                                                                                                   ^\n/tmp/tmpnh979seu.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpnh979seu.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpnh979seu.cpp:49:1: warning: control reaches end of non-void function [-Wreturn-type]\n   49 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\";\n    std::string day_str = \"\";\n    std::string year_str = \"\";\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpegqiqx0y.cpp:40:19: warning: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^\n/tmp/tmpegqiqx0y.cpp:40:19: error: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^~~\n/tmp/tmpegqiqx0y.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:40:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         if (day < \"01\n      |            ~     ^\n      |                  )\n   41 | }\n      | ~                 \n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:42:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main() {\n      |            ^\n/tmp/tmpegqiqx0y.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpegqiqx0y.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year_ = date.substr(6,4);\n    int month_ = stoi(month);\n    int day_ = stoi(day);\n    int year_ = stoi(year_);\n    if (month_ < 1 || month_ > 12) return false;\n    if (day_ < 1 || day_ > 31) return false;\n    if (month_ == 2) {\n        if (day_ < 1 || day_ > 29) return false;\n    }\n    else {\n        if (day_ < 1 || day_ > 30) return false;\n    }\n    if (month_ == 1 || month_ == 3 || month_ == 5 || month_ == 7 || month_ == 8 || month_ == 10 || month_ == 12) {\n        if (day_ < 1 || day_ > 31) return false;\n    }\n    else {\n        if (day_ < 1 || day_ > 30) return false;\n    }\n    if (month_ == 4 || month_ == 6 || month_ == 9 || month_ == 11) {\n        if (\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpv5pp0ey3.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpv5pp0ey3.cpp:30:9: error: conflicting declaration \u2018int year_\u2019\n   30 |     int year_ = stoi(year_);\n      |         ^~~~~\n/tmp/tmpv5pp0ey3.cpp:27:17: note: previous declaration as \u2018std::string year_\u2019\n   27 |     std::string year_ = date.substr(6,4);\n      |                 ^~~~~\n/tmp/tmpv5pp0ey3.cpp:47:1: error: expected primary-expression before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpv5pp0ey3.cpp:46:13: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   46 |         if (\n      |            ~^\n      |             )\n   47 | }\n      | ~            \n/tmp/tmpv5pp0ey3.cpp:47:1: error: expected primary-expression before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpv5pp0ey3.cpp:48:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   48 | int main() {\n      |            ^\n/tmp/tmpv5pp0ey3.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpv5pp0ey3.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpv5pp0ey3.cpp:66:1: warning: control reaches end of non-void function [-Wreturn-type]\n   66 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"10\",\"12\"};\n    std::string days[] = {\"1\",\"4\",\"6\",\"9\",\"11\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months2[] = {\"2\",\"4\",\"6\",\"9\",\"11\"};\n    std::string days2[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months3[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"10\",\"12\"};\n    std::string days3[] = {\"1\",\"4\",\"6\",\"9\",\"11\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months4[] = {\"4\",\"6\",\"9\",\"11\"};\n    std::string days4[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months5[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"10\",\"12\"};\n    std::string days5[] = {\"1\",\"4\",\"6\",\"9\",\"11\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months6[] = {\"4\",\"6\",\"9\",\"11\"};\n    std::string days6[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpxc705d60.cpp:33:157: warning: missing terminating \" character\n   33 |     std::string days6[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\n      |                                                                                                                                                             ^\n/tmp/tmpxc705d60.cpp:33:157: error: missing terminating \" character\n   33 |     std::string days6[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\n      |                                                                                                                                                             ^~~\n/tmp/tmpxc705d60.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpxc705d60.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   35 | int main() {\n      | ^~~\n/tmp/tmpxc705d60.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpxc705d60.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpxc705d60.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31) {\n        if (month == 2) {\n            if (day < 1 || day > 29)\n                return false;\n        } else if (day < 1 || day > 30)\n            return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    if (year < 1900 || year > 2100)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) {\n        return false;\n    }\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") {\n            return false;\n        }\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") {\n            return false;\n        }\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") {\n            return false;\n        }\n    }\n    if (month < \"01\" || month > \"12\") {\n        return false;\n    }\n    if (day < \"01\" || day > \"31\") {\n        return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") {\n            return false;\n        }\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") {\n            return false;\n        }\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") {\n            return false\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpvi5hjt5v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvi5hjt5v.cpp:59:25: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   59 |             return false\n      |                         ^\n      |                         ;\n   60 | }\n      | ~                        \n/tmp/tmpvi5hjt5v.cpp:61:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   61 | int main() {\n      |            ^\n/tmp/tmpvi5hjt5v.cpp:79:1: error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmpvi5hjt5v.cpp:57:31: note: to match this \u2018{\u2019\n   57 |     } else if (month == \"02\") {\n      |                               ^\n/tmp/tmpvi5hjt5v.cpp:79:1: error: expected \u2018}\u2019 at end of input\n   79 | }\n      | ^\n/tmp/tmpvi5hjt5v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpvi5hjt5v.cpp:79:1: warning: control reaches end of non-void function [-Wreturn-type]\n   79 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmp3g7rwb_r.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp3g7rwb_r.cpp:52:73: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\"\n      |        ~                                                                ^\n      |                                                                         )\n   53 | }\n      | ~                                                                        \n/tmp/tmp3g7rwb_r.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp3g7rwb_r.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    if (month < 1 || month > 12) return false;\n    int day = date[2] - '0';\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n    }\n    int year = date[5] - '0';\n    if (year < 0 || year > 9999) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmp5yoqvohj: /tmp/tmp5yoqvohj.cpp:42: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::string days[] = {\"1\", \"30\", \"29\", \"28\"};\n    std::string months_days[] = {\"1\", \"31\", \"30\", \"29\"};\n    std::string months_days_year[] = {\"1\", \"31\", \"30\", \"29\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\"};\n    std::string months_days_year_leap[] = {\"1\", \"31\", \"30\", \"29\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\"};\n    std::string months_days_year_leap_leap[] = {\"1\", \"31\", \"30\", \"29\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\"};\n    std::string months_days_year_leap_leap_leap[] = {\"1\", \"31\", \"30\", \"29\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmp7uoz98gi.cpp:28:419: warning: missing terminating \" character\n   28 |     std::string months_days_year_leap_leap_leap[] = {\"1\", \"31\", \"30\", \"29\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\n      |                                                                                                                                                                                                                                                                                                                                                                                                                                   ^\n/tmp/tmp7uoz98gi.cpp:28:419: error: missing terminating \" character\n   28 |     std::string months_days_year_leap_leap_leap[] = {\"1\", \"31\", \"30\", \"29\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\n      |                                                                                                                                                                                                                                                                                                                                                                                                                                   ^~~\n/tmp/tmp7uoz98gi.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp7uoz98gi.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmp7uoz98gi.cpp:48:1:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2 && day > 29)\n        return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmp0o1zuvii: /tmp/tmp0o1zuvii.cpp:48: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\"};\n    std::string days_month[] = {\"01-02-2000\", \"02-02-2000\", \"03-02-2000\", \"04-02-2000\", \"05-02-2000\", \"06-02-2000\", \"07-02-2000\", \"08-02-2000\", \"09-02-2000\", \"10-02-2000\", \"11-02-2000\", \"12-02-2000\"};\n    std::string year_month[] = {\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmp240u39qz.cpp:28:33: warning: missing terminating \" character\n   28 |     std::string year_month[] = {\"\n      |                                 ^\n/tmp/tmp240u39qz.cpp:28:33: error: missing terminating \" character\n/tmp/tmp240u39qz.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp240u39qz.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmp240u39qz.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp240u39qz.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp240u39qz.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.size() != 10) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 28) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    }\n    else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmp1qqbfavq: /tmp/tmp1qqbfavq.cpp:51: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\n            return false;\n    } else {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    if (year < 1900 || year > 2100)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4)\n        return false;\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"02\" && day > \"29\")\n        return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    }\n    if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpiebcu02q: /tmp/tmpiebcu02q.cpp:59: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpegqiqx0y.cpp:40:19: warning: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^\n/tmp/tmpegqiqx0y.cpp:40:19: error: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^~~\n/tmp/tmpegqiqx0y.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:40:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         if (day < \"01\n      |            ~     ^\n      |                  )\n   41 | }\n      | ~                 \n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:42:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main() {\n      |            ^\n/tmp/tmpegqiqx0y.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpegqiqx0y.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::stringstream ss(date);\n    ss >> month;\n    if (ss.fail()) return false;\n    if (month < 1 || month > 12) return false;\n    ss >> day;\n    if (ss.fail()) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    ss >> year;\n    if (ss.fail()) return false;\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmp9drb2bvj: /tmp/tmp9drb2bvj.cpp:44: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") return false;\n    if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day <\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmprpamc2hd.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmprpamc2hd.cpp:33:1: error: expected primary-expression before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmprpamc2hd.cpp:32:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   32 |         if (day <\n      |            ~     ^\n      |                  )\n   33 | }\n      | ~                 \n/tmp/tmprpamc2hd.cpp:33:1: error: expected primary-expression before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmprpamc2hd.cpp:34:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   34 | int main() {\n      |            ^\n/tmp/tmprpamc2hd.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmprpamc2hd.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmprpamc2hd.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    if (month < 1 || month > 12) return false;\n    int day = date[2] - '0';\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    int year = date[4] - '0';\n    if (year < 1 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "tmpdtlnrsfo: /tmp/tmpdtlnrsfo.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\", day_str = \"\", year_str = \"\";\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month != 0) return false;\n            month = i;\n        } else if (date[i] >= '0' && date[i] <= '9') {\n            if (day != 0) return false;\n            day = i;\n        } else if (date[i] >= '0' && date[i] <= '9') {\n            if (year != 0) return false;\n            year = i;\n        } else if (date[i] == ' ') {\n            if (month_str != \"\") return false;\n            month_str = date.substr(0, i);\n        } else if (date[i] == '/') {\n            if (day_str != \"\") return false;\n            day_str = date.substr(0, i);\n        } else if (date[i] == ' ') {\n            if (year_str != \"\") return false;\n            year_str = date.substr(0, i);\n        }\n    }\n    if (month_str == \"\") return false;\n    if (day_str == \"\") return false;\n    if (year_str == \"\") return false;\n    if (month_str == \"\") return false;\n    if (day_str == \"\") return false;\n    if (year_str == \"\") return false;\n    if (month_str == \"\") return false;\n    if (day_str == \"\") return false;\n    if (year_str == \"\") return false;\n    if (month_str == \"\") return false;\n    if (day_str == \"\") return false;\n    if (year_str == \"\") return false;\n    if (month_str == \"\") return false;\n    if (day_str == \"\") return false;\n    if (year_str == \"\") return false;\n    if (month\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmp6ajt31bz.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp6ajt31bz.cpp:60:14: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   60 |     if (month\n      |        ~     ^\n      |              )\n   61 | }\n      | ~             \n/tmp/tmp6ajt31bz.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmp6ajt31bz.cpp:61:1: warning: control reaches end of non-void function [-Wreturn-type]\n   61 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month, day, year;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month.size() > 2 || month.size() < 1)\n        return false;\n    if (day.size() > 2 || day.size() < 1)\n        return false;\n    if (year.size() > 4 || year.size() < 4)\n        return false;\n    if (month.size() == 1) {\n        if (month[0] == '0' || month[0] == '1' || month[0] == '2' || month[0] == '3' || month[0] == '4' || month[0] == '5' || month[0] == '6' || month[0] == '7' || month[0] == '8' || month[0] == '9')\n            return false;\n    }\n    if (month.size() == 2) {\n        if (month[0] == '0')\n            return false;\n        if (month[1] == '0' || month[1] == '1' || month[1] == '2' || month[1] == '3' || month[1] == '4' || month[1] == '5' || month[1] == '6' || month[1] == '7' || month[1] == '8' || month[1] == '9')\n            return false;\n    }\n    if (month.size() == 3) {\n        if (month[0] == '0')\n            return false;\n        if (month[1] == '0')\n            return false;\n        if (month[2] == '0' || month[2] == '1' || month[2] == '2' || month[2] == '3' || month[2] == '4' || month[2] == '5' || month[2] == '6' || month[2] == '7' || month[2] == '8' || month[2\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmp5i4w1fpv.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp5i4w1fpv.cpp:49:191: error: expected \u2018]\u2019 before \u2018}\u2019 token\n   49 |         if (month[2] == '0' || month[2] == '1' || month[2] == '2' || month[2] == '3' || month[2] == '4' || month[2] == '5' || month[2] == '6' || month[2] == '7' || month[2] == '8' || month[2\n      |                                                                                                                                                                                               ^\n      |                                                                                                                                                                                               ]\n   50 | }\n      | ~                                                                                                                                                                                              \n/tmp/tmp5i4w1fpv.cpp:49:191: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   49 |         if (month[2] == '0' || month[2] == '1' || month[2] == '2' || month[2] == '3' || month[2] == '4' || month[2] == '5' || month[2] == '6' || month[2] == '7' || month[2] == '8' || month[2\n      |            ~                                                                                                                                                                                  ^\n      |                                                                                                                                                                                               )\n   50 | }\n      | ~                                                                                                                                                                                              \n/tmp/tmp5i4w1fpv.cpp:50:1: error: expected primary-expression before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmp5i4w1fpv.cpp:51:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   51 | int",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year_ = date.substr(6, 4);\n    if (std::find(months, months + sizeof(months) / sizeof(months[0]), month) == months + sizeof(months) / sizeof(months[0]) ||\n        std::find(days, days + sizeof(days) / sizeof(days[0]), day) == days + sizeof(days) / sizeof(days[0]) ||\n        std::find(year, year + sizeof(year) / sizeof(year[0]), year_) == year + sizeof(year) / sizeof(year[0])) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpt1lvwn26: /tmp/tmpt1lvwn26.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmphm0m5dux.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmphm0m5dux.cpp:28:463: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   28 |             if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\"\n      |                ~                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^\n      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               )\n   29 | }\n      | ~                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n/tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month, day, year;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || month.size() < 1) return false;\n    if (day.size() > 2 || day.size() < 1) return false;\n    if (year.size() > 4 || year.size() < 4) return false;\n    if (month.size() == 1) {\n        if (month[0] < '1' || month[0] > '12') return false;\n    }\n    else if (month.size() == 2) {\n        if (month[0] < '1' || month[0] > '2') return false;\n        if (month[1] < '0' || month[1] > '9') return false;\n    }\n    else if (month.size() == 3) {\n        if (month[0] < '1' || month[0] > '3') return false;\n        if (month[1] < '0' || month[1] > '9') return false;\n        if (month[2] < '0' || month[2] > '9') return false;\n    }\n    else if (month.size() == 4) {\n        if (month[0] < '1' || month[0] > '4') return false;\n        if (month[1] < '0' || month[1] > '9') return false;\n        if (month[2] < '0' || month[2] > '9') return false;\n        if (month[3] < '0' || month[3] > '9') return false;\n    }\n    if (day.size() == 1) {\n        if (day[0] < '0' || day[0] > '9') return false;\n    }\n    else if (day.size() == 2) {\n        if (day[0] < '0' || day[0] > '2') return false;\n        if (day[1]\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpb28gy0b9.cpp:30:42: warning: multi-character character constant [-Wmultichar]\n   30 |         if (month[0] < '1' || month[0] > '12') return false;\n      |                                          ^~~~\n/tmp/tmpb28gy0b9.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpb28gy0b9.cpp:52:19: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |         if (day[1]\n      |            ~      ^\n      |                   )\n   53 | }\n      | ~                  \n/tmp/tmpb28gy0b9.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpb28gy0b9.cpp:54:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   54 | int main() {\n      |            ^\n/tmp/tmpb28gy0b9.cpp:72:1: error: expected \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmpb28gy0b9.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpb28gy0b9.cpp:72:1: warning: control reaches end of non-void function [-Wreturn-type]\n   72 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year_ = date.substr(6, 4);\n    if (std::find(months, months + 12, month) == months + 12) return false;\n    if (std::find(days, days + 31, day) == days + 31) return false;\n    if (std::find(days, days + 30, day) == days + 30) return false;\n    if (std::find(days, days + 29, day) == days + 29) return false;\n    if (std::find(year, year + 20, year_) == year + 20) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmphaidep6v: /tmp/tmphaidep6v.cpp:40: int main(): Assertion `candidate((\"06-04-2020\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpacvudl9d.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpacvudl9d.cpp:50:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   50 | int main() {\n      |            ^\n/tmp/tmpacvudl9d.cpp:68:1: error: expected \u2018}\u2019 at end of input\n   68 | }\n      | ^\n/tmp/tmpacvudl9d.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpacvudl9d.cpp:68:1: warning: control reaches end of non-void function [-Wreturn-type]\n   68 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01\", \"03-01\", \"05-01\", \"07-01\", \"08-01\", \"10-01\", \"12-01\"};\n    std::string months_day_year[] = {\"01-01-2000\", \"03-01-2000\", \"05-01-2000\", \"07-01-2000\", \"08-01-2000\", \"10-01-2000\", \"12-01-2000\"};\n    std::string months_day_year_day[] = {\"01-01-2000-01\", \"03-01-2000-01\", \"05-01-2000-01\", \"07-01-2000-01\", \"08-01-2000-01\", \"10-01-2000-01\", \"12-01-2000-01\"};\n    std::string months_day_year_day_month[] = {\"01-01-2000-01-01\", \"03-01-\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpoatae1i7.cpp:28:68: warning: missing terminating \" character\n   28 |     std::string months_day_year_day_month[] = {\"01-01-2000-01-01\", \"03-01-\n      |                                                                    ^\n/tmp/tmpoatae1i7.cpp:28:68: error: missing terminating \" character\n   28 |     std::string months_day_year_day_month[] = {\"01-01-2000-01-01\", \"03-01-\n      |                                                                    ^~~~~~~\n/tmp/tmpoatae1i7.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpoatae1i7.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmpoatae1i7.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmpoatae1i7.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpoatae1i7.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\"};\n    std::string days_month[] = {\"01-02-2000\", \"02-02-2000\", \"03-02-2000\", \"04-02-2000\", \"05-02-2000\", \"06-02-2000\", \"07-02-2000\", \"08-02-2000\", \"09-02-2000\", \"10-02-2000\", \"11-02-2000\", \"12-02-2000\"};\n    std::string months_day_year[] = {\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmp9bl060yl.cpp:27:38: warning: missing terminating \" character\n   27 |     std::string months_day_year[] = {\"\n      |                                      ^\n/tmp/tmp9bl060yl.cpp:27:38: error: missing terminating \" character\n/tmp/tmp9bl060yl.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp9bl060yl.cpp:29:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   29 | int main() {\n      | ^~~\n/tmp/tmp9bl060yl.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmp9bl060yl.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp9bl060yl.cpp:47:1: warning: control reaches end of non-void function [-Wreturn-type]\n   47 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31) {\n        if (month == 2) {\n            if (day < 1 || day > 29)\n                return false;\n        } else {\n            return false;\n        }\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n            return false;\n    } else {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmpi9k3853w: /tmp/tmpi9k3853w.cpp:58: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\", \"01-03-2000\", \"02-03-2000\", \"03-03-2000\", \"04-03-2000\", \"05-03-2000\", \"06-03-2000\", \"07-03-2000\", \"08-03-2000\", \"09-03-2000\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "/tmp/tmpsu6pv1_g.cpp:27:313: warning: missing terminating \" character\n   27 |     std::string days_month[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\", \"01-03-2000\", \"02-03-2000\", \"03-03-2000\", \"04-03-2000\", \"05-03-2000\", \"06-03-2000\", \"07-03-2000\", \"08-03-2000\", \"09-03-2000\n      |                                                                                                                                                                                                                                                                                                                         ^\n/tmp/tmpsu6pv1_g.cpp:27:313: error: missing terminating \" character\n   27 |     std::string days_month[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\", \"01-03-2000\", \"02-03-2000\", \"03-03-2000\", \"04-03-2000\", \"05-03-2000\", \"06-03-2000\", \"07-03-2000\", \"08-03-2000\", \"09-03-2000\n      |                                                                                                                                                                                                                                                                                                                         ^~~~~~~~~~~\n/tmp/tmpsu6pv1_g.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpsu6pv1_g.cpp:29:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   29 | int main() {\n      | ^~~\n/tmp/tmpsu6pv1_g.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpsu6pv1_g.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpsu6pv1_g.cpp:47:1: warning: control reaches end of non-void function [-Wreturn-type]\n   47 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months2[] = {\"04\", \"06\", \"09\", \"11\"};\n    std::string days2[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months4[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days4[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months5[] = {\"01\", \"03\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpxc2km4mt.cpp:30:42: warning: missing terminating \" character\n   30 |     std::string months5[] = {\"01\", \"03\", \"\n      |                                          ^\n/tmp/tmpxc2km4mt.cpp:30:42: error: missing terminating \" character\n/tmp/tmpxc2km4mt.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpxc2km4mt.cpp:32:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   32 | int main() {\n      | ^~~\n/tmp/tmpxc2km4mt.cpp:50:1: error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmpxc2km4mt.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpxc2km4mt.cpp:50:1: warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvor10rcu.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpvor10rcu.cpp:42:120: error: missing terminating \" character\n/tmp/tmpvor10rcu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string years[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvb6kza34.cpp:25:577: warning: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06\n      |n/tmp/tmpvb6kza34.cpp:25:577: error: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06\n      |                                                                                                                                             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.size() != 10) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[6] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 1000 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293100,
      "stdout": "",
      "stderr": "tmp1ul88ay2: /tmp/tmp1ul88ay2.cpp:42: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year_ = date.substr(6, 4);\n    if (std::find(std::begin(months), std::end(months), month) == std::end(months)) return false;\n    if (std::find(std::begin(days), std::end(days), day) == std::end(days)) return false;\n    if (std::find(std::begin(year_), std::end(year_), year_) == std::end(year_)) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpb4r5mpt7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h: In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:120:14:   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char> >]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:161:23:   required from \u2018_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char> >]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3899:28:   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmpb4r5mpt7.cpp:30:60:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:241:17: error: no match for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    } else\n        return false;\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmprd4oo93b.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmprd4oo93b.cpp:53:56: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   53 |     if (month == \"01\" || month == \"03\" || month == \"05\"\n      |        ~                                               ^\n      |                                                        )\n   54 | }\n      | ~                                                       \n/tmp/tmprd4oo93b.cpp:54:1: error: expected primary-expression before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmprd4oo93b.cpp:54:1: warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"};\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year_ = date.substr(6,4);\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    }\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\") return false;\n    }\n    if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day > \"30\") return false;\n    }\n    if (month == \"02\") {\n        if (day < \"01\") return false;\n    }\n    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpzcf4rm87: /tmp/tmpzcf4rm87.cpp:50: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month, day, year;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || month.size() < 1) return false;\n    if (day.size() > 2 || day.size() < 1) return false;\n    if (year.size() > 4 || year.size() < 4) return false;\n    if (month.size() == 2) {\n        if (month[0] == '0') return false;\n        if (month[1] == '0') return false;\n    }\n    if (month.size() == 1) {\n        if (month[0] == '0') return false;\n    }\n    if (day.size() == 2) {\n        if (day[0] == '0') return false;\n        if (day[1] == '0') return false;\n    }\n    if (day.size() == 1) {\n        if (day[0] == '0') return false;\n    }\n    if (month.size() == 2) {\n        if (month[0] == '0') return false;\n        if (month[1] == '0') return false;\n    }\n    if (month.size() == 1) {\n        if (month[0] == '0') return false;\n    }\n    if (day.size() == 2) {\n        if (day[0] == '0') return false;\n        if (day[1] == '0') return false;\n    }\n    if (day.size() == 1) {\n        if (day[0] == '0') return false;\n    }\n    if (month.size() == 2) {\n        if (month[0] == '0') return false;\n        if (month[1] == '0') return false;\n    }\n    if (month.size() == 1) {\n        if (month[0] == '0') return false;\n    }\n    if (day.size() == 2) {\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmptt0f66hf.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmptt0f66hf.cpp:66:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   66 | int main() {\n      |            ^\n/tmp/tmptt0f66hf.cpp:84:1: error: expected \u2018}\u2019 at end of input\n   84 | }\n      | ^\n/tmp/tmptt0f66hf.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmptt0f66hf.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 1 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpk2l24ym7: /tmp/tmpk2l24ym7.cpp:50: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days[] = {\"01\",\"03\",\"05\",\"07\",\"09\",\"11\",\"12\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06-09\",\"06-10\",\"06-11\",\"06-12\",\"07-01\",\"07-02\",\"07\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpy9v1h_5t.cpp:25:625: warning: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06-09\",\"06-10\",\"06-11\",\"06-12\",\"07-01\",\"07-02\",\"07\n      |n/tmp/tmpy9v1h_5t.cpp:25:625: error: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06-09\",\"06-10\",\"06-11\",\"06-12\",\"07-01\",\"07-02\",\"07\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else {\n        return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpwd_67u4b.cpp:44:103: warning: missing terminating \" character\n   44 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"\n      |                                                                                                       ^\n/tmp/tmpwd_67u4b.cpp:44:103: error: missing terminating \" character\n/tmp/tmpwd_67u4b.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpwd_67u4b.cpp:45:1: error: expected primary-expression before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpwd_67u4b.cpp:44:102: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   44 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"\n      |        ~                                                                                             ^\n      |                                                                                                      )\n   45 | }\n      | ~                                                                                                     \n/tmp/tmpwd_67u4b.cpp:45:1: error: expected primary-expression before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpwd_67u4b.cpp:45:1: warning: control reaches end of non-void function [-Wreturn-type]\n   45 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::string days[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"19\", \"21\", \"22\", \"24\", \"25\", \"27\", \"28\", \"30\", \"31\"};\n    std::string months2[] = {\"4\", \"6\", \"9\", \"11\"};\n    std::string days2[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months3[] = {\"2\"};\n    std::string days3[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months4[] = {\"2\"};\n    std::string days4[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months5[] = {\"2\"};\n    std::string days5[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpr9pomqrk.cpp:32:68: warning: missing terminating \" character\n   32 |     std::string days5[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\n      |                                                                    ^\n/tmp/tmpr9pomqrk.cpp:32:68: error: missing terminating \" character\n/tmp/tmpr9pomqrk.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpr9pomqrk.cpp:34:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   34 | int main() {\n      | ^~~\n/tmp/tmpr9pomqrk.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmpr9pomqrk.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpr9pomqrk.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmphm0m5dux.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmphm0m5dux.cpp:28:463: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   28 |             if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\"\n      |                ~                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^\n      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                               )\n   29 | }\n      | ~                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n/tmp/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\", day_str = \"\", year_str = \"\";\n    for (int i = 0; i < date.length(); i++) {\n        if (date[i] == '-') {\n            if (month == 0) {\n                month = i;\n                month_str = date.substr(0, month);\n            } else {\n                day = i;\n                day_str = date.substr(month + 1, day - month - 1);\n            }\n        } else if (date[i] == '/') {\n            if (day == 0) {\n                day = i;\n                day_str = date.substr(0, day);\n            } else {\n                year = i;\n                year_str = date.substr(day + 1, year - day - 1);\n            }\n        }\n    }\n    if (month == 0 || day == 0 || year == 0) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month_str == \"Jan\") month = 1;\n    else if (month_str == \"Feb\") month = 2;\n    else if (month_str == \"Mar\") month = 3;\n    else if (month_str == \"Apr\") month = 4;\n    else if (month_str == \"May\") month = 5;\n    else if (month_str == \"Jun\") month = 6;\n    else if (month_str == \"Jul\") month = 7;\n    else if (month_str\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpl9_h_36a.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpl9_h_36a.cpp:60:23: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   60 |     else if (month_str\n      |             ~         ^\n      |                       )\n   61 | }\n      | ~                      \n/tmp/tmpl9_h_36a.cpp:60:14: error: could not convert \u2018month_str\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n   60 |     else if (month_str\n      |              ^~~~~~~~~\n      |              |\n      |              std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpl9_h_36a.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpl9_h_36a.cpp:61:1: warning: control reaches end of non-void function [-Wreturn-type]\n   61 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string months[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::string days[] = {\"1\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\"};\n    std::string months_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\"};\n    std::string months_day_year[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\"};\n    std::string months_day_year_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\"};\n    std::string months_day_year_day_year[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\"};\n    std::string months_day_year_day_year_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\"};\n    std::string months_day_year_day_year_day_year[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\", \"34\"};\n    std::string months_day_year_day_year_day_year_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\", \"34\", \"35\"};\n    std::string months_day_year_day_year_day_year_day_year[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"};\n    std::string months_day_year_day_year_day_year_day_year_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmp06xl5qgj.cpp:34:143: warning: missing terminating \" character\n   34 |     std::string months_day_year_day_year_day_year_day_year_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\n      |                                                                                                                                               ^\n/tmp/tmp06xl5qgj.cpp:34:143: error: missing terminating \" character\n   34 |     std::string months_day_year_day_year_day_year_day_year_day[] = {\"2\", \"4\", \"6\", \"9\", \"11\", \"30\", \"29\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\n      |                                                                                                                                               ^~~\n/tmp/tmp06xl5qgj.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp06xl5qgj.cpp:36:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   36 | int main() {\n      | ^~~\n/tmp/tmp06xl5qgj.cpp:54:1: error: expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmp06xl5qgj.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp06xl5qgj.cpp:54:1: warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") return false;\n    if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"31\") return false;\n    }\n    if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    }\n    if (month == \"02\") {\n        if (\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmphpf40v7v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmphpf40v7v.cpp:35:1: error: expected primary-expression before \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmphpf40v7v.cpp:34:13: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   34 |         if (\n      |            ~^\n      |             )\n   35 | }\n      | ~            \n/tmp/tmphpf40v7v.cpp:35:1: error: expected primary-expression before \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmphpf40v7v.cpp:36:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   36 | int main() {\n      |            ^\n/tmp/tmphpf40v7v.cpp:54:1: error: expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmphpf40v7v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmphpf40v7v.cpp:54:1: warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string month = date.substr(0,3);\n    std::string day = date.substr(4,2);\n    std::string year_ = date.substr(7,4);\n    if (std::find(months, months + 12, month) == months + 12) return false;\n    if (std::find(days, days + 31, day) == days + 31) return false;\n    if (std::find(days, days + 30, day) == days + 30) return false;\n    if (std::find(year, year + 20, year_) == year + 20) return false;\n    if (std::find(year, year + 20, year_) == year + 20) return false;\n    if (std::find(year, year + 20, year_) == year + 20) return false;\n    if (std::find(year, year + 20, year_) == year + 20) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpb0u9sguw: /tmp/tmpb0u9sguw.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvor10rcu.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpvor10rcu.cpp:42:120: error: missing terminating \" character\n/tmp/tmpvor10rcu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpegqiqx0y.cpp:40:19: warning: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^\n/tmp/tmpegqiqx0y.cpp:40:19: error: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^~~\n/tmp/tmpegqiqx0y.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:40:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         if (day < \"01\n      |            ~     ^\n      |                  )\n   41 | }\n      | ~                 \n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:42:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main() {\n      |            ^\n/tmp/tmpegqiqx0y.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpegqiqx0y.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months2[] = {\"04\",\"06\",\"09\",\"11\"};\n    std::string days2[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months4[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days4[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months5[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days5[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months6[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days6\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpyos3u86a.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpyos3u86a.cpp:34:1: error: expected initializer before \u2018}\u2019 token\n   34 | }\n      | ^\n/tmp/tmpyos3u86a.cpp:34:1: warning: control reaches end of non-void function [-Wreturn-type]\n   34 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.size() != 10) return false;\n    if (date[2] != '-') return false;\n    if (date[5] != '-') return false;\n    if (date[8] != '-') return false;\n    if (date[0] < '0' || date[0] > '9') return false;\n    if (date[1] < '0' || date[1] > '9') return false;\n    if (date[3] < '0' || date[3] > '9') return false;\n    if (date[4] < '0' || date[4] > '9') return false;\n    if (date[6] < '0' || date[6] > '9') return false;\n    if (date[7] < '0' || date[7] > '9') return false;\n    if (date[9] < '0' || date[9] > '9') return false;\n    if (date[10] < '0' || date[10] > '9') return false;\n    if (date[1] > '2') return false;\n    if (date[3] > '5') return false;\n    if (date[5] > '9') return false;\n    if (date[7] > '9') return false;\n    if (date[9] > '9') return false;\n    if (date[10] > '9') return false;\n    if (date[1] < '1' || date[1] > '12') return false;\n    if (date[3] < '1' || date[3] > '12') return false;\n    if (date[5] < '1' || date[5] > '12') return false;\n    if (date[7] < '1' || date[7] > '12') return false;\n    if (date[9] < '1' || date[9] > '12') return false;\n    if (date[10] < '1' || date[10] > '12') return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmpx0lbj8va: /tmp/tmpx0lbj8va.cpp:50: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\", \"01-03-2000\", \"01-05-2000\", \"01-07-2000\", \"01-08-2000\", \"01-10-2000\", \"01-12-2000\"};\n    std::string months_day_year[] = {\"01-01-2000\",\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmptdaashg8.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmptdaashg8.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmptdaashg8.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmptdaashg8.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmptdaashg8.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year_ = date.substr(6, 4);\n    if (std::find(months, months + 12, month) == months + 12 || std::find(days, days + 31, day) == days + 31 || std::find(year, year + 20, year_) == year + 20)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "tmp80c15954: /tmp/tmp80c15954.cpp:35: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpq9whmxgm.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpq9whmxgm.cpp:27:464: error: no match for \u2018operator||\u2019 (operand types are \u2018bool\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   27 |             if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year\n      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~\n      |                                                                                                                                                                                                                                                                                                                                                                                                                                                              |                    |\n      |                                                                                                                                                                                                                                                                                                                                                                                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month_year_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year_day_month[] = {\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpl8uy3rfa.cpp:31:48: warning: missing terminating \" character\n   31 |     std::string months_day_year_day_month[] = {\"\n      |                                                ^\n/tmp/tmpl8uy3rfa.cpp:31:48: error: missing terminating \" character\n/tmp/tmpl8uy3rfa.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpl8uy3rfa.cpp:33:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   33 | int main() {\n      | ^~~\n/tmp/tmpl8uy3rfa.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpl8uy3rfa.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpl8uy3rfa.cpp:51:1: warning: control reaches end of non-void function [-Wreturn-type]\n   51 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.length() < 10) return false;\n    if (date.length() > 10) return false;\n    if (date[2] != '-') return false;\n    if (date[5] != '-') return false;\n    if (date[8] != '-') return false;\n    if (date[0] < '0' || date[0] > '9') return false;\n    if (date[1] < '0' || date[1] > '9') return false;\n    if (date[3] < '0' || date[3] > '9') return false;\n    if (date[4] < '0' || date[4] > '9') return false;\n    if (date[6] < '0' || date[6] > '9') return false;\n    if (date[7] < '0' || date[7] > '9') return false;\n    if (date[9] < '0' || date[9] > '9') return false;\n    if (date[10] < '0' || date[10] > '9') return false;\n    if (date[11] < '0' || date[11] > '9') return false;\n    if (date[12] != '-') return false;\n    if (date[14] != '-') return false;\n    if (date[16] != '-') return false;\n    if (date[18] != '-') return false;\n    if (date[19] != '-') return false;\n    if (date[20] != '-') return false;\n    if (date[21] != '-') return false;\n    if (date[23] != '-') return false;\n    if (date[25] != '-') return false;\n    if (date[26] != '-') return false;\n    if (date[27] != '-') return false;\n    if (date[28] != '-') return false;\n    if (date[29] != '-') return false;\n    if (date[30] != '-') return false;\n    if\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpzagbbl4u.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpzagbbl4u.cpp:51:1: error: expected \u2018(\u2019 before \u2018}\u2019 token\n   51 | }\n      | ^\n      | (\n/tmp/tmpzagbbl4u.cpp:51:1: warning: control reaches end of non-void function [-Wreturn-type]\n   51 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str, day_str, year_str;\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::stringstream ss(date);\n    ss >> month;\n    if (month < 1 || month > 12) return false;\n    ss >> day;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    ss >> year;\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "tmpgwl1b1sr: /tmp/tmpgwl1b1sr.cpp:43: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_arr[] = {\"1\",\"3\",\"5\",\"7\",\"8\",\"10\",\"12\"};\n    std::string days_arr[] = {\"1\",\"3\",\"5\",\"7\",\"9\",\"11\",\"13\",\"15\",\"17\",\"19\",\"21\",\"23\",\"25\",\"27\",\"29\",\"31\"};\n    std::string year_arr[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_arr2[] = {\"4\",\"6\",\"9\",\"11\"};\n    std::string days_arr2[] = {\"1\",\"4\",\"6\",\"9\",\"11\",\"14\",\"16\",\"18\",\"20\",\"22\",\"24\",\"26\",\"28\",\"30\"};\n    std::string year_arr2[] = {\"2004\",\"2006\",\"2008\",\"2010\",\"2012\",\"2014\",\"2016\",\"2018\",\"2020\",\"2022\",\"2024\",\"2026\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293102,
      "stdout": "",
      "stderr": "/tmp/tmp9ut31p8o.cpp:30:109: warning: missing terminating \" character\n   30 |     std::string year_arr2[] = {\"2004\",\"2006\",\"2008\",\"2010\",\"2012\",\"2014\",\"2016\",\"2018\",\"2020\",\"2022\",\"2024\",\"2026\n      |                                                                                                             ^\n/tmp/tmp9ut31p8o.cpp:30:109: error: missing terminating \" character\n   30 |     std::string year_arr2[] = {\"2004\",\"2006\",\"2008\",\"2010\",\"2012\",\"2014\",\"2016\",\"2018\",\"2020\",\"2022\",\"2024\",\"2026\n      |                                                                                                             ^~~~~\n/tmp/tmp9ut31p8o.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp9ut31p8o.cpp:32:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   32 | int main() {\n      | ^~~\n/tmp/tmp9ut31p8o.cpp:50:1: error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmp9ut31p8o.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp9ut31p8o.cpp:50:1: warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\", day_str = \"\", year_str = \"\";\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month_str.empty() && day_str.empty() && year_str.empty()) {\n                month_str = date.substr(0, i);\n                day_str = date.substr(i + 1, date.size() - i - 1);\n                year_str = date.substr(date.size() - 4, 4);\n            }\n            else return false;\n        }\n        else if (date[i] >= '0' && date[i] <= '9') {\n            if (month_str.empty() && day_str.empty() && year_str.empty()) {\n                month_str = date.substr(0, i);\n                day_str = date.substr(i, date.size() - i);\n                year_str = date.substr(date.size() - 4, 4);\n            }\n            else return false;\n        }\n        else return false;\n    }\n    if (month_str.empty() || day_str.empty() || year_str.empty()) return false;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpmnubgvm1.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpmnubgvm1.cpp:58:16: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   58 |     return true\n      |                ^\n      |                ;\n   59 | }\n      | ~               \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\";\n    std::string day_str = \"\";\n    std::string year_str = \"\";\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") {\n            if (year == \"2000\" || year == \"2001\" || year == \"2002\" || year == \"2003\" || year == \"2004\" || year == \"2005\" || year == \"2006\" || year == \"2007\" || year == \"2008\" || year == \"2009\" || year == \"2010\" || year == \"2011\" || year == \"2012\" || year == \"2013\" || year == \"2014\" || year == \"2015\" || year == \"2016\" || year == \"2017\" || year == \"2018\" || year == \"2019\" || year == \"2020\" || year == \"2021\" || year == \"2022\" || year == \"2023\" || year == \"2024\" || year == \"2025\" || year == \"2026\" || year == \"2027\" || year == \"2028\" || year ==\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpa187nohp.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpa187nohp.cpp:28:1: error: expected primary-expression before \u2018}\u2019 token\n   28 | }\n      | ^\n/tmp/tmpa187nohp.cpp:27:546: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   27 |             if (year == \"2000\" || year == \"2001\" || year == \"2002\" || year == \"2003\" || year == \"2004\" || year == \"2005\" || year == \"2006\" || year == \"2007\" || year == \"2008\" || year == \"2009\" || year == \"2010\" || year == \"2011\" || year == \"2012\" || year == \"2013\" || year == \"2014\" || year == \"2015\" || year == \"2016\" || year == \"2017\" || year == \"2018\" || year == \"2019\" || year == \"2020\" || year == \"2021\" || year == \"2022\" || year == \"2023\" || year == \"2024\" || year == \"2025\" || year == \"2026\" || year == \"2027\" || year == \"2028\" || year ==\n      |                ~n      |n   28 | }\n      | ~                                                                                                                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpwy53vr4a: /tmp/tmpwy53vr4a.cpp:52: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" ||\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmp_hi__wk7.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp_hi__wk7.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmp_hi__wk7.cpp:40:26: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         if (day < \"01\" ||\n      |            ~             ^\n      |                          )\n   41 | }\n      | ~                         \n/tmp/tmp_hi__wk7.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmp_hi__wk7.cpp:42:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main() {\n      |            ^\n/tmp/tmp_hi__wk7.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmp_hi__wk7.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp_hi__wk7.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day > 31) return false;\n    } else {\n        if (day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month == 2) {\n        if (day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpnav0ckv8: /tmp/tmpnav0ckv8.cpp:49: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"15\",\"16\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months2[] = {\"04\",\"06\",\"09\",\"11\"};\n    std::string days2[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months4[] = {\"02\"};\n    std::string days4[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months5[] = {\"02\"};\n    std::string days5[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months6[] = {\"02\"};\n    std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "/tmp/tmpiwmvbvwm.cpp:33:148: warning: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\n      |                                                                                                                                                    ^\n/tmp/tmpiwmvbvwm.cpp:33:148: error: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\n      |                                                                                                                                                    ^~~\n/tmp/tmpiwmvbvwm.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpiwmvbvwm.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   35 | int main() {\n      | ^~~\n/tmp/tmpiwmvbvwm.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpiwmvbvwm.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpiwmvbvwm.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\", day_str = \"\", year_str = \"\";\n    for (int i = 0; i < date.length(); i++) {\n        if (date[i] == '-') {\n            if (month == 0) {\n                month = i;\n            } else {\n                return false;\n            }\n        } else if (date[i] >= '0' && date[i] <= '9') {\n            day_str += date[i];\n        } else if (date[i] >= 'a' && date[i] <= 'z') {\n            day_str += date[i];\n        } else if (date[i] >= 'A' && date[i] <= 'Z') {\n            day_str += date[i];\n        } else {\n            return false;\n        }\n    }\n    if (month == 0) return false;\n    month_str = date.substr(0, month);\n    day_str = date.substr(month + 1, date.length() - month - 1);\n    year_str = date.substr(date.length() - 4, 4);\n    if (day_str.empty()) return false;\n    if (month_str.length() != 2) return false;\n    if (day_str.length() != 2) return false;\n    if (year_str.length() != 4) return false;\n    if (month_str[0] < '0' || month_str[0] > '9') return false;\n    if (month_str[1] < '0' || month_str[1] > '9') return false;\n    if (day_str[0] < '0' || day_str[0] > '9') return false;\n    if (day_str[1] < '0' || day_str[1] > '9') return false;\n    if (year_str[0] < '0' || year_str[0] > '9') return false;\n    if (year_str[1] < '0' || year\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpt6mxqsp3.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpt6mxqsp3.cpp:54:34: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |     if (year_str[1] < '0' || year\n      |        ~                         ^\n      |                                  )\n   55 | }\n      | ~                                 \n/tmp/tmpt6mxqsp3.cpp:55:1: error: expected primary-expression before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpt6mxqsp3.cpp:55:1: warning: control reaches end of non-void function [-Wreturn-type]\n   55 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\") return false;\n    } else {\n        return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day.empty() || day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day.empty() || day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\") return false;\n    } else {\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpw13m4c9x.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpw13m4c9x.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmpw13m4c9x.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmpw13m4c9x.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpw13m4c9x.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months2[] = {\"04\", \"06\", \"09\", \"11\"};\n    std::string days2[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months4[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days4[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months5[] = {\"01\", \"03\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpxc2km4mt.cpp:30:42: warning: missing terminating \" character\n   30 |     std::string months5[] = {\"01\", \"03\", \"\n      |                                          ^\n/tmp/tmpxc2km4mt.cpp:30:42: error: missing terminating \" character\n/tmp/tmpxc2km4mt.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpxc2km4mt.cpp:32:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   32 | int main() {\n      | ^~~\n/tmp/tmpxc2km4mt.cpp:50:1: error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmpxc2km4mt.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpxc2km4mt.cpp:50:1: warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\", day_str = \"\", year_str = \"\";\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month_str.empty()) {\n                month_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n            else if (day_str.empty()) {\n                day_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n            else if (year_str.empty()) {\n                year_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n        }\n        if (date[i] >= '0' && date[i] <= '9') {\n            day = day * 10 + date[i] - '0';\n        }\n        else if (date[i] == ' ') {\n            if (day_str.empty()) {\n                day_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n            else if (month_str.empty()) {\n                month_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n            else if (year_str.empty()) {\n                year_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n        }\n        else if (date[i] == ':') {\n            if (day_str.empty()) {\n                day_str = date.substr(0, i);\n                date = date.substr(i + 1);\n                continue;\n            }\n            else if (month_str.empty()) {\n                month_str = date.substr(0, i);\n                date = date\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpuf7xusqs.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpuf7xusqs.cpp:70:28: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   70 |                 date = date\n      |                            ^\n      |                            ;\n   71 | }\n      | ~                           \n/tmp/tmpuf7xusqs.cpp:72:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   72 | int main() {\n      |            ^\n/tmp/tmpuf7xusqs.cpp:90:1: error: expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmpuf7xusqs.cpp:62:34: note: to match this \u2018{\u2019\n   62 |         else if (date[i] == ':') {\n      |                                  ^\n/tmp/tmpuf7xusqs.cpp:90:1: error: expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmpuf7xusqs.cpp:24:43: note: to match this \u2018{\u2019\n   24 |     for (int i = 0; i < date.size(); i++) {\n      |                                           ^\n/tmp/tmpuf7xusqs.cpp:90:1: error: expected \u2018}\u2019 at end of input\n   90 | }\n      | ^\n/tmp/tmpuf7xusqs.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpuf7xusqs.cpp:90:1: warning: control reaches end of non-void function [-Wreturn-type]\n   90 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpyoh4j94u: /tmp/tmpyoh4j94u.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() != 2) return false;\n    if (day.size() != 2) return false;\n    if (year.size() != 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    }\n    if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"};\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year_ = date.substr(6,4);\n    int month_ = stoi(month);\n    int day_ = stoi(day);\n    int year_ = stoi(year_);\n    if (month_ < 1 || month_ > 12) return false;\n    if (day_ < 1 || day_ > 31) return false;\n    if (month_ == 2) {\n        if (day_ < 1 || day_ > 29) return false;\n    }\n    if (month_ == 1 || month_ == 3 || month_ == 5 || month_ == 7 || month_ == 8 || month_ == 10 || month_ == 12) {\n        if (day_ < 1 || day_ > 31) return false;\n    }\n    if (month_ == 4 || month_ == 6 || month_ == 9 || month_ == 11) {\n        if (day_ < 1 || day_ > 30) return false;\n    }\n    if (month_ == 1 || month_ == 3 || month_ == 5 || month_ == 7 || month_ == 8 || month_ == 10 || month_ == 12) {\n        if (day_ < 1 || day_ > 31) return false;\n    }\n    if (month_ == 4 || month_ == 6 || month_ == 9 || month_ == 11) {\n        if (day_ <\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpfnak3cgu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpfnak3cgu.cpp:30:9: error: conflicting declaration \u2018int year_\u2019\n   30 |     int year_ = stoi(year_);\n      |         ^~~~~\n/tmp/tmpfnak3cgu.cpp:27:17: note: previous declaration as \u2018std::string year_\u2019\n   27 |     std::string year_ = date.substr(6,4);\n      |                 ^~~~~\n/tmp/tmpfnak3cgu.cpp:47:1: error: expected primary-expression before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpfnak3cgu.cpp:46:19: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   46 |         if (day_ <\n      |            ~      ^\n      |                   )\n   47 | }\n      | ~                  \n/tmp/tmpfnak3cgu.cpp:47:1: error: expected primary-expression before \u2018}\u2019 token\n   47 | }\n      | ^\n/tmp/tmpfnak3cgu.cpp:48:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   48 | int main() {\n      |            ^\n/tmp/tmpfnak3cgu.cpp:66:1: error: expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmpfnak3cgu.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpfnak3cgu.cpp:66:1: warning: control reaches end of non-void function [-Wreturn-type]\n   66 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\";\n    std::string day_str = \"\";\n    std::string year_str = \"\";\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.size() != 10) return false;\n    if (date[0] != '0' && date[0] != '1' && date[0] != '2' && date[0] != '3' && date[0] != '4' && date[0] != '5' && date[0] != '6' && date[0] != '7' && date[0] != '8' && date[0] != '9') return false;\n    if (date[2] != '0' && date[2] != '1' && date[2] != '2' && date[2] != '3' && date[2] != '4' && date[2] != '5' && date[2] != '6' && date[2] != '7' && date[2] != '8' && date[2] != '9') return false;\n    if (date[5] != '0' && date[5] != '1' && date[5] != '2' && date[5] != '3' && date[5] != '4' && date[5] != '5' && date[5] != '6' && date[5] != '7' && date[5] != '8' && date[5] != '9') return false;\n    if (date[8] != '0' && date[8] != '1' && date[8] != '2' && date[8] != '3' && date[8] != '4' && date[8] != '5' && date[8] != '6' && date[8] != '7' && date[8] != '8' && date[8] != '9') return false;\n    if (date[1] != '0' && date[1] != '1' && date[1] != '2' && date[1] != '3' && date[1] != '4' && date[1] != '5' && date[1] != '6' && date[1] != '7' && date[1] != '8' && date[1] != '9') return false;\n    if (date[3]\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpi_3mqt76.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpi_3mqt76.cpp:28:16: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   28 |     if (date[3]\n      |        ~       ^\n      |                )\n   29 | }\n      | ~               \n/tmp/tmpi_3mqt76.cpp:29:1: error: expected primary-expression before \u2018}\u2019 token\n   29 | }\n      | ^\n/tmp/tmpi_3mqt76.cpp:29:1: warning: control reaches end of non-void function [-Wreturn-type]\n   29 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    if (year < 1900 || year > 2100)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\", day_str = \"\", year_str = \"\";\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month_str.empty() || day_str.empty() || year_str.empty())\n                return false;\n            month = stoi(month_str);\n            day = stoi(day_str);\n            year = stoi(year_str);\n            if (month < 1 || month > 12)\n                return false;\n            if (day < 1 || day > 31)\n                return false;\n            if (month == 2 && day > 29)\n                return false;\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                if (day < 1 || day > 31)\n                    return false;\n            }\n            if (month == 4 || month == 6 || month == 9 || month == 11) {\n                if (day < 1 || day > 30)\n                    return false;\n            }\n            month_str = \"\";\n            day_str = \"\";\n            year_str = \"\";\n        } else if (date[i] >= '0' && date[i] <= '9') {\n            if (month_str.empty() || day_str.empty() || year_str.empty())\n                return false;\n            month_str += date[i];\n        } else if (date[i] == ' ') {\n            if (month_str.empty() || day_str.empty() || year_str.empty())\n                return false;\n            day_str += date[i];\n        } else if (date[i] == '/') {\n            if (month_str.empty() || day_str.empty() || year_str.empty())\n                return false;\n            month_str += date[i];\n        } else if (date[i] >= 'A' && date[i] <= 'Z') {\n            if (month_\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpwd996r5u.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpwd996r5u.cpp:62:17: error: \u2018month_\u2019 was not declared in this scope; did you mean \u2018month\u2019?\n   62 |             if (month_\n      |                 ^~~~~~\n      |                 month\n/tmp/tmpwd996r5u.cpp:62:23: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   62 |             if (month_\n      |                ~      ^\n      |                       )\n   63 | }\n      | ~                      \n/tmp/tmpwd996r5u.cpp:63:1: error: expected primary-expression before \u2018}\u2019 token\n   63 | }\n      | ^\n/tmp/tmpwd996r5u.cpp:64:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   64 | int main() {\n      |            ^\n/tmp/tmpwd996r5u.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpwd996r5u.cpp:25:43: note: to match this \u2018{\u2019\n   25 |     for (int i = 0; i < date.size(); i++) {\n      |                                           ^\n/tmp/tmpwd996r5u.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpwd996r5u.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpwd996r5u.cpp:82:1: warning: control reaches end of non-void function [-Wreturn-type]\n   82 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpq9whmxgm.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpq9whmxgm.cpp:27:464: error: no match for \u2018operator||\u2019 (operand types are \u2018bool\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   27 |             if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year\n      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~\n      |                                                                                                                                                                                                                                                                                                                                                                                                                                                              |                    |\n      |                                                                                                                                                                                                                                                                                                                                                                                     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str, day_str, year_str;\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month < 1 || month > 12) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.size() != 10) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 1000 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0,2));\n    int day = stoi(date.substr(3,2));\n    int year = stoi(date.substr(6,4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpf9xqdj_1: /tmp/tmpf9xqdj_1.cpp:52: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4) return false;\n    if (month.size() == 1) month = \"0\" + month;\n    if (day.size() == 1) day = \"0\" + day;\n    if (year.size() == 1) year = \"0\" + year;\n    if (month.size() != 2) return false;\n    if (day.size() != 2) return false;\n    if (year.size() != 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    }\n    if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    int i = 0;\n    for (i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month == 0) {\n                month = i;\n            } else {\n                return false;\n            }\n        } else if (date[i] >= '0' && date[i] <= '9') {\n            day = i;\n        } else if (date[i] >= '0' && date[i] <= '9') {\n            year = i;\n        } else {\n            return false;\n        }\n    }\n    if (month == 0) return false;\n    if (day == 0) return false;\n    if (year == 0) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "/tmp/tmpkw6i2vkw.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpkw6i2vkw.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpkw6i2vkw.cpp:60:40: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   60 |         if (day < 1 || day > 30) return\n      |                                        ^\n      |                                        ;\n   61 | }\n      | ~                                       \n/tmp/tmpkw6i2vkw.cpp:62:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   62 | int main() {\n      |            ^\n/tmp/tmpkw6i2vkw.cpp:80:1: error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpkw6i2vkw.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) {\n            return false;\n        }\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) {\n            return false;\n        }\n    }\n    if (year < 1900 || year > 2100) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmp_jw9oooh: /tmp/tmp_jw9oooh.cpp:53: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    int i = 0;\n    while (i < date.size()) {\n        if (date[i] == '-') {\n            month = atoi(date.substr(0, i).c_str());\n            day = atoi(date.substr(i + 1, date.size() - i - 1).c_str());\n            year = atoi(date.substr(date.size() - 4, 4).c_str());\n            if (month < 1 || month > 12) return false;\n            if (day < 1 || day > 31) return false;\n            if (month == 2 && day > 29) return false;\n            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                if (day < 1 || day > 30) return false;\n            }\n            else {\n                if (day < 1 || day > 29) return false;\n            }\n            break;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293104,
      "stdout": "",
      "stderr": "tmpbv1u4rt7: /tmp/tmpbv1u4rt7.cpp:59: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (year < 1 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpvzvegubm: /tmp/tmpvzvegubm.cpp:50: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\";\n    std::string day_str = \"\";\n    std::string year_str = \"\";\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month_str.empty()) {\n                month_str = date.substr(0, i);\n                date = date.substr(i + 1);\n            }\n            else if (day_str.empty()) {\n                day_str = date.substr(0, i);\n                date = date.substr(i + 1);\n            }\n            else if (year_str.empty()) {\n                year_str = date.substr(0, i);\n                date = date.substr(i + 1);\n            }\n            else {\n                return false;\n            }\n        }\n        else if (date[i] >= '0' && date[i] <= '9') {\n            if (month_str.empty()) {\n                month_str = date.substr(0, i);\n                date = date.substr(i);\n            }\n            else if (day_str.empty()) {\n                day_str = date.substr(0, i);\n                date = date.substr(i);\n            }\n            else if (year_str.empty()) {\n                year_str = date.substr(0, i);\n                date = date.substr(i);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    if (month_str.empty()) return false;\n    month = stoi(month_str);\n    if (day_str.empty()) {\n        day = stoi(day_str);\n    }\n    else {\n        day = stoi(day_str);\n    }\n    if (year_str.empty()) {\n        year = stoi(year_str);\n    }\n    else {\n        year = stoi(year_\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmp67vexstk.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp67vexstk.cpp:77:21: error: \u2018year_\u2019 was not declared in this scope; did you mean \u2018year\u2019?\n   77 |         year = stoi(year_\n      |                     ^~~~~\n      |                     year\n/tmp/tmp67vexstk.cpp:79:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   79 | int main() {\n      |            ^\n/tmp/tmp67vexstk.cpp:97:1: error: expected \u2018}\u2019 at end of input\n   97 | }\n      | ^\n/tmp/tmp67vexstk.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp67vexstk.cpp:97:1: warning: control reaches end of non-void function [-Wreturn-type]\n   97 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months2[] = {\"04\",\"06\",\"09\",\"11\"};\n    std::string days2[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months4[] = {\"02\"};\n    std::string days4[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months5[] = {\"02\"};\n    std::string days5[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months6[] = {\"02\"};\n    std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpb00i93k6.cpp:33:108: warning: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\n      |                                                                                                            ^\n/tmp/tmpb00i93k6.cpp:33:108: error: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\n      |                                                                                                            ^~~\n/tmp/tmpb00i93k6.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpb00i93k6.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   35 | int main() {\n      | ^~~\n/tmp/tmpb00i93k6.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpb00i93k6.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpb00i93k6.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year == \"0025\" || year == \"0026\" || year == \"0027\" || year == \"0028\" || year == \"0029\" || year == \"0030\" || year == \"0031\") {\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpu0izk99r.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpu0izk99r.cpp:29:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   29 | int main() {\n      |            ^\n/tmp/tmpu0izk99r.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpu0izk99r.cpp:26:371: note: to match this \u2018{\u2019\n   26 |         if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\") {\n      |                                                                                                                                                                                                                                                                                                                                                                                   ^\n/tmp/tmpu0izk99r.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpu0izk99r.cpp:25:228: note: to match this \u2018{\u2019\n   25 |     if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n      |                                                                                                                                                                                                                                    ^\n/tmp/tmpu0izk99r.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpu0izk99r.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpu0izk99r.cpp:47:1: warning: control reaches end of non-void function [-Wreturn-type]\n   47 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvor10rcu.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpvor10rcu.cpp:42:120: error: missing terminating \" character\n/tmp/tmpvor10rcu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    int month_count = 0, day_count = 0;\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            month_count++;\n        }\n        else if (date[i] >= '0' && date[i] <= '9') {\n            day_count++;\n        }\n        else {\n            return false;\n        }\n    }\n    if (month_count != 2 || day_count != 2) return false;\n    if (date[0] >= '0' && date[0] <= '9') {\n        month = date[0] - '0';\n        day = date[2] - '0';\n        year = date[4] - '0';\n    }\n    else if (date[0] == '/' && date[1] >= '0' && date[1] <= '9') {\n        month = date[1] - '0';\n        day = date[3] - '0';\n        year = date[5] - '0';\n    }\n    else {\n        return false;\n    }\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (year < 1000 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmporz6t827: /tmp/tmporz6t827.cpp:63: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    if (year < 1000 || year > 9999)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpe55ilkv7: /tmp/tmpe55ilkv7.cpp:46: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year_ = date.substr(6, 4);\n    int month_ = std::stoi(month);\n    int day_ = std::stoi(day);\n    int year_ = std::stoi(year_);\n    if (month_ < 1 || month_ > 12) return false;\n    if (day_ < 1 || day_ > 31) return false;\n    if (month_ == 2 && day_ > 29) return false;\n    if (month_ == 1 || month_ == 3 || month_ == 5 || month_ == 7 || month_ == 8 || month_ == 10 || month_ == 12) {\n        if (day_ < 1 || day_ > 30) return false;\n    }\n    else if (month_ == 4 || month_ == 6 || month_ ==\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpwvghjfgy.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpwvghjfgy.cpp:30:9: error: conflicting declaration \u2018int year_\u2019\n   30 |     int year_ = std::stoi(year_);\n      |         ^~~~~\n/tmp/tmpwvghjfgy.cpp:27:17: note: previous declaration as \u2018std::string year_\u2019\n   27 |     std::string year_ = date.substr(6, 4);\n      |                 ^~~~~\n/tmp/tmpwvghjfgy.cpp:38:1: error: expected primary-expression before \u2018}\u2019 token\n   38 | }\n      | ^\n/tmp/tmpwvghjfgy.cpp:37:53: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   37 |     else if (month_ == 4 || month_ == 6 || month_ ==\n      |             ~                                       ^\n      |                                                     )\n   38 | }\n      | ~                                                    \n/tmp/tmpwvghjfgy.cpp:38:1: error: expected primary-expression before \u2018}\u2019 token\n   38 | }\n      | ^\n/tmp/tmpwvghjfgy.cpp:38:1: warning: control reaches end of non-void function [-Wreturn-type]\n   38 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 0 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpk7qnr3vx: /tmp/tmpk7qnr3vx.cpp:38: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0,2);\n    std::string day = date.substr(3,2);\n    std::string year = date.substr(6,4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpuluwd5e3.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpuluwd5e3.cpp:42:120: error: missing terminating \" character\n/tmp/tmpuluwd5e3.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpuluwd5e3.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpuluwd5e3.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpuluwd5e3.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpuluwd5e3.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmp87g4dhgu.cpp:28:122: warning: missing terminating \" character\n   28 |     std::string days_month_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-\n      |                                                                                                                          ^\n/tmp/tmp87g4dhgu.cpp:28:122: error: missing terminating \" character\n   28 |     std::string days_month_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-\n      |                                                                                                                          ^~~~\n/tmp/tmp87g4dhgu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp87g4dhgu.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmp87g4dhgu.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmp87g4dhgu.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp87g4dhgu.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::string days[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"19\", \"21\", \"22\", \"24\", \"25\", \"27\", \"28\", \"30\", \"31\"};\n    std::string months2[] = {\"4\", \"6\", \"9\", \"11\"};\n    std::string days2[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"19\", \"21\", \"22\", \"24\", \"25\", \"27\", \"28\", \"30\", \"31\"};\n    std::string months3[] = {\"2\"};\n    std::string days3[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"19\", \"21\", \"22\", \"24\", \"25\", \"27\", \"28\", \"30\", \"31\"};\n    std::string months4[] = {\"2\"};\n    std::string days4[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"19\", \"21\", \"22\", \"24\", \"25\", \"27\", \"28\", \"30\", \"31\"};\n    std::string months5[] = {\"2\", \"4\", \"6\", \"9\", \"11\"};\n    std::string days5[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"19\", \"21\", \"22\", \"24\", \"25\", \"27\", \"28\", \"30\", \"31\"};\n    std::string months6[] = {\"2\", \"4\", \"6\", \"9\", \"11\"};\n    std::string days6[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpvfkxngxy.cpp:33:83: warning: missing terminating \" character\n   33 |     std::string days6[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"18\", \"\n      |                                                                                   ^\n/tmp/tmpvfkxngxy.cpp:33:83: error: missing terminating \" character\n/tmp/tmpvfkxngxy.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvfkxngxy.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   35 | int main() {\n      | ^~~\n/tmp/tmpvfkxngxy.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmpvfkxngxy.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpvfkxngxy.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string years[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"02-01\",\"03-01\",\"04-01\",\"05-01\",\"06-01\",\"07-01\",\"08-01\",\"09-01\",\"10-01\",\"11-01\",\"12-01\"};\n    std::string months_day_year[] = {\"01-01-2000\",\"02-01-2000\",\"03-01-2000\",\"04-01-2000\",\"05-01-2000\",\"06-01-2000\",\"07-01-2000\",\"08-01-2000\",\"09-01-2000\",\"10-01-2000\",\"11-01-2000\",\"12-01-2000\"};\n    std::string months_day_year_day[] = {\"01-01-2000-01\",\"02-01-2000-01\",\"03-01-2000-01\",\"04-01-2000-01\",\"05-01-2000-01\",\"06-01-2000-01\",\"07-01-2000-01\",\"08-01-2000-01\",\"09-01-2000-01\",\"10-01-2000-01\",\"11-01-2000-01\",\"12-01-2000-01\"};\n    std::string months_day_year_day_year[] = {\"01-01-2000-01-2000\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpk5uxo4_x.cpp:28:47: warning: missing terminating \" character\n   28 |     std::string months_day_year_day_year[] = {\"01-01-2000-01-2000\n      |                                               ^\n/tmp/tmpk5uxo4_x.cpp:28:47: error: missing terminating \" character\n   28 |     std::string months_day_year_day_year[] = {\"01-01-2000-01-2000\n      |                                               ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpk5uxo4_x.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpk5uxo4_x.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmpk5uxo4_x.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmpk5uxo4_x.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpk5uxo4_x.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str, day_str, year_str;\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    else return false;\n    if (month < 1 || month > 12) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\";\n    std::string day_str = \"\";\n    std::string year_str = \"\";\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 29) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    } else {\n        if (day < 1 || day > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str, day_str, year_str;\n    for (int i = 0; i < date.length(); i++) {\n        if (date[i] == '-') {\n            if (month != 0) return false;\n            month = 0;\n            day = 0;\n            year = 0;\n        } else if (isdigit(date[i])) {\n            if (month == 0) month = 1;\n            else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                if (day > 31) return false;\n            } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                if (day > 30) return false;\n            } else if (month == 2) {\n                if (day > 29) return false;\n            }\n            day = day * 10 + date[i] - '0';\n        } else if (date[i] == '/') {\n            if (month == 0) return false;\n            month = month * 10 + date[i] - '0';\n            if (month < 1 || month > 12) return false;\n            day = 0;\n            year = 0;\n        } else if (date[i] == ' ') {\n            if (month == 0) return false;\n            month = month * 10 + date[i] - '0';\n            if (month < 1 || month > 12) return false;\n            day = 0;\n            year = 0;\n        } else if (date[i] == '0') {\n            if (month == 0) return false;\n            month = month * 10 + date[i] - '0';\n            if (month < 1 || month > 12) return false;\n            day = 0;\n            year = 0;\n        } else if (date[i] == '2') {\n            if (month == 0) return false;\n            month = month * 10 + date[i] - '0';\n            if (month < 1 || month > 12) return false\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmp9mwuytoe.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp9mwuytoe.cpp:61:54: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   61 |             if (month < 1 || month > 12) return false\n      |                                                      ^\n      |                                                      ;\n   62 | }\n      | ~                                                     \n/tmp/tmp9mwuytoe.cpp:63:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   63 | int main() {\n      |            ^\n/tmp/tmp9mwuytoe.cpp:81:1: error: expected \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmp9mwuytoe.cpp:24:45: note: to match this \u2018{\u2019\n   24 |     for (int i = 0; i < date.length(); i++) {\n      |                                             ^\n/tmp/tmp9mwuytoe.cpp:81:1: error: expected \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmp9mwuytoe.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp9mwuytoe.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months2[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months3[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months4[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months5[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months6[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months7[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months8[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months9[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months10[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months11[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmp44zxrnua.cpp:32:108: warning: missing terminating \" character\n   32 |     std::string months11[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"\n      |                                                                                                            ^\n/tmp/tmp44zxrnua.cpp:32:108: error: missing terminating \" character\n/tmp/tmp44zxrnua.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp44zxrnua.cpp:34:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   34 | int main() {\n      | ^~~\n/tmp/tmp44zxrnua.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmp44zxrnua.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp44zxrnua.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293103,
      "stdout": "",
      "stderr": "tmpyoh4j94u: /tmp/tmpyoh4j94u.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) {\n        return false;\n    }\n    if (month.length() != 2 || day.length() != 2 || year.length() != 4) {\n        return false;\n    }\n    if (month[0] < '0' || month[0] > '2' || month[1] < '0' || month[1] > '9' || day[0] < '0' || day[0] > '9' || day[1] < '0' || day[1] > '9' || year[0] < '0' || year[0] > '9' || year[1] < '0' || year[1] > '9' || year[2] < '0' || year[2] > '9' || year[3] < '0' || year[3] > '9') {\n        return false;\n    }\n    if (month[0] == '0' && month[1] == '0') {\n        return false;\n    }\n    if (month[0] == '1' && month[1] == '1') {\n        return false;\n    }\n    if (month[0] == '2' && month[1] == '2') {\n        return false;\n    }\n    if (month[0] == '3' && month[1] == '3') {\n        return false;\n    }\n    if (month[0] == '4' && month[1] == '4') {\n        return false;\n    }\n    if (month[0] == '5' && month[1] == '5') {\n        return false;\n    }\n    if (month[0] == '6' && month[1] == '6') {\n        return false;\n    }\n    if (month[0] == '7' && month[1] == '7')\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmp6wx2bjv4.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp6wx2bjv4.cpp:58:1: error: expected primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmp6wx2bjv4.cpp:58:1: warning: control reaches end of non-void function [-Wreturn-type]\n   58 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string yyyy = \"\";\n    std::string mm = \"\";\n    std::string dd = \"\";\n    for (int i = 0; i < date.length(); i++) {\n        if (date[i] == '-') {\n            if (yyyy.length() == 0) {\n                yyyy = date.substr(0, i);\n            } else if (mm.length() == 0) {\n                mm = date.substr(i + 1, 2);\n            } else if (dd.length() == 0) {\n                dd = date.substr(i + 3, 2);\n            }\n        }\n    }\n    if (yyyy.length() == 0 || mm.length() == 0 || dd.length() == 0) return false;\n    if (mm.length() > 2) return false;\n    if (mm < \"01\" || mm > \"12\") return false;\n    if (dd.length() > 2) return false;\n    if (dd < \"01\" || dd > \"31\") return false;\n    if (mm == \"02\" && dd > \"29\") return false;\n    if (mm == \"01\" || mm == \"03\" || mm == \"05\" || mm == \"07\" || mm == \"08\" || mm == \"10\" || mm == \"12\") {\n        if (dd < \"01\" || dd > \"31\") return false;\n    } else if (mm == \"04\" || mm == \"06\" || mm == \"09\" || mm == \"11\") {\n        if (dd < \"01\" || dd\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpjvz6yr_r.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpjvz6yr_r.cpp:47:23: error: no match for \u2018operator||\u2019 (operand types are \u2018bool\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   47 |         if (dd < \"01\" || dd\n      |             ~~~~~~~~~ ^~ ~~\n      |                |         |\n      |                bool      std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpjvz6yr_r.cpp:47:23: note: candidate: \u2018operator||(bool, bool)\u2019 <built-in>\n   47 |         if (dd < \"01\" || dd\n      |             ~~~~~~~~~~^~~~~\n/tmp/tmpjvz6yr_r.cpp:47:23: note:   no known conversion for argument 2 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n                 from /tmp/tmpjvz6yr_r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5: note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__logical_or, std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__logical_or, typename _Dom1::value_type>::result_type> std::operator||(const std::_Expr<_Dom1, typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\n  416 |     _DEFINE_EXPR_BINARY_OPERATOR(||, __logical_or)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:416:5: note:   template argument deduction/substitution failed:\n/tmp/tmpjvz6yr_r.cpp:47:26: note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019 and \u2018bool\u2019\n   47 |         if (dd < \"01\" || dd\n      |                          ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\")\n        return false;\n    if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\")\n        return false;\n    if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\")\n        return day >= \"01\" && day <= \"30\";\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\")\n        return day >= \"01\" && day <= \"31\";\n    return day >= \"01\" && day <= \"29\";\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "tmpnp0u_0ml: /tmp/tmpnp0u_0ml.cpp:38: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month, day, year;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4) return false;\n    if (month.size() == 2) {\n        if (month[0] < '0' || month[0] > '9') return false;\n        if (month[1] < '0' || month[1] > '9') return false;\n        if (month[0] == '0' && month[1] == '0') return false;\n    }\n    if (day.size() == 2) {\n        if (day[0] < '0' || day[0] > '9') return false;\n        if (day[1] < '0' || day[1] > '9') return false;\n        if (day[0] == '0' && day[1] == '0') return false;\n    }\n    if (month.size() == 1) {\n        if (month[0] < '1' || month[0] > '9') return false;\n    }\n    if (day.size() == 1) {\n        if (day[0] < '1' || day[0] > '9') return false;\n    }\n    if (year.size() == 2) {\n        if (year[0] < '0' || year[0] > '9') return false;\n        if (year[1] < '0' || year[1] > '9') return false;\n        if (year[0] == '0' && year[1] == '0') return false;\n    }\n    if (year.size() == 4) {\n        if (year[0] < '0' || year[0] > '9') return false;\n        if (year[1] < '0' || year[1] > '9') return false;\n        if (year[2] < '0' || year[2] > '9') return false\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpatt1f_o9.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpatt1f_o9.cpp:51:57: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   51 |         if (year[2] < '0' || year[2] > '9') return false\n      |                                                         ^\n      |                                                         ;\n   52 | }\n      | ~                                                        \n/tmp/tmpatt1f_o9.cpp:53:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   53 | int main() {\n      |            ^\n/tmp/tmpatt1f_o9.cpp:71:1: error: expected \u2018}\u2019 at end of input\n   71 | }\n      | ^\n/tmp/tmpatt1f_o9.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpatt1f_o9.cpp:71:1: warning: control reaches end of non-void function [-Wreturn-type]\n   71 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_short[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_long[] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string months_long_short[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_long_long[] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string months_long_long_short[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_long_long_long[] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string months_long_long_long_short[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_long_long_long_long_short[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_long_long_long_long_long_short[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\",\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpd70u2gkt.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpd70u2gkt.cpp:34:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   34 | int main() {\n      | ^~~\n/tmp/tmpd70u2gkt.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmpd70u2gkt.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpd70u2gkt.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months2[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months3[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months4[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months5[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months6[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months7[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months8[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months9[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months10[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months11[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmp44zxrnua.cpp:32:108: warning: missing terminating \" character\n   32 |     std::string months11[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"\n      |                                                                                                            ^\n/tmp/tmp44zxrnua.cpp:32:108: error: missing terminating \" character\n/tmp/tmp44zxrnua.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp44zxrnua.cpp:34:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   34 | int main() {\n      | ^~~\n/tmp/tmp44zxrnua.cpp:52:1: error: expected \u2018}\u2019 at end of input\n   52 | }\n      | ^\n/tmp/tmp44zxrnua.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp44zxrnua.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "/tmp/tmpzvot9fo9.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpzvot9fo9.cpp:52:90: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\"\n      |        ~                                                                                 ^\n      |                                                                                          )\n   53 | }\n      | ~                                                                                         \n/tmp/tmpzvot9fo9.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpzvot9fo9.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmp3g7rwb_r.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp3g7rwb_r.cpp:52:73: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\"\n      |        ~                                                                ^\n      |                                                                         )\n   53 | }\n      | ~                                                                        \n/tmp/tmp3g7rwb_r.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp3g7rwb_r.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpb8i5me09: /tmp/tmpb8i5me09.cpp:50: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"};\n    std::string days[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months2[] = {\"04\",\"06\",\"09\",\"11\"};\n    std::string days2[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months4[] = {\"02\"};\n    std::string days4[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months5[] = {\"02\"};\n    std::string days5[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string months6[] = {\"02\"};\n    std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "/tmp/tmp2yvs_lg7.cpp:33:143: warning: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\n      |                                                                                                                                               ^\n/tmp/tmp2yvs_lg7.cpp:33:143: error: missing terminating \" character\n   33 |     std::string days6[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\n      |                                                                                                                                               ^~~\n/tmp/tmp2yvs_lg7.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp2yvs_lg7.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   35 | int main() {\n      | ^~~\n/tmp/tmp2yvs_lg7.cpp:53:1: error: expected \u2018}\u2019 at end of input\n   53 | }\n      | ^\n/tmp/tmp2yvs_lg7.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp2yvs_lg7.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpegqiqx0y.cpp:40:19: warning: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^\n/tmp/tmpegqiqx0y.cpp:40:19: error: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^~~\n/tmp/tmpegqiqx0y.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:40:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         if (day < \"01\n      |            ~     ^\n      |                  )\n   41 | }\n      | ~                 \n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:42:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main() {\n      |            ^\n/tmp/tmpegqiqx0y.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpegqiqx0y.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvor10rcu.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpvor10rcu.cpp:42:120: error: missing terminating \" character\n/tmp/tmpvor10rcu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = 0, day = 0, year = 0;\n    std::string month_str = \"\";\n    std::string day_str = \"\";\n    std::string year_str = \"\";\n    std::stringstream ss(date);\n    ss >> month_str >> day_str >> year_str;\n    month = stoi(month_str);\n    day = stoi(day_str);\n    year = stoi(year_str);\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30)\n            return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    if (year < 1900 || year > 2100)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "terminate called after throwing an instance of 'std::invalid_argument'\n  what():  stoi\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\") {\n            if (year == \"0000\" || year == \"0001\" || year == \"0002\" || year == \"0003\" || year == \"0004\" || year == \"0005\" || year == \"0006\" || year == \"0007\" || year == \"0008\" || year == \"0009\" || year == \"0010\" || year == \"0011\" || year == \"0012\" || year == \"0013\" || year == \"0014\" || year == \"0015\" || year == \"0016\" || year == \"0017\" || year == \"0018\" || year == \"0019\" || year == \"0020\" || year == \"0021\" || year == \"0022\" || year == \"0023\" || year == \"0024\" || year == \"0025\" || year == \"0026\" || year == \"0027\" || year == \"0028\" || year == \"0029\" || year == \"0030\" || year == \"0031\") {\n                return true;\n            }\n        }\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293106,
      "stdout": "",
      "stderr": "/tmp/tmpwm42l4yq.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpwm42l4yq.cpp:36:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   36 | int main() {\n      |            ^\n/tmp/tmpwm42l4yq.cpp:54:1: error: expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmpwm42l4yq.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpwm42l4yq.cpp:54:1: warning: control reaches end of non-void function [-Wreturn-type]\n   54 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    if (date.size() != 10)\n        return false;\n    if (date[2] != '-')\n        return false;\n    if (date[5] != '-')\n        return false;\n    if (date[8] != '-')\n        return false;\n    if (date[0] < '0' || date[0] > '9')\n        return false;\n    if (date[1] < '0' || date[1] > '9')\n        return false;\n    if (date[3] < '0' || date[3] > '9')\n        return false;\n    if (date[4] < '0' || date[4] > '9')\n        return false;\n    if (date[6] < '0' || date[6] > '9')\n        return false;\n    if (date[7] < '0' || date[7] > '9')\n        return false;\n    if (date[9] < '0' || date[9] > '9')\n        return false;\n    if (date[10] != '0' && date[10] != '1' && date[10] != '2' && date[10] != '3' && date[10] != '4' && date[10] != '5' && date[10] != '6' && date[10] != '7' && date[10] != '8' && date[10] != '9')\n        return false;\n    if (date[1] > '2' && date[1] < '4') {\n        if (date[3] < '1' || date[3] > '30')\n            return false;\n        if (date[4] < '1' || date[4] > '29')\n            return false;\n    } else if (date[1] > '4' && date[1] < '6') {\n        if (date[3] < '1' || date[3] > '29')\n            return false;\n        if (date[4] < '1' || date[4] > '28')\n            return false;\n    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpilwmyk9f: /tmp/tmpilwmyk9f.cpp:61: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\")\n            return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmp3g7rwb_r.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp3g7rwb_r.cpp:52:73: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   52 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\"\n      |        ~                                                                ^\n      |                                                                         )\n   53 | }\n      | ~                                                                        \n/tmp/tmp3g7rwb_r.cpp:53:1: error: expected primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp3g7rwb_r.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvor10rcu.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpvor10rcu.cpp:42:120: error: missing terminating \" character\n/tmp/tmpvor10rcu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.length() != 10) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day > 31) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (year < 1000 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months2[] = {\"04\", \"06\", \"09\", \"11\"};\n    std::string days2[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months3[] = {\"02\"};\n    std::string days3[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months4[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days4[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months5[] = {\"01\", \"03\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpxc2km4mt.cpp:30:42: warning: missing terminating \" character\n   30 |     std::string months5[] = {\"01\", \"03\", \"\n      |                                          ^\n/tmp/tmpxc2km4mt.cpp:30:42: error: missing terminating \" character\n/tmp/tmpxc2km4mt.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpxc2km4mt.cpp:32:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   32 | int main() {\n      | ^~~\n/tmp/tmpxc2km4mt.cpp:50:1: error: expected \u2018}\u2019 at end of input\n   50 | }\n      | ^\n/tmp/tmpxc2km4mt.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpxc2km4mt.cpp:50:1: warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmprn2b2p0s: /tmp/tmprn2b2p0s.cpp:41: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"03\", \"05\", \"07\", \"09\", \"11\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month_year[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month_year_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"09-09-2000\", \"11-11-2000\", \"12-12-2000\"};\n    std::string months_day_year_day_month[] = {\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpl8uy3rfa.cpp:31:48: warning: missing terminating \" character\n   31 |     std::string months_day_year_day_month[] = {\"\n      |                                                ^\n/tmp/tmpl8uy3rfa.cpp:31:48: error: missing terminating \" character\n/tmp/tmpl8uy3rfa.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpl8uy3rfa.cpp:33:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   33 | int main() {\n      | ^~~\n/tmp/tmpl8uy3rfa.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpl8uy3rfa.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpl8uy3rfa.cpp:51:1: warning: control reaches end of non-void function [-Wreturn-type]\n   51 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpit3zcf24: /tmp/tmpit3zcf24.cpp:38: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month == \"00\" || month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day == \"00\" || day == \"01\" || day == \"02\" || day == \"03\" || day == \"04\" || day == \"05\" || day == \"06\" || day == \"07\" || day == \"08\" || day == \"09\" || day == \"10\" || day == \"11\" || day == \"12\" || day == \"13\" || day == \"14\" || day == \"15\" || day == \"16\" || day == \"17\" || day == \"18\" || day == \"19\" || day == \"20\" || day == \"21\" || day == \"22\" || day == \"23\" || day == \"24\" || day == \"25\" || day == \"26\" || day == \"27\" || day == \"28\" || day == \"29\" || day == \"30\" || day == \"31\") {\n            if (year.size() == 4) {\n                if (year[0] == '0') {\n                    if (year[1] == '0') {\n                        if (year[2] == '0') {\n                            if (year[3] == '0') {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpz9hhux32: /tmp/tmpz9hhux32.cpp:44: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 1900 || year > 2100) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) {\n        return false;\n    }\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") {\n            return false;\n        }\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") {\n            return false;\n        }\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") {\n            return false;\n        }\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") {\n            return false;\n        }\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    if (month == \"01\" || month == \"02\" || month == \"03\"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmpdmdec77e.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpdmdec77e.cpp:60:56: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   60 |     if (month == \"01\" || month == \"02\" || month == \"03\"\n      |        ~                                               ^\n      |                                                        )\n   61 | }\n      | ~                                                       \n/tmp/tmpdmdec77e.cpp:61:1: error: expected primary-expression before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpdmdec77e.cpp:61:1: warning: control reaches end of non-void function [-Wreturn-type]\n   61 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty())\n        return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day.empty() || day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\")\n            return false;\n    } else\n        return false;\n    if (month < \"01\" || month > \"12\")\n        return false;\n    if (day.empty() || day < \"01\" || day > \"31\")\n        return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day.empty() || day < \"01\" || day > \"31\")\n            return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day.empty() || day < \"01\" || day > \"30\")\n            return false;\n    } else if (month == \"02\") {\n        if (day.empty() || day < \"01\" || day > \"29\")\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmpkgi6a9zg.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpkgi6a9zg.cpp:51:1: error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmpkgi6a9zg.cpp:52:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   52 | int main() {\n      |            ^\n/tmp/tmpkgi6a9zg.cpp:70:1: error: expected \u2018}\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmpkgi6a9zg.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpkgi6a9zg.cpp:70:1: warning: control reaches end of non-void function [-Wreturn-type]\n   70 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvor10rcu.cpp:42:120: warning: missing terminating \" character\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |                                                                                                                        ^\n/tmp/tmpvor10rcu.cpp:42:120: error: missing terminating \" character\n/tmp/tmpvor10rcu.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:42:119: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   42 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"\n      |        ~                                                                                                              ^\n      |                                                                                                                       )\n   43 | }\n      | ~                                                                                                                      \n/tmp/tmpvor10rcu.cpp:43:1: error: expected primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpvor10rcu.cpp:43:1: warning: control reaches end of non-void function [-Wreturn-type]\n   43 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::string days[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months2[] = {\"4\", \"6\", \"9\", \"11\"};\n    std::string days2[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months3[] = {\"2\"};\n    std::string days3[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months4[] = {\"2\"};\n    std::string days4[] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months5[] = {\"2\"};\n    std::string days5[] = {\"1\", \"2\", \"3\", \"4\",\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmpyfweso1j.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpyfweso1j.cpp:33:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   33 | int main() {\n      | ^~~\n/tmp/tmpyfweso1j.cpp:51:1: error: expected \u2018}\u2019 at end of input\n   51 | }\n      | ^\n/tmp/tmpyfweso1j.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpyfweso1j.cpp:51:1: warning: control reaches end of non-void function [-Wreturn-type]\n   51 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month, day, year;\n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp_m3cchdq: /tmp/tmp_m3cchdq.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string months_lower[] = {\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"};\n    std::string months_upper[] = {\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"};\n    std::string months_numeric[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string months_numeric_lower[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string months_numeric_upper[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string days_lower[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmpobz7piqn.cpp:29:207: warning: missing terminating \" character\n   29 |     std::string days_lower[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\n      |                                                                                                                                                                                                               ^\n/tmp/tmpobz7piqn.cpp:29:207: error: missing terminating \" character\n   29 |     std::string days_lower[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\n      |                                                                                                                                                                                                               ^~~\n/tmp/tmpobz7piqn.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpobz7piqn.cpp:31:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   31 | int main() {\n      | ^~~\n/tmp/tmpobz7piqn.cpp:49:1: error: expected \u2018}\u2019 at end of input\n   49 | }\n      | ^\n/tmp/tmpobz7piqn.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpobz7piqn.cpp:49:1: warning: control reaches end of non-void function [-Wreturn-type]\n   49 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) {\n        return false;\n    }\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") {\n            return false;\n        }\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") {\n            return false;\n        }\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") {\n            return false;\n        }\n    }\n    if (month < \"01\" || month > \"12\") {\n        return false;\n    }\n    if (day < \"01\" || day > \"31\") {\n        return false;\n    }\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") {\n            return false;\n        }\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\") {\n        \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmp4w9jruqq.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp4w9jruqq.cpp:56:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   56 | int main() {\n      |            ^\n/tmp/tmp4w9jruqq.cpp:74:1: error: expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmp4w9jruqq.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp4w9jruqq.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n   74 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.size() > 2 || day.size() > 2 || year.size() > 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmpb8i5me09: /tmp/tmpb8i5me09.cpp:50: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    int i = 0;\n    for (i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            if (month == 0) {\n                month = i;\n            } else if (day == 0) {\n                day = i;\n            } else if (year == 0) {\n                year = i;\n            }\n        }\n    }\n    if (month == 0 || day == 0 || year == 0)\n        return false;\n    if (month > 12 || month < 1)\n        return false;\n    if (day > 31 || day < 1)\n        return false;\n    if (month == 2 && day > 29)\n        return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day > 30)\n            return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 29)\n            return false;\n    }\n    if (month == 2) {\n        if (day > 28)\n            return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day > 31)\n            return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n            return false;\n    }\n    if (month == 2) {\n        if (day > 29)\n            return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day > 31)\n            return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30)\n            return false;\n    }\n    if (\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmpiwyfk3fq.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpiwyfk3fq.cpp:79:1: error: expected primary-expression before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmpiwyfk3fq.cpp:78:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   78 |     if (\n      |        ~^\n      |         )\n   79 | }\n      | ~        \n/tmp/tmpiwyfk3fq.cpp:79:1: error: expected primary-expression before \u2018}\u2019 token\n   79 | }\n      | ^\n/tmp/tmpiwyfk3fq.cpp:79:1: warning: control reaches end of non-void function [-Wreturn-type]\n   79 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmprv4bn6ww: /tmp/tmprv4bn6ww.cpp:40: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmpegqiqx0y.cpp:40:19: warning: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^\n/tmp/tmpegqiqx0y.cpp:40:19: error: missing terminating \" character\n   40 |         if (day < \"01\n      |                   ^~~\n/tmp/tmpegqiqx0y.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:40:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   40 |         if (day < \"01\n      |            ~     ^\n      |                  )\n   41 | }\n      | ~                 \n/tmp/tmpegqiqx0y.cpp:41:1: error: expected primary-expression before \u2018}\u2019 token\n   41 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:42:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   42 | int main() {\n      |            ^\n/tmp/tmpegqiqx0y.cpp:60:1: error: expected \u2018}\u2019 at end of input\n   60 | }\n      | ^\n/tmp/tmpegqiqx0y.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpegqiqx0y.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    if (date.length() != 10) return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string yyyy[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_str = date.substr(0, 3);\n    std::string days_str = date.substr(4, 2);\n    std::string yyyy_str = date.substr(6, 4);\n    if (std::find(std::begin(months), std::end(months), months_str) == std::end(months)) return false;\n    if (std::find(std::begin(days), std::end(days), days_str) == std::end(days)) return false;\n    if (std::find(std::begin(yyyy), std::end(yyyy), yyyy_str) == std::end(yyyy)) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "tmp4dt_7x6f: /tmp/tmp4dt_7x6f.cpp:35: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    if (date.size() < 10)\n        return false;\n    if (date[2] != '-')\n        return false;\n    if (date[5] != '-')\n        return false;\n    if (date[8] != '-')\n        return false;\n    if (date[0] < '0' || date[0] > '9')\n        return false;\n    if (date[1] < '0' || date[1] > '9')\n        return false;\n    if (date[3] < '0' || date[3] > '9')\n        return false;\n    if (date[4] < '0' || date[4] > '9')\n        return false;\n    if (date[6] < '0' || date[6] > '9')\n        return false;\n    if (date[7] < '0' || date[7] > '9')\n        return false;\n    if (date[9] < '0' || date[9] > '9')\n        return false;\n    if (date[10] < '0' || date[10] > '9')\n        return false;\n    if (date[11] < '0' || date[11] > '9')\n        return false;\n    if (date[12] != '-')\n        return false;\n    if (date[14] != '-')\n        return false;\n    if (date[16] != '-')\n        return false;\n    if (date[19] != '-')\n        return false;\n    if (date[21] != '-')\n        return false;\n    if (date[23] != '-')\n        return false;\n    if (date[25] != '-')\n        return false;\n    if (date[27] != '-')\n        return false;\n    if (date[30] != '-')\n        return false;\n    if (date[32] != '-')\n        return false;\n    if (date[34] != '-')\n        return false;\n    if (date[36] != '-')\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmpdpbbu2ju.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpdpbbu2ju.cpp:72:1: error: expected primary-expression before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpdpbbu2ju.cpp:72:1: warning: control reaches end of non-void function [-Wreturn-type]\n   72 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01\", \"02-01\", \"03-01\", \"04-01\", \"05-01\", \"06-01\", \"07-01\", \"08-01\", \"09-01\", \"10-01\", \"11-01\", \"12-01\", \"01-02\", \"02-02\", \"03-02\", \"04-02\", \"05-02\", \"06-02\", \"07-02\", \"08-02\", \"09-02\", \"10-02\", \"11-02\", \"12-02\", \"01-03\", \"02-03\", \"03-03\", \"04-03\", \"05-03\", \"06-03\", \"07-03\", \"08-03\", \"09-03\", \"10-03\", \"11-03\", \"12-03\", \"01-04\", \"02-04\", \"03-04\", \"04-04\", \"05-04\", \"06-\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293107,
      "stdout": "",
      "stderr": "/tmp/tmp_93xly_f.cpp:25:402: warning: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\", \"02-01\", \"03-01\", \"04-01\", \"05-01\", \"06-01\", \"07-01\", \"08-01\", \"09-01\", \"10-01\", \"11-01\", \"12-01\", \"01-02\", \"02-02\", \"03-02\", \"04-02\", \"05-02\", \"06-02\", \"07-02\", \"08-02\", \"09-02\", \"10-02\", \"11-02\", \"12-02\", \"01-03\", \"02-03\", \"03-03\", \"04-03\", \"05-03\", \"06-03\", \"07-03\", \"08-03\", \"09-03\", \"10-03\", \"11-03\", \"12-03\", \"01-04\", \"02-04\", \"03-04\", \"04-04\", \"05-04\", \"06-\n      |                                                                                                                                                                                                                                                                                                                                                                                                                  ^\n/tmp/tmp_93xly_f.cpp:25:402: error: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\", \"02-01\", \"03-01\", \"04-01\", \"05-01\", \"06-01\", \"07-01\", \"08-01\", \"09-01\", \"10-01\", \"11-01\", \"12-01\", \"01-02\", \"02-02\", \"03-02\", \"04-02\", \"05-02\", \"06-02\", \"07-02\", \"08-02\", \"09-02\", \"10-02\", \"11-02\", \"12-02\", \"01-03\", \"02-03\", \"03-03\", \"04-03\", \"05-03\", \"06-03\", \"07-03\", \"08-03\", \"09-03\", \"10-03\", \"11-03\", \"12-03\", \"01-04\", \"02-04\", \"03-04\", \"04-04\", \"05-04\", \"06-\n      |                                                                                                                                                                                                                                                                                                                                                                                                                  ^~~~\n/tmp/tmp_93xly_f.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp_93xly_f.cpp:27:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   27 | int main() {\n      | ^~~\n/tmp/tmp_93xly_f.cpp:45:1: error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01-2000\", \"03-11-2000\", \"05-05-2000\", \"07-07-2000\", \"08-08-2000\", \"10-10-2000\", \"12-12-2000\"};\n    std::string days_month[] = {\"01-01-2000\", \"02-01-2000\", \"03-01-2000\", \"04-01-2000\", \"05-01-2000\", \"06-01-2000\", \"07-01-2000\", \"08-01-2000\", \"09-01-2000\", \"10-01-2000\", \"11-01-2000\", \"12-01-2000\", \"01-03-2000\", \"01-05-2000\", \"01-07-2000\", \"01-08-2000\", \"01-10-2000\", \"01-12-2000\"};\n    std::string months_day_year[] = {\"01-01-2000\", \"03\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "/tmp/tmpi0s437ov.cpp:27:52: warning: missing terminating \" character\n   27 |     std::string months_day_year[] = {\"01-01-2000\", \"03\n      |                                                    ^\n/tmp/tmpi0s437ov.cpp:27:52: error: missing terminating \" character\n   27 |     std::string months_day_year[] = {\"01-01-2000\", \"03\n      |                                                    ^~~\n/tmp/tmpi0s437ov.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpi0s437ov.cpp:29:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   29 | int main() {\n      | ^~~\n/tmp/tmpi0s437ov.cpp:47:1: error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpi0s437ov.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpi0s437ov.cpp:47:1: warning: control reaches end of non-void function [-Wreturn-type]\n   47 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string years[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"02-01\",\"03-01\",\"04-01\",\"05-01\",\"06-01\",\"07-01\",\"08-01\",\"09-01\",\"10-01\",\"11-01\",\"12-01\"};\n    std::string months_day_year[] = {\"01-01-2000\",\"02-01-2000\",\"03-01-2000\",\"04-01-2000\",\"05-01-2000\",\"06-01-2000\",\"07-01-2000\",\"08-01-2000\",\"09-01-2000\",\"10-01-2000\",\"11-01-2000\",\"12-01-2000\"};\n    std::string months_day_year_day[] = {\"01-01-2000-01\",\"02-01-2000-01\",\"03-01-2000-01\",\"04-01-2000-01\",\"05-01-2000-01\",\"06-01-2000-01\",\"07-01-2000-01\",\"08-01-2000-01\",\"09-01-2000-01\",\"10-01-2000-01\",\"11-01-2000-01\",\"12-01-2000-01\"};\n    std::string months_day_year_day_year[] = {\"01-01-2000-01-2000\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293105,
      "stdout": "",
      "stderr": "/tmp/tmpk5uxo4_x.cpp:28:47: warning: missing terminating \" character\n   28 |     std::string months_day_year_day_year[] = {\"01-01-2000-01-2000\n      |                                               ^\n/tmp/tmpk5uxo4_x.cpp:28:47: error: missing terminating \" character\n   28 |     std::string months_day_year_day_year[] = {\"01-01-2000-01-2000\n      |                                               ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpk5uxo4_x.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpk5uxo4_x.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmpk5uxo4_x.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmpk5uxo4_x.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmpk5uxo4_x.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) {\n        return false;\n    }\n    std::string months[] = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::string days[] = {\"1\", \"30\", \"29\", \"28\"};\n    std::string months2[] = {\"4\", \"6\", \"9\", \"11\"};\n    std::string days2[] = {\"1\", \"30\", \"29\"};\n    std::string months3[] = {\"2\"};\n    std::string days3[] = {\"1\", \"30\", \"29\"};\n    std::string months4[] = {\"2\"};\n    std::string days4[] = {\"1\"};\n    std::string months5[] = {\"2\"};\n    std::string days5[] = {\"1\"};\n    std::string months6[] = {\"2\"};\n    std::string days6[] = {\"1\"};\n    std::string months7[] = {\"2\"};\n    std::string days7[] = {\"1\"};\n    std::string months8[] = {\"2\"};\n    std::string days8[] = {\"1\"};\n    std::string months9[] = {\"2\"};\n    std::string days9[] = {\"1\"};\n    std::string months10[] = {\"2\"};\n    std::string days10[] = {\"1\"};\n    std::string months11[] = {\"2\"};\n    std::string days11[] = {\"1\"};\n    std::string months12[] = {\"2\"};\n    std::string days12[] = {\"1\"};\n    std::string months13[] = {\"2\"};\n    std::string days13[] = {\"1\"};\n    std::string months14[] = {\"2\"};\n    std::string days14[] = {\"1\"};\n    std::string months15[] = {\"2\"};\n    std::string days15[] = {\"1\"};\n    std::string months16[] = {\"2\"};\n    std::string days16[] = {\"1\"};\n    std::string months17[] = {\"2\"};\n    std::string days17[] = {\"1\"};\n    std::string months18[]\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "/tmp/tmpv4lflkss.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpv4lflkss.cpp:59:1: error: expected initializer before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpv4lflkss.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string years[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293099,
      "stdout": "",
      "stderr": "/tmp/tmpvb6kza34.cpp:25:577: warning: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06\n      |n/tmp/tmpvb6kza34.cpp:25:577: error: missing terminating \" character\n   25 |     std::string months_day[] = {\"01-01\",\"01-02\",\"01-03\",\"01-04\",\"01-05\",\"01-06\",\"01-07\",\"01-08\",\"01-09\",\"01-10\",\"01-11\",\"01-12\",\"02-01\",\"02-02\",\"02-03\",\"02-04\",\"02-05\",\"02-06\",\"02-07\",\"02-08\",\"02-09\",\"02-10\",\"02-11\",\"02-12\",\"03-01\",\"03-02\",\"03-03\",\"03-04\",\"03-05\",\"03-06\",\"03-07\",\"03-08\",\"03-09\",\"03-10\",\"03-11\",\"03-12\",\"04-01\",\"04-02\",\"04-03\",\"04-04\",\"04-05\",\"04-06\",\"04-07\",\"04-08\",\"04-09\",\"04-10\",\"04-11\",\"04-12\",\"05-01\",\"05-02\",\"05-03\",\"05-04\",\"05-05\",\"05-06\",\"05-07\",\"05-08\",\"05-09\",\"05-10\",\"05-11\",\"05-12\",\"06-01\",\"06-02\",\"06-03\",\"06-04\",\"06-05\",\"06-06\",\"06-07\",\"06-08\",\"06\n      |                                                                                                                                             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293108,
      "stdout": "",
      "stderr": "tmp9a6pcl_x: /tmp/tmp9a6pcl_x.cpp:41: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    int month_count = 0, day_count = 0;\n    for (int i = 0; i < date.size(); i++) {\n        if (date[i] == '-') {\n            month_count++;\n            month = month_count;\n        }\n        else if (date[i] >= '0' && date[i] <= '9') {\n            day_count++;\n            day = day_count;\n        }\n        else {\n            year = year + (date[i] - '0') * (month_count + day_count);\n            month_count = 0;\n            day_count = 0;\n        }\n    }\n    if (month_count != 0 || day_count != 0) return false;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp_hf7bpy4: /tmp/tmp_hf7bpy4.cpp:53: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = 0, day = 0, year = 0;\n    std::stringstream ss(date);\n    ss >> month;\n    if (month < 1 || month > 12) return false;\n    ss >> day;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    ss >> year;\n    if (year < 0 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmplaebehfa: /tmp/tmplaebehfa.cpp:41: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    if (month < 1 || month > 12) return false;\n    int day = date[2] - '0';\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    }\n    else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmp66uaaqpu: /tmp/tmp66uaaqpu.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2 && day > 29)\n        return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\n            return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmp1lb2og_e: /tmp/tmp1lb2og_e.cpp:59: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    } else {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day > 31) return false;\n    } else {\n        if (day > 30) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpi6v8515w: /tmp/tmpi6v8515w.cpp:46: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 0 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmpphsgwrmo: /tmp/tmpphsgwrmo.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    std::string months[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string year[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string months_day[] = {\"01-01\", \"02-01\", \"03-01\", \"04-01\", \"05-01\", \"06-01\", \"07-01\", \"08-01\", \"09-01\", \"10-01\", \"11-01\", \"12-01\", \"01-02\", \"02-02\", \"03-02\", \"04-02\", \"05-02\", \"06-02\", \"07-02\", \"08-02\", \"09-02\", \"10-02\", \"11-02\", \"12-02\", \"01-03\", \"02-03\", \"03-03\", \"04-03\", \"05-03\", \"06-03\", \"07-03\", \"08-03\", \"09-03\", \"10-03\", \"11-03\", \"12-03\", \"01-04\", \"02-04\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "/tmp/tmp44me6ei7.cpp:26:375: warning: missing terminating \" character\n   26 |     std::string months_day[] = {\"01-01\", \"02-01\", \"03-01\", \"04-01\", \"05-01\", \"06-01\", \"07-01\", \"08-01\", \"09-01\", \"10-01\", \"11-01\", \"12-01\", \"01-02\", \"02-02\", \"03-02\", \"04-02\", \"05-02\", \"06-02\", \"07-02\", \"08-02\", \"09-02\", \"10-02\", \"11-02\", \"12-02\", \"01-03\", \"02-03\", \"03-03\", \"04-03\", \"05-03\", \"06-03\", \"07-03\", \"08-03\", \"09-03\", \"10-03\", \"11-03\", \"12-03\", \"01-04\", \"02-04\", \"\n      |                                                                                                                                                                                                                                                                                                                                                                                       ^\n/tmp/tmp44me6ei7.cpp:26:375: error: missing terminating \" character\n/tmp/tmp44me6ei7.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp44me6ei7.cpp:28:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   28 | int main() {\n      | ^~~\n/tmp/tmp44me6ei7.cpp:46:1: error: expected \u2018}\u2019 at end of input\n   46 | }\n      | ^\n/tmp/tmp44me6ei7.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmp44me6ei7.cpp:46:1: warning: control reaches end of non-void function [-Wreturn-type]\n   46 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty())\n        return false;\n    if (date.size() != 10)\n        return false;\n    if (date[2] != '-' || date[5] != '-' || date[8] != '-')\n        return false;\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n    if (month < 1 || month > 12)\n        return false;\n    if (day < 1 || day > 31)\n        return false;\n    if (month == 2 && day > 29)\n        return false;\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30)\n            return false;\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29)\n            return false;\n    }\n    if (year < 1900 || year > 2100)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpay2_5t8t: /tmp/tmpay2_5t8t.cpp:50: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"02-01\",\"03-01\",\"04-01\",\"05-01\",\"06-01\",\"07-01\",\"08-01\",\"09-01\",\"10-01\",\"11-01\",\"12-01\"};\n    std::string days_month[] = {\"01-02\",\"02-02\",\"03-02\",\"04-02\",\"05-02\",\"06-02\",\"07-02\",\"08-02\",\"09-02\",\"10-02\",\"11-02\",\"12-02\"};\n    std::string months_day_year[] = {\"01-01-2000\",\"02-01-2000\",\"03-01-2000\",\"04-01-2000\",\"05-01-2000\",\"06-01-2000\",\"07-01-2000\",\"08-01-2000\",\"09-01-2000\",\"10-01-2000\",\"11-01-2000\",\"12-01-2000\"};\n    std::string days_month_year[] = {\"01-02-2000\",\"02-02-2000\",\"03-02-2000\",\"04-02-2000\",\"05-02-2000\",\"06-02-2000\",\"07-02-2000\",\"08-02-2000\",\"09-02-2000\",\"10-02-2000\",\"11-02-2000\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "/tmp/tmps4t7ay7g.cpp:28:168: warning: missing terminating \" character\n   28 |     std::string days_month_year[] = {\"01-02-2000\",\"02-02-2000\",\"03-02-2000\",\"04-02-2000\",\"05-02-2000\",\"06-02-2000\",\"07-02-2000\",\"08-02-2000\",\"09-02-2000\",\"10-02-2000\",\"11-02-2000\n      |                                                                                                                                                                        ^\n/tmp/tmps4t7ay7g.cpp:28:168: error: missing terminating \" character\n   28 |     std::string days_month_year[] = {\"01-02-2000\",\"02-02-2000\",\"03-02-2000\",\"04-02-2000\",\"05-02-2000\",\"06-02-2000\",\"07-02-2000\",\"08-02-2000\",\"09-02-2000\",\"10-02-2000\",\"11-02-2000\n      |                                                                                                                                                                        ^~~~~~~~~~~\n/tmp/tmps4t7ay7g.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmps4t7ay7g.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmps4t7ay7g.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmps4t7ay7g.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmps4t7ay7g.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string yyyy[] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n    std::string mm[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"};\n    std::string dd[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::stringstream ss(date);\n    int month, day, year;\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day >\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "/tmp/tmp212f9yhf.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp212f9yhf.cpp:33:1: error: expected primary-expression before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmp212f9yhf.cpp:32:28: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   32 |     if (month == 2 && day >\n      |        ~                   ^\n      |                            )\n   33 | }\n      | ~                           \n/tmp/tmp212f9yhf.cpp:33:1: error: expected primary-expression before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmp212f9yhf.cpp:33:1: warning: control reaches end of non-void function [-Wreturn-type]\n   33 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\"};\n    std::string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string year[] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"};\n    std::string months_day[] = {\"01-01\",\"02-01\",\"03-01\",\"04-01\",\"05-01\",\"06-01\",\"07-01\",\"08-01\",\"09-01\",\"10-01\",\"11-01\",\"12-01\"};\n    std::string days_month[] = {\"01-02\",\"02-02\",\"03-02\",\"04-02\",\"05-02\",\"06-02\",\"07-02\",\"08-02\",\"09-02\",\"10-02\",\"11-02\",\"12-02\"};\n    std::string months_day_year[] = {\"01-01-2000\",\"02-01-2000\",\"03-01-2000\",\"04-01-2000\",\"05-01-2000\",\"06-01-2000\",\"07-01-2000\",\"08-01-2000\",\"09-01-2000\",\"10-01-2000\",\"11-01-2000\",\"12-01-2000\"};\n    std::string days_month_year[] = {\"01-02-2000\",\"02-02-2000\",\"03-02-2000\",\"04-02-2000\",\"05-02-2000\",\"06-02-2000\",\"07-02-2000\",\"08-02-2000\",\"09-02-2000\",\"10-02-2000\",\"11-02-2000\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "/tmp/tmps4t7ay7g.cpp:28:168: warning: missing terminating \" character\n   28 |     std::string days_month_year[] = {\"01-02-2000\",\"02-02-2000\",\"03-02-2000\",\"04-02-2000\",\"05-02-2000\",\"06-02-2000\",\"07-02-2000\",\"08-02-2000\",\"09-02-2000\",\"10-02-2000\",\"11-02-2000\n      |                                                                                                                                                                        ^\n/tmp/tmps4t7ay7g.cpp:28:168: error: missing terminating \" character\n   28 |     std::string days_month_year[] = {\"01-02-2000\",\"02-02-2000\",\"03-02-2000\",\"04-02-2000\",\"05-02-2000\",\"06-02-2000\",\"07-02-2000\",\"08-02-2000\",\"09-02-2000\",\"10-02-2000\",\"11-02-2000\n      |                                                                                                                                                                        ^~~~~~~~~~~\n/tmp/tmps4t7ay7g.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmps4t7ay7g.cpp:30:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   30 | int main() {\n      | ^~~\n/tmp/tmps4t7ay7g.cpp:48:1: error: expected \u2018}\u2019 at end of input\n   48 | }\n      | ^\n/tmp/tmps4t7ay7g.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmps4t7ay7g.cpp:48:1: warning: control reaches end of non-void function [-Wreturn-type]\n   48 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 0 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293098,
      "stdout": "",
      "stderr": "tmpphsgwrmo: /tmp/tmpphsgwrmo.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    } else {\n        return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "/tmp/tmpwd_67u4b.cpp:44:103: warning: missing terminating \" character\n   44 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"\n      |                                                                                                       ^\n/tmp/tmpwd_67u4b.cpp:44:103: error: missing terminating \" character\n/tmp/tmpwd_67u4b.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpwd_67u4b.cpp:45:1: error: expected primary-expression before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpwd_67u4b.cpp:44:102: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   44 |     if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"\n      |        ~                                                                                             ^\n      |                                                                                                      )\n   45 | }\n      | ~                                                                                                     \n/tmp/tmpwd_67u4b.cpp:45:1: error: expected primary-expression before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpwd_67u4b.cpp:45:1: warning: control reaches end of non-void function [-Wreturn-type]\n   45 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if (day < 1 || day > 29) return false;\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 29) return false;\n    }\n    if (year < 1000 || year > 9999) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpu0v5vlad: /tmp/tmpu0v5vlad.cpp:39: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month.length() > 2 || day.length() > 2 || year.length() > 4) return false;\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"02\" && day > \"29\") return false;\n    if (month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    }\n    else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpbe80fihy: /tmp/tmpbe80fihy.cpp:51: int main(): Assertion `candidate((\"04122003\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    std::string month = date.substr(0, 2);\n    std::string day = date.substr(3, 2);\n    std::string year = date.substr(6, 4);\n    if (month.empty() || day.empty() || year.empty()) return false;\n    if (month == \"01\" || month == \"02\" || month == \"03\" || month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"05\" || month == \"06\" || month == \"07\" || month == \"08\" || month == \"09\" || month == \"10\" || month == \"11\" || month == \"12\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month < \"01\" || month > \"12\") return false;\n    if (day < \"01\" || day > \"31\") return false;\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n        if (day < \"01\" || day > \"31\") return false;\n    } else if (month == \"04\" || month == \"06\" || month == \"09\" || month == \"11\") {\n        if (day < \"01\" || day > \"30\") return false;\n    } else if (month == \"02\") {\n        if (day < \"01\" || day > \"29\") return false;\n    }\n    if (month == \"01\" || month == \"03\" || month == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\") {\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "/tmp/tmppdjnf92v.cpp: In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmppdjnf92v.cpp:45:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   45 | int main() {\n      |            ^\n/tmp/tmppdjnf92v.cpp:63:1: error: expected \u2018}\u2019 at end of input\n   63 | }\n      | ^\n/tmp/tmppdjnf92v.cpp:20:35: note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |                                   ^\n/tmp/tmppdjnf92v.cpp:63:1: warning: control reaches end of non-void function [-Wreturn-type]\n   63 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date('03-11-2000')\n// True\n// >>> valid_date('15-01-2012')\n// False\n// >>> valid_date('04-0-2040')\n// False\n// >>> valid_date('06-04-2020')\n// True\n// >>> valid_date('06/04/2020')\n// False\nbool valid_date(std::string date) {\n    if (date.empty()) return false;\n    int month = date[0] - '0';\n    int day = date[2] - '0';\n    int year = date[4] - '0';\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return false;\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day > 30) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31) return false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 30) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n",
      "timestamp": 1664293109,
      "stdout": "",
      "stderr": "tmpolxsil4n: /tmp/tmpolxsil4n.cpp:41: int main(): Assertion `candidate((\"03-11-2000\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}