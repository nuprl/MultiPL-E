{
  "name": "HumanEval_80_is_happy",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n",
  "tests": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpksbb6s7b: /tmp/tmpksbb6s7b.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmptzdlxgfv: /tmp/tmptzdlxgfv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpu9yr4vom: /tmp/tmpu9yr4vom.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpcicu0q_2: /tmp/tmpcicu0q_2.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpm_aphm0w: /tmp/tmpm_aphm0w.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 1) return false;\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpigyexoub: /tmp/tmpigyexoub.cpp:40: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3)\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmphz5wtj_y: /tmp/tmphz5wtj_y.cpp:37: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpjzxjcef5: /tmp/tmpjzxjcef5.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpxia2brxm: /tmp/tmpxia2brxm.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for(int i = 0; i < s.size(); i++) {\n        if(m.find(s[i]) != m.end()) {\n            if(m[s[i]] == 1) return false;\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpytst9sq3: /tmp/tmpytst9sq3.cpp:40: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size(); i += 3) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n        }\n    }\n    return count == s.size()/3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpsraygi7g: /tmp/tmpsraygi7g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            i += 2;\n        }\n    }\n    return cnt >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp40zx9z7l: /tmp/tmp40zx9z7l.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            if (cnt > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpqp63c5_h: /tmp/tmpqp63c5_h.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            cnt++;\n            if (cnt == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmptbryppiw: /tmp/tmptbryppiw.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int cnt = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            cnt++;\n            if(cnt > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmphm8gz1yt: /tmp/tmphm8gz1yt.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int len = s.size();\n    if (len < 3) return false;\n    int count = 0;\n    for (int i = 0; i < len - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp92na9izp: /tmp/tmp92na9izp.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpie6afz2_: /tmp/tmpie6afz2_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i]-'a']++;\n    }\n    for (int i = 0; i < s.size()-2; i++) {\n        if (count[s[i]-'a'] == count[s[i+1]-'a'] && count[s[i+1]-'a'] == count[s[i+2]-'a']) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmphz547q2i: /tmp/tmphz547q2i.cpp:37: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpoa3pxoxf: /tmp/tmpoa3pxoxf.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpm_aphm0w: /tmp/tmpm_aphm0w.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for(int i = 0; i < n; i += 3) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp9qb2ni87: /tmp/tmp9qb2ni87.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp5v0_73r8: /tmp/tmp5v0_73r8.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (count[i] % 3 != 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp2vz7kezs: /tmp/tmp2vz7kezs.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < n; i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 1) return false;\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpldtsxr9_: /tmp/tmpldtsxr9_.cpp:41: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (auto c : s) {\n        if (m.find(c) != m.end()) {\n            m[c]++;\n        } else {\n            m[c] = 1;\n        }\n    }\n    for (auto c : s) {\n        if (m[c] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpqvakl171: /tmp/tmpqvakl171.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 1) return false;\n            m[s[i]] = 1;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpp3bmrwe4: /tmp/tmpp3bmrwe4.cpp:40: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpie6afz2_: /tmp/tmpie6afz2_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count > 2)\n                return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpdwvnyydb: /tmp/tmpdwvnyydb.cpp:37: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpyjp0azma: /tmp/tmpyjp0azma.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpvujwa6or: /tmp/tmpvujwa6or.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp4_c67220: /tmp/tmp4_c67220.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpcicu0q_2: /tmp/tmpcicu0q_2.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpfuieopod: /tmp/tmpfuieopod.cpp:44: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpqmf6c9ch: /tmp/tmpqmf6c9ch.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == 1 && count[s[i + 1] - 'a'] == 1 && count[s[i + 2] - 'a'] == 1) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpq754z7w1: /tmp/tmpq754z7w1.cpp:38: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    std::unordered_map<char, int> m;\n    for(char c : s) {\n        if(m.find(c) == m.end())\n            m[c] = 1;\n        else\n            m[c]++;\n    }\n    for(auto it = m.begin(); it != m.end(); it++) {\n        if(it->second % 3 != 0)\n            return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp_2ee8w52: /tmp/tmp_2ee8w52.cpp:39: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpk_xnhudj: /tmp/tmpk_xnhudj.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3)\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpcngmrezo: /tmp/tmpcngmrezo.cpp:36: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] != s[i + 1] || s[i] != s[i + 2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp0drgs46y: /tmp/tmp0drgs46y.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp8lw6ibmh: /tmp/tmp8lw6ibmh.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int len = s.size();\n    if (len < 3) return false;\n    int count = 0;\n    for (int i = 0; i < len - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpeh00y88o: /tmp/tmpeh00y88o.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpyyxzabx_: /tmp/tmpyyxzabx_.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp98p8jo8d: /tmp/tmp98p8jo8d.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.count(s[i]) == 0) {\n            m[s[i]] = 1;\n        } else {\n            m[s[i]]++;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp2zv1t9o9: /tmp/tmp2zv1t9o9.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292826,
      "stdout": "",
      "stderr": "tmpwjgz9jjb: /tmp/tmpwjgz9jjb.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i + 1] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpsc31qvco: /tmp/tmpsc31qvco.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int n = s.size();\n    int count[26] = {0};\n    for(int i = 0; i < n; i++) {\n        count[s[i]-'a']++;\n    }\n    for(int i = 0; i < n-2; i++) {\n        if(count[s[i]-'a'] == count[s[i+1]-'a'] && count[s[i+1]-'a'] == count[s[i+2]-'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpy58tk55v: /tmp/tmpy58tk55v.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i]-'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (count[i]%3 != 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpbi214p0_: /tmp/tmpbi214p0_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == 0) return false;\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp9v7ev00g: /tmp/tmp9v7ev00g.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpjzxjcef5: /tmp/tmpjzxjcef5.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3)\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpmwopgknk: /tmp/tmpmwopgknk.cpp:36: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count[26] = {0};\n    for (int i = 0; i < n; i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < n - 2; i++) {\n        if (count[s[i] - 'a'] == 0) return false;\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp3efi1scv: /tmp/tmp3efi1scv.cpp:37: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpfitivqgn: /tmp/tmpfitivqgn.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 1) return false;\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpigyexoub: /tmp/tmpigyexoub.cpp:40: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpxb51fh29: /tmp/tmpxb51fh29.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp4_c67220: /tmp/tmp4_c67220.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpcicu0q_2: /tmp/tmpcicu0q_2.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpx8kf9lmn: /tmp/tmpx8kf9lmn.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (auto c : s) {\n        if (m.count(c) > 0) {\n            m[c]++;\n        } else {\n            m[c] = 1;\n        }\n    }\n    for (auto c : m) {\n        if (c.second % 3 != 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp9g8364qo: /tmp/tmp9g8364qo.cpp:38: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); ++i) {\n        if (m.find(s[i]) == m.end()) {\n            m[s[i]] = 1;\n        } else {\n            m[s[i]]++;\n        }\n    }\n    for (int i = 0; i < s.size(); i += 3) {\n        if (m[s[i]] != 1 || m[s[i + 1]] != 1 || m[s[i + 2]] != 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp4otshjtj: /tmp/tmp4otshjtj.cpp:38: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second % 3 != 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpgavku69p: /tmp/tmpgavku69p.cpp:38: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpjzxjcef5: /tmp/tmpjzxjcef5.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for(int i = 0; i < s.size(); i++) {\n        if(m.find(s[i]) == m.end()) {\n            m[s[i]] = 1;\n        } else {\n            m[s[i]]++;\n        }\n    }\n    for(int i = 0; i < s.size(); i++) {\n        if(m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpe8hy97wp: /tmp/tmpe8hy97wp.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (count[i] % 3 != 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp2vz7kezs: /tmp/tmp2vz7kezs.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpu9yr4vom: /tmp/tmpu9yr4vom.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpksbb6s7b: /tmp/tmpksbb6s7b.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpzccr2i29: /tmp/tmpzccr2i29.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == s[i+1] && s[i] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpfezwt_s_: /tmp/tmpfezwt_s_.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpksbb6s7b: /tmp/tmpksbb6s7b.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp783y56jn: /tmp/tmp783y56jn.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count > 1) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpp75zu89i: /tmp/tmpp75zu89i.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpk_xnhudj: /tmp/tmpk_xnhudj.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n; i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpbwj_rnx7: /tmp/tmpbwj_rnx7.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < n; i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 1) return false;\n            m[s[i]] = 1;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpql8flkua: /tmp/tmpql8flkua.cpp:41: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp4_c67220: /tmp/tmp4_c67220.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpx8kf9lmn: /tmp/tmpx8kf9lmn.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count[26] = {0};\n    for (int i = 0; i < n; i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (count[i] % 3 != 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpgi3bwv68: /tmp/tmpgi3bwv68.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp4j67v8yf: /tmp/tmp4j67v8yf.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp4rv0r7u_: /tmp/tmp4rv0r7u_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if (len < 3) return false;\n    int count = 0;\n    for (int i = 0; i < len - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292828,
      "stdout": "",
      "stderr": "tmp_v_ruaqs: /tmp/tmp_v_ruaqs.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp7ii7x_cw: /tmp/tmp7ii7x_cw.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count[26] = {0};\n    for (int i = 0; i < n; i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < n - 2; i++) {\n        if (count[s[i] - 'a'] == 0) return false;\n        if (count[s[i] - 'a'] == count[s[i+1] - 'a'] && count[s[i] - 'a'] == count[s[i+2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmps0fjefha: /tmp/tmps0fjefha.cpp:37: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmphjy7ye1p: /tmp/tmphjy7ye1p.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpvujwa6or: /tmp/tmpvujwa6or.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpavzk2v_7: /tmp/tmpavzk2v_7.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpvujwa6or: /tmp/tmpvujwa6or.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) == m.end()) {\n            m[s[i]] = 1;\n        } else {\n            m[s[i]]++;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpxt1uxjxk: /tmp/tmpxt1uxjxk.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp4rv0r7u_: /tmp/tmp4rv0r7u_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp5v0_73r8: /tmp/tmp5v0_73r8.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpxb51fh29: /tmp/tmpxb51fh29.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == 0) return false;\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp9v7ev00g: /tmp/tmp9v7ev00g.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == 0) return false;\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp9v7ev00g: /tmp/tmp9v7ev00g.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpxb51fh29: /tmp/tmpxb51fh29.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpx8kf9lmn: /tmp/tmpx8kf9lmn.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp3e95eokv: /tmp/tmp3e95eokv.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpyyxzabx_: /tmp/tmpyyxzabx_.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3)\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpcngmrezo: /tmp/tmpcngmrezo.cpp:36: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp1tab64x9: /tmp/tmp1tab64x9.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] == 3) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpp7xk4qzf: /tmp/tmpp7xk4qzf.cpp:38: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (m[s[i]] == 1 && m[s[i + 1]] == 1 && m[s[i + 2]] == 1) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp36e371ee: /tmp/tmp36e371ee.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpx8kf9lmn: /tmp/tmpx8kf9lmn.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp1sz_yrpo: /tmp/tmp1sz_yrpo.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp_swo7ha4: /tmp/tmp_swo7ha4.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp4rv0r7u_: /tmp/tmp4rv0r7u_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.count(s[i]) > 0) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for (int i = 0; i < s.size(); i++) {\n        if (m[s[i]] > 1) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp261g6jbv: /tmp/tmp261g6jbv.cpp:42: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpie161qcb: /tmp/tmpie161qcb.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp1tab64x9: /tmp/tmp1tab64x9.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpu9yr4vom: /tmp/tmpu9yr4vom.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmp5v0_73r8: /tmp/tmp5v0_73r8.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpxacphhug: /tmp/tmpxacphhug.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp3umh009t: /tmp/tmp3umh009t.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3)\n                return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpcngmrezo: /tmp/tmpcngmrezo.cpp:36: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count[26] = {0};\n    for (int i = 0; i < n; i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < n - 2; i++) {\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i + 1] - 'a'] == count[s[i + 2] - 'a']) {\n            return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp1tbfr020: /tmp/tmp1tbfr020.cpp:38: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpyyxzabx_: /tmp/tmpyyxzabx_.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpu9yr4vom: /tmp/tmpu9yr4vom.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp3umh009t: /tmp/tmp3umh009t.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpm4sksyeg: /tmp/tmpm4sksyeg.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3)\n        return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp8ogf8i1n: /tmp/tmp8ogf8i1n.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            if (cnt >= 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpvbrdkjzj: /tmp/tmpvbrdkjzj.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i += 3) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpwfsn6mly: /tmp/tmpwfsn6mly.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return true;\n        } else {\n            cnt = 0;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmpqj0l2npa: /tmp/tmpqj0l2npa.cpp:36: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int len = s.size();\n    if (len < 3) return false;\n    int count = 0;\n    for (int i = 0; i < len - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp384t0ubg: /tmp/tmp384t0ubg.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for(int i = 0; i < s.size(); i++) {\n        if(m.find(s[i]) != m.end()) {\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    for(int i = 0; i < s.size(); i++) {\n        if(m[s[i]] == 1) {\n            m[s[i]]--;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292830,
      "stdout": "",
      "stderr": "tmpqtjzddfg: /tmp/tmpqtjzddfg.cpp:46: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] != s[i+1] && s[i] != s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmp_dka63m5: /tmp/tmp_dka63m5.cpp:39: int main(): Assertion `candidate((\"iopaxioi\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpie6afz2_: /tmp/tmpie6afz2_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpxia2brxm: /tmp/tmpxia2brxm.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpadawin0k: /tmp/tmpadawin0k.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpljzdvphj: /tmp/tmpljzdvphj.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            cnt++;\n            if (cnt > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpqp63c5_h: /tmp/tmpqp63c5_h.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpiyb8d6fv: /tmp/tmpiyb8d6fv.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmplriyrosi: /tmp/tmplriyrosi.cpp:35: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpqmf6c9ch: /tmp/tmpqmf6c9ch.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 2) return false;\n            m[s[i]]++;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmp5iy_aew8: /tmp/tmp5iy_aew8.cpp:37: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpie6afz2_: /tmp/tmpie6afz2_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count > 2) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpyyxzabx_: /tmp/tmpyyxzabx_.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp2uyloyei: /tmp/tmp2uyloyei.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpk_xnhudj: /tmp/tmpk_xnhudj.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp4rv0r7u_: /tmp/tmp4rv0r7u_.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    std::unordered_map<char, int> m;\n    for (int i = 0; i < s.size(); i++) {\n        if (m.find(s[i]) != m.end()) {\n            if (m[s[i]] == 1) return false;\n            m[s[i]] = 1;\n        } else {\n            m[s[i]] = 1;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpp3bmrwe4: /tmp/tmpp3bmrwe4.cpp:40: int main(): Assertion `candidate((\"iopaxpoi\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmpx8kf9lmn: /tmp/tmpx8kf9lmn.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpljzdvphj: /tmp/tmpljzdvphj.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (cnt == 2) {\n            cnt = 0;\n        }\n        if (s[i] == s[i + 1]) {\n            cnt++;\n        }\n    }\n    return cnt == 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmp3ch9a64g: /tmp/tmp3ch9a64g.cpp:36: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp6p3o7o14: /tmp/tmp6p3o7o14.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if (len < 3) return false;\n    int count = 0;\n    for (int i = 0; i < len - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpjd0ul5jy: /tmp/tmpjd0ul5jy.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int len = s.length();\n    if (len < 3) return false;\n    int count = 0;\n    for (int i = 0; i < len - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpjd0ul5jy: /tmp/tmpjd0ul5jy.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292829,
      "stdout": "",
      "stderr": "tmp3e95eokv: /tmp/tmp3e95eokv.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == s[i+1] && s[i] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpklrch0uq: /tmp/tmpklrch0uq.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpymyud1gf: /tmp/tmpymyud1gf.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3)\n        return false;\n    std::unordered_map<char, int> m;\n    for (auto c : s) {\n        if (m.find(c) == m.end())\n            m[c] = 1;\n        else\n            m[c]++;\n    }\n    for (auto i = 0; i < s.size() - 2; i++) {\n        if (m[s[i]] > 1 && m[s[i + 1]] > 1 && m[s[i + 2]] > 1)\n            return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmp59e2ohhm: /tmp/tmp59e2ohhm.cpp:39: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count[26] = {0};\n    for (int i = 0; i < s.size(); i++) {\n        count[s[i] - 'a']++;\n    }\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (count[s[i] - 'a'] == 0) return false;\n        if (count[s[i] - 'a'] == count[s[i + 1] - 'a'] && count[s[i] - 'a'] == count[s[i + 2] - 'a']) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292827,
      "stdout": "",
      "stderr": "tmp9v7ev00g: /tmp/tmp9v7ev00g.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if(s.size() < 3) return false;\n    int count = 0;\n    for(int i = 0; i < s.size() - 2; i++) {\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if(count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpysgqbt6g: /tmp/tmpysgqbt6g.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpu1eht_dx: /tmp/tmpu1eht_dx.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n            if (cnt == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpnop2i7g6: /tmp/tmpnop2i7g6.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int count = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            i += 2;\n        }\n    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmpcs0k60ze: /tmp/tmpcs0k60ze.cpp:34: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n < 3) return false;\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2]) {\n            count++;\n            if (count == 3) return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpksbb6s7b: /tmp/tmpksbb6s7b.cpp:35: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int n = s.size();\n    int count = 0;\n    for (int i = 0; i < n - 2; i++) {\n        if (s[i] == s[i+1] && s[i+1] == s[i+2]) {\n            count++;\n            if (count == 3) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292831,
      "stdout": "",
      "stderr": "tmps9zzw7gy: /tmp/tmps9zzw7gy.cpp:36: int main(): Assertion `candidate((\"aabb\")) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// False\n// >>> is_happy(aa)\n// False\n// >>> is_happy(abcd)\n// True\n// >>> is_happy(aabb)\n// False\n// >>> is_happy(adb)\n// True\n// >>> is_happy(xyy)\n// False\nbool is_happy(std::string s) {\n    if (s.size() < 3) return false;\n    int cnt = 0;\n    for (int i = 0; i < s.size() - 2; i++) {\n        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2]) {\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n",
      "timestamp": 1664292825,
      "stdout": "",
      "stderr": "tmpqmf6c9ch: /tmp/tmpqmf6c9ch.cpp:33: int main(): Assertion `candidate((\"abcd\")) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}