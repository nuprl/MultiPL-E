{
  "name": "HumanEval_34_unique",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n",
  "tests": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(l[i]);\n            last = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (res.empty() || *res.rbegin() != *i) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); ++i) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(l[i]);\n            last = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(l[i]);\n            last = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.push_back(l[0]);\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i-1])\n            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(l[i]);\n            last = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != last) {\n            res.push_back(last);\n            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); ++i) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it != last) {\n            res.push_back(*it);\n            last = *it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it != last) {\n            res.push_back(*it);\n            last = *it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (i == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(last);\n            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != last) {\n            res.push_back(last);\n            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long prev = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != prev) {\n            res.push_back(l[i]);\n            prev = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1])\n            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(l[i]);\n            last = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); ++i) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (i == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] != last) {\n            res.push_back(l[i]);\n            last = l[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (i == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != last) {\n            res.push_back(last);\n            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long prev = -1;\n    for (auto i : l) {\n        if (i != prev) {\n            res.push_back(i);\n            prev = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != last) {\n            res.push_back(last);\n            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (res.empty() || *res.rbegin() != *i) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); ++i) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.reserve(l.size());\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (u.empty() || *u.rbegin() != *i) {\n            u.push_back(*i);\n        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != last) {\n            res.push_back(last);\n            last = l[i];\n        }\n    }\n    res.push_back(last);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (i == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1])\n            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it != last) {\n            res.push_back(*it);\n            last = *it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it != last) {\n            res.push_back(*it);\n            last = *it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1])\n            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.reserve(l.size());\n    for (auto i = l.begin(); i != l.end(); ++i) {\n        if (u.empty() || *u.rbegin() != *i)\n            u.push_back(*i);\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long prev = -1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it != prev) {\n            res.push_back(*it);\n            prev = *it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (res.empty() || *res.rbegin() != *it)\n            res.push_back(*it);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i-1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (*it != last) {\n            res.push_back(*it);\n            last = *it;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); ++i) {\n        if (i == 0 || l[i] != l[i - 1])\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.reserve(l.size());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293062,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long prev = -1;\n    for (auto i : l) {\n        if (i != prev) {\n            res.push_back(i);\n            prev = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    long last = -1;\n    for (auto i : l) {\n        if (i != last) {\n            res.push_back(i);\n            last = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1])\n            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long> res;\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n",
      "timestamp": 1664293061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}