{
  "name": "HumanEval_151_double_the_difference",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n",
  "tests": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            continue;\n        }\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpqb0ix6ps.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpqb0ix6ps.cpp:20:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   20 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp_bbc0pe4.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp_bbc0pe4.cpp:19:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (lst[i] % 2 == 1)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp2p2r5gxs.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp2p2r5gxs.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            continue;\n        }\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpqb0ix6ps.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpqb0ix6ps.cpp:20:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   20 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp1kweo5d_.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp1kweo5d_.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) sum += lst[i] * lst[i];\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0) {\n            continue;\n        }\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpkggx9q23.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpkggx9q23.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0)\n            continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpb8iss7hg.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpb8iss7hg.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0)\n            continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpb8iss7hg.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpb8iss7hg.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0) {\n            continue;\n        }\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpkggx9q23.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpkggx9q23.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || !std::isfinite(lst[i])) {\n            continue;\n        }\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "tmpvadt00gk: /tmp/tmpvadt00gk.cpp:27: int main(): Assertion `candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp_bbc0pe4.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp_bbc0pe4.cpp:19:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (lst[i] % 2 == 1)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0)\n            continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpb8iss7hg.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpb8iss7hg.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp2p2r5gxs.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp2p2r5gxs.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            continue;\n        }\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpqb0ix6ps.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpqb0ix6ps.cpp:20:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   20 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            continue;\n        }\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpqb0ix6ps.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpqb0ix6ps.cpp:20:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   20 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp2p2r5gxs.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp2p2r5gxs.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || !std::isfinite(lst[i]))\n            continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292461,
      "stdout": "",
      "stderr": "tmpht_cudhs: /tmp/tmpht_cudhs.cpp:26: int main(): Assertion `candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) {\n            continue;\n        }\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpqb0ix6ps.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpqb0ix6ps.cpp:20:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   20 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0)\n            continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpb8iss7hg.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpb8iss7hg.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0)\n            continue;\n        if (lst[i] % 2 == 1)\n            sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp_bbc0pe4.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp_bbc0pe4.cpp:19:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (lst[i] % 2 == 1)\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp2p2r5gxs.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp2p2r5gxs.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] < 0 || lst[i] % 1 != 0) continue;\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 || !std::is_integral(lst[i])) {\n            continue;\n        }\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpjt9t4tmq.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpjt9t4tmq.cpp:17:51: error: class template argument deduction failed:\n   17 |         if (lst[i] < 0 || !std::is_integral(lst[i])) {\n      |                                                   ^\n/tmp/tmpjt9t4tmq.cpp:17:51: error: no matching function for call to \u2018is_integral(__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type&)\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/move.h:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:59,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpjt9t4tmq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/type_traits:324:12: note: candidate: \u2018template<class _Tp> is_integral(std::is_integral<_Tp>)-> std::is_integral<_Tp>\u2019\n  324 |     struct is_integral\n      |            ^~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/type_traits:324:12: note:   template argument deduction/substitution failed:\n/tmp/tmpjt9t4tmq.cpp:17:51: note:   mismatched types \u2018std::is_integral<_Tp>\u2019 and \u2018float\u2019\n   17 |         if (lst[i] < 0 || !std::is_integral(lst[i])) {\n      |                                                   ^\n/tmp/tmpjt9t4tmq.cpp:20:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   20 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0) continue;\n        if (lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmp97_shwqf.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmp97_shwqf.cpp:18:20: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpdl_l8hhk.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpdl_l8hhk.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) sum += i * i;\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0)\n            continue;\n        if (i % 2 == 1)\n            sum += i * i;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpejhla9j1.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpejhla9j1.cpp:19:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   19 |         if (i % 2 == 1)\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] % 2 == 1) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmpxbx5ddnm.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmpxbx5ddnm.cpp:17:34: error: invalid operands of types \u2018__gnu_cxx::__alloc_traits<std::allocator<float>, float>::value_type\u2019 {aka \u2018float\u2019} and \u2018int\u2019 to binary \u2018operator%\u2019\n   17 |         if (lst[i] > 0 && lst[i] % 2 == 1) {\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0  \n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n    long double sum = 0;\n    for (auto i : lst) {\n        if (i < 0) continue;\n        if (i % 2 == 1) {\n            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0, (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2, (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0, (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0, (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n",
      "timestamp": 1664292460,
      "stdout": "",
      "stderr": "/tmp/tmphkuphsga.cpp: In function \u2018long int double_the_difference(std::vector<float>)\u2019:\n/tmp/tmphkuphsga.cpp:18:15: error: invalid operands of types \u2018float\u2019 and \u2018int\u2019 to binary \u2018operator%\u2019\n   18 |         if (i % 2 == 1) {\n      |             ~ ^ ~\n      |             |   |\n      |             |   int\n      |             float\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}