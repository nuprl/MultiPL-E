{
  "name": "HumanEval_91_is_bored",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n",
  "tests": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp236v8ar_: /tmp/tmp236v8ar_.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpp0i1teyw: /tmp/tmpp0i1teyw.cpp:28: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    std::string::iterator it_start = it;\n    while (it != it_end) {\n        if (*it == 'I') {\n            it_start = it;\n            break;\n        }\n        it++;\n    }\n    if (it_start == it_end) {\n        return 0;\n    }\n    it = it_start;\n    while (it != it_end) {\n        if (*it == '.' || *it == '?' || *it == '!') {\n            it++;\n            continue;\n        }\n        if (*it == 'I') {\n            return 1;\n        }\n        it++;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp8w9qam4d: /tmp/tmp8w9qam4d.cpp:41: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmprbsx5aon: /tmp/tmprbsx5aon.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp9hzz52uy: /tmp/tmp9hzz52uy.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpda95erpr: /tmp/tmpda95erpr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpqxid1o5z: /tmp/tmpqxid1o5z.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i > 0 && S[i-1] == '.') continue;\n            if (i > 0 && S[i-1] == '?') continue;\n            if (i > 0 && S[i-1] == '!') continue;\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpf3uajq7z: /tmp/tmpf3uajq7z.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpuvjr5v67: /tmp/tmpuvjr5v67.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i > 0 && S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp7pn9iumi: /tmp/tmp7pn9iumi.cpp:25: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::size_type i = 0, j = 0;\n    while (i < S.size()) {\n        if (S[i] == 'I') {\n            j = i + 1;\n            while (j < S.size() && S[j] != '.' && S[j] != '?' && S[j] != '!')\n                j++;\n            if (j - i >= 3) return j - i;\n        }\n        i++;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_h5xf9v7: /tmp/tmp_h5xf9v7.cpp:27: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpz6rxb9lr: /tmp/tmpz6rxb9lr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpda95erpr: /tmp/tmpda95erpr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it2 = S.begin();\n    std::string::iterator it3 = S.begin();\n    std::string::iterator it4 = S.begin();\n    std::string::iterator it5 = S.begin();\n    std::string::iterator it6 = S.begin();\n    std::string::iterator it7 = S.begin();\n    std::string::iterator it8 = S.begin();\n    std::string::iterator it9 = S.begin();\n    std::string::iterator it10 = S.begin();\n    std::string::iterator it11 = S.begin();\n    std::string::iterator it12 = S.begin();\n    std::string::iterator it13 = S.begin();\n    std::string::iterator it14 = S.begin();\n    std::string::iterator it15 = S.begin();\n    std::string::iterator it16 = S.begin();\n    std::string::iterator it17 = S.begin();\n    std::string::iterator it18 = S.begin();\n    std::string::iterator it19 = S.begin();\n    std::string::iterator it20 = S.begin();\n    std::string::iterator it21 = S.begin();\n    std::string::iterator it22 = S.begin();\n    std::string::iterator it23 = S.begin();\n    std::string::iterator it24 = S.begin();\n    std::string::iterator it25 = S.begin();\n    std::string::iterator it26 = S.begin();\n    std::string::iterator it27 = S.begin();\n    std::string::iterator it28 = S.begin();\n    std::string::iterator it29 = S.begin();\n    std::string::iterator it30 = S.begin();\n    std::string::iterator it31 = S.begin();\n    std::string::iterator it32 = S.begin();\n    std::string::iterator it33 = S.begin();\n    std::string::iterator it34 = S.begin();\n    std::string::iterator it35 = S.begin();\n    std::string::iterator it36 = S.begin();\n    std::string::iterator it37 =\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "/tmp/tmpoogc9y64.cpp: In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpoogc9y64.cpp:49:1: error: expected primary-expression before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpoogc9y64.cpp:49:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpoogc9y64.cpp:49:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n                ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpskhzodd2: /tmp/tmpskhzodd2.cpp:24: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_mozm5_2: /tmp/tmp_mozm5_2.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    std::string::iterator it_begin = S.begin();\n    std::string::iterator it_begin_end = S.begin();\n    std::string::iterator it_end_begin = S.end();\n    std::string::iterator it_end_end = S.end();\n    std::string::iterator it_begin_end_begin = S.begin();\n    std::string::iterator it_end_begin_end = S.end();\n    std::string::iterator it_end_end_begin = S.end();\n    std::string::iterator it_end_end_end = S.end();\n    std::string::iterator it_end_end_end_begin = S.end();\n    std::string::iterator it_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_begin = S.end();\n    std::string::iterator it_end_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_end_begin = S.end();\n    std::string::iterator it_end_end_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_end_end_begin = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end_begin = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end_end_begin = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end_end_end = S.end();\n    std::string::iterator it_end_end_end_end_end_end_end_end_end_begin = S.\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "/tmp/tmpzi6_mg3k.cpp: In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpzi6_mg3k.cpp:35:1: error: expected unqualified-id before \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmpzi6_mg3k.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpzi6_mg3k.cpp:35:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpykym188v: /tmp/tmpykym188v.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            S = S.substr(i + 1);\n            i = -1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpp3xdvnz6: /tmp/tmpp3xdvnz6.cpp:27: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpx2aqp8io: /tmp/tmpx2aqp8io.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n            if (i + 1 < S.size() && S[i + 1] == '.') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpuk563bwr: /tmp/tmpuk563bwr.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n        }\n        if (*it == '.' || *it == '?' || *it == '!') {\n            it = S.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpm4exkp13: /tmp/tmpm4exkp13.cpp:27: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            S = S.substr(i + 1);\n            i = -1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpp3xdvnz6: /tmp/tmpp3xdvnz6.cpp:27: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp9byopevt: /tmp/tmp9byopevt.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            i = S.size() - 1;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpyofqniis: /tmp/tmpyofqniis.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n            if (i + 1 < S.size() && S[i + 1] == '.') {\n                i += 2;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpd5lmgm1z: /tmp/tmpd5lmgm1z.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            S = S.substr(i);\n            break;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpm05zgjg5: /tmp/tmpm05zgjg5.cpp:27: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp9byopevt: /tmp/tmp9byopevt.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n            if (i + 1 < S.size() && S[i + 1] == '.') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpuk563bwr: /tmp/tmpuk563bwr.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i > 0 && S[i - 1] != '.' && S[i - 1] != '?' && S[i - 1] != '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp_m7qa24q: /tmp/tmp_m7qa24q.cpp:27: int main(): Assertion `candidate((\"bIt\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp6u_hozf1: /tmp/tmp6u_hozf1.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto it = S.begin(); it != S.end(); ++it) {\n        if(*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpiykwwuv7: /tmp/tmpiykwwuv7.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); it++) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpgmzagjt5: /tmp/tmpgmzagjt5.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n        }\n        it++;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpxebmvg1z: /tmp/tmpxebmvg1z.cpp:23: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto c : S) {\n        if(c == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpmhudq8kv: /tmp/tmpmhudq8kv.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.size(); ++i) {\n        if(S[i] == 'I') {\n            if(i > 0 && S[i-1] == '.') {\n                count++;\n            }\n            if(i > 0 && S[i-1] == '?') {\n                count++;\n            }\n            if(i > 0 && S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmplq_dowcs: /tmp/tmplq_dowcs.cpp:32: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n            if (i + 1 < S.size() && S[i + 1] == ' ') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpo3jig4k4: /tmp/tmpo3jig4k4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it2 = S.begin();\n    std::string::iterator it3 = S.begin();\n    std::string::iterator it4 = S.begin();\n    std::string::iterator it5 = S.begin();\n    std::string::iterator it6 = S.begin();\n    std::string::iterator it7 = S.begin();\n    std::string::iterator it8 = S.begin();\n    std::string::iterator it9 = S.begin();\n    std::string::iterator it10 = S.begin();\n    std::string::iterator it11 = S.begin();\n    std::string::iterator it12 = S.begin();\n    std::string::iterator it13 = S.begin();\n    std::string::iterator it14 = S.begin();\n    std::string::iterator it15 = S.begin();\n    std::string::iterator it16 = S.begin();\n    std::string::iterator it17 = S.begin();\n    std::string::iterator it18 = S.begin();\n    std::string::iterator it19 = S.begin();\n    std::string::iterator it20 = S.begin();\n    std::string::iterator it21 = S.begin();\n    std::string::iterator it22 = S.begin();\n    std::string::iterator it23 = S.begin();\n    std::string::iterator it24 = S.begin();\n    std::string::iterator it25 = S.begin();\n    std::string::iterator it26 = S.begin();\n    std::string::iterator it27 = S.begin();\n    std::string::iterator it28 = S.begin();\n    std::string::iterator it29 = S.begin();\n    std::string::iterator it30 = S.begin();\n    std::string::iterator it31 = S.begin();\n    std::string::iterator it32 = S.begin();\n    std::string::iterator it33 = S.begin();\n    std::string::iterator it34 = S.begin();\n    std::string::iterator it35 = S.begin();\n    std::string::iterator it36 = S.begin();\n    std::string::iterator it37 =\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "/tmp/tmpoogc9y64.cpp: In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpoogc9y64.cpp:49:1: error: expected primary-expression before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpoogc9y64.cpp:49:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpoogc9y64.cpp:49:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpp0i1teyw: /tmp/tmpp0i1teyw.cpp:28: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpsi2espy8: /tmp/tmpsi2espy8.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        ++it;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpv3_siehh: /tmp/tmpv3_siehh.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpqxid1o5z: /tmp/tmpqxid1o5z.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n            break;\n        }\n        ++it;\n    }\n    return it == S.end();\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "tmp9g4462m5: /tmp/tmp9g4462m5.cpp:23: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpsi2espy8: /tmp/tmpsi2espy8.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::size_type i = 0;\n    while (i < S.size() && S[i] != '.' && S[i] != '?' && S[i] != '!')\n        i++;\n    return i == S.size();\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "tmpz5u0z6e3: /tmp/tmpz5u0z6e3.cpp:19: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpz6rxb9lr: /tmp/tmpz6rxb9lr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpuvjr5v67: /tmp/tmpuvjr5v67.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpsi2espy8: /tmp/tmpsi2espy8.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp236v8ar_: /tmp/tmp236v8ar_.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            ++count;\n            ++it;\n        } else {\n            ++it;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "tmpyh0wt6yt: /tmp/tmpyh0wt6yt.cpp:28: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp6u_hozf1: /tmp/tmp6u_hozf1.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpsi2espy8: /tmp/tmpsi2espy8.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpda95erpr: /tmp/tmpda95erpr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i + 1 < S.size() && S[i + 1] == ' ') {\n                ++count;\n                i += 2;\n            } else {\n                i += 1;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293046,
      "stdout": "",
      "stderr": "tmp2v7dzavb: /tmp/tmp2v7dzavb.cpp:32: int main(): Assertion `candidate((\"You and I are going for a walk\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto it = S.begin(); it != S.end(); ++it) {\n        if(*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpiykwwuv7: /tmp/tmpiykwwuv7.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!')\n                count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpu4qijxjh: /tmp/tmpu4qijxjh.cpp:24: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp9byopevt: /tmp/tmp9byopevt.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmprbsx5aon: /tmp/tmprbsx5aon.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmp3_zr1pir: /tmp/tmp3_zr1pir.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n        }\n        if (*it == '.' || *it == '?' || *it == '!') {\n            it++;\n            continue;\n        }\n        if (*it == ' ') {\n            it++;\n            continue;\n        }\n        return 1;\n    }\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpoaxupq52: /tmp/tmpoaxupq52.cpp:31: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpuvjr5v67: /tmp/tmpuvjr5v67.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp236v8ar_: /tmp/tmp236v8ar_.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpuvjr5v67: /tmp/tmpuvjr5v67.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpqxid1o5z: /tmp/tmpqxid1o5z.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); it++) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpgmzagjt5: /tmp/tmpgmzagjt5.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpp0i1teyw: /tmp/tmpp0i1teyw.cpp:28: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_mozm5_2: /tmp/tmp_mozm5_2.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpda95erpr: /tmp/tmpda95erpr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it2 = S.begin();\n    std::string::iterator it3 = S.begin();\n    std::string::iterator it4 = S.begin();\n    std::string::iterator it5 = S.begin();\n    std::string::iterator it6 = S.begin();\n    std::string::iterator it7 = S.begin();\n    std::string::iterator it8 = S.begin();\n    std::string::iterator it9 = S.begin();\n    std::string::iterator it10 = S.begin();\n    std::string::iterator it11 = S.begin();\n    std::string::iterator it12 = S.begin();\n    std::string::iterator it13 = S.begin();\n    std::string::iterator it14 = S.begin();\n    std::string::iterator it15 = S.begin();\n    std::string::iterator it16 = S.begin();\n    std::string::iterator it17 = S.begin();\n    std::string::iterator it18 = S.begin();\n    std::string::iterator it19 = S.begin();\n    std::string::iterator it20 = S.begin();\n    std::string::iterator it21 = S.begin();\n    std::string::iterator it22 = S.begin();\n    std::string::iterator it23 = S.begin();\n    std::string::iterator it24 = S.begin();\n    std::string::iterator it25 = S.begin();\n    std::string::iterator it26 = S.begin();\n    std::string::iterator it27 = S.begin();\n    std::string::iterator it28 = S.begin();\n    std::string::iterator it29 = S.begin();\n    std::string::iterator it30 = S.begin();\n    std::string::iterator it31 = S.begin();\n    std::string::iterator it32 = S.begin();\n    std::string::iterator it33 = S.begin();\n    std::string::iterator it34 = S.begin();\n    std::string::iterator it35 = S.begin();\n    std::string::iterator it36 = S.begin();\n    std::string::iterator it37 =\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "/tmp/tmpoogc9y64.cpp: In function \u2018long int is_bored(std::string)\u2019:\n/tmp/tmpoogc9y64.cpp:49:1: error: expected primary-expression before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpoogc9y64.cpp:49:1: error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpoogc9y64.cpp:49:1: warning: no return statement in function returning non-void [-Wreturn-type]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.length(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpry4s9dkz: /tmp/tmpry4s9dkz.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmprkcrfkd4: /tmp/tmprkcrfkd4.cpp:27: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n        }\n        if (*it == '.' || *it == '?' || *it == '!') {\n            it = S.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpm4exkp13: /tmp/tmpm4exkp13.cpp:27: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpvbuynnpp: /tmp/tmpvbuynnpp.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpda95erpr: /tmp/tmpda95erpr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?' || S[i - 1] == '!') {\n                ++count;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpvbuynnpp: /tmp/tmpvbuynnpp.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::size_type i = 0;\n    while (i < S.size() && S[i] != '.' && S[i] != '?' && S[i] != '!')\n        ++i;\n    if (i < S.size())\n        return S.substr(i).find(\"I\") == 0;\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmp2oc_j34f: /tmp/tmp2oc_j34f.cpp:23: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp9byopevt: /tmp/tmp9byopevt.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i == 0 || S[i-1] == '.' || S[i-1] == '?' || S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpjbhxi1hr: /tmp/tmpjbhxi1hr.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    while (it != S.end()) {\n        if (*it == 'I') {\n            return 0;\n        }\n        if (*it == '.' || *it == '?' || *it == '!') {\n            it = S.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return 1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpm4exkp13: /tmp/tmpm4exkp13.cpp:27: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpwuxkvzt4: /tmp/tmpwuxkvzt4.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp236v8ar_: /tmp/tmp236v8ar_.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            if (i > 0 && S[i-1] == '.') {\n                count++;\n            }\n            if (i > 0 && S[i-1] == '?') {\n                count++;\n            }\n            if (i > 0 && S[i-1] == '!') {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpbxrfinnt: /tmp/tmpbxrfinnt.cpp:32: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        ++it;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmpv3_siehh: /tmp/tmpv3_siehh.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpp0i1teyw: /tmp/tmpp0i1teyw.cpp:28: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            ++count;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            count = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp68mgd592: /tmp/tmp68mgd592.cpp:27: int main(): Assertion `candidate((\"I love It !\")) == (1)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it2 = S.begin();\n    while (it2 != S.end()) {\n        if (*it2 == 'I') {\n            it = it2;\n            break;\n        }\n        it2++;\n    }\n    if (it == S.end()) return 0;\n    it2 = it;\n    while (it2 != S.end()) {\n        if (*it2 == '.' || *it2 == '?' || *it2 == '!') {\n            it2++;\n            continue;\n        }\n        it2++;\n        break;\n    }\n    return it2 - it;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293047,
      "stdout": "",
      "stderr": "tmpnka_rj00: /tmp/tmpnka_rj00.cpp:35: int main(): Assertion `candidate((\"Hello world\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpuvjr5v67: /tmp/tmpuvjr5v67.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n            it++;\n        } else {\n            it++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmpp0i1teyw: /tmp/tmpp0i1teyw.cpp:28: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    std::string::iterator it_end = S.end();\n    long count = 0;\n    while (it != it_end) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmp_fdgdzv4: /tmp/tmp_fdgdzv4.cpp:26: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); ++i) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp6pdsgi3l: /tmp/tmp6pdsgi3l.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto it = S.begin(); it != S.end(); ++it) {\n        if (*it == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp908ordo2: /tmp/tmp908ordo2.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for(auto i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293044,
      "stdout": "",
      "stderr": "tmp236v8ar_: /tmp/tmp236v8ar_.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    std::string::iterator it = S.begin();\n    long count = 0;\n    while (it != S.end()) {\n        if (*it == 'I') {\n            count++;\n        }\n        it++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293045,
      "stdout": "",
      "stderr": "tmp6u_hozf1: /tmp/tmp6u_hozf1.cpp:25: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nlong is_bored(std::string S) {\n    long count = 0;\n    for (auto i = 0; i < S.size(); i++) {\n        if (S[i] == 'I') {\n            count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n",
      "timestamp": 1664293043,
      "stdout": "",
      "stderr": "tmpryxmava3: /tmp/tmpryxmava3.cpp:23: int main(): Assertion `candidate((\"Is the sky blue?\")) == (0)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}