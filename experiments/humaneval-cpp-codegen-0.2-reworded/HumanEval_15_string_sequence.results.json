{
  "name": "HumanEval_15_string_sequence",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n",
  "tests": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n        if (i < n) {\n            ss << \" \";\n        }\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmppdi0d1og: /tmp/tmppdi0d1og.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(' ');\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpujp2nna5: /tmp/tmpujp2nna5.cpp:19: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpcgx6sk2n: /tmp/tmpcgx6sk2n.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i + '0');\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp965rqt36: /tmp/tmp965rqt36.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpx8wte0or: /tmp/tmpx8wte0or.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmppdi0d1og: /tmp/tmppdi0d1og.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string res;\n    for (long i = 0; i <= n; ++i) {\n        res.push_back(std::to_string(i));\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "/tmp/tmp88d3r_6s.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmp88d3r_6s.cpp:11:37: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11 |         res.push_back(std::to_string(i));\n      |                       ~~~~~~~~~~~~~~^~~\n      |                                     |\n      |                                     std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp88d3r_6s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) s += ' ';\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "tmpopfqb_pr: /tmp/tmpopfqb_pr.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "tmp4ara_mqa: /tmp/tmp4ara_mqa.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmppdi0d1og: /tmp/tmppdi0d1og.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmppdi0d1og: /tmp/tmppdi0d1og.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(' ');\n        result.push_back(std::to_string(i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "/tmp/tmp3l99v8b8.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmp3l99v8b8.cpp:12:40: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   12 |         result.push_back(std::to_string(i));\n      |                          ~~~~~~~~~~~~~~^~~\n      |                                        |\n      |                                        std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp3l99v8b8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i + '0');\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp965rqt36: /tmp/tmp965rqt36.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    while (n > 0) {\n        result.push_back('0' + n % 10);\n        n /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp6782nm6p: /tmp/tmp6782nm6p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back('0' + n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp_yyy0f1l: /tmp/tmp_yyy0f1l.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n        if (i < n) {\n            ss << \" \";\n        }\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n        if (i < n) {\n            ss << \" \";\n        }\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp32zh0dza: /tmp/tmp32zh0dza.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string res = \"\";\n    while (n > 0) {\n        res += std::to_string(n % 10);\n        n /= 10;\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpgir8_aw8: /tmp/tmpgir8_aw8.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i != n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result = \"\";\n    for (long i = 0; i <= n; i++) {\n        result += std::to_string(i) + \" \";\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmplrsna70s: /tmp/tmplrsna70s.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n        if (i < n) {\n            ss << \" \";\n        }\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back('0' + n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp_yyy0f1l: /tmp/tmp_yyy0f1l.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back('0' + (n % 10));\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmpr29wgu9w: /tmp/tmpr29wgu9w.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result = \"\";\n    for (long i = 0; i <= n; ++i) {\n        result += std::to_string(i);\n        if (i != n) {\n            result += \" \";\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp32zh0dza: /tmp/tmp32zh0dza.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "tmp4ara_mqa: /tmp/tmp4ara_mqa.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back('0' + n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp_yyy0f1l: /tmp/tmp_yyy0f1l.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string res;\n    for (long i = 0; i <= n; ++i) {\n        res += std::to_string(i);\n        if (i < n) {\n            res += ' ';\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) s += \" \";\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmppdi0d1og: /tmp/tmppdi0d1og.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result = \"\";\n    while (n > 0) {\n        result += std::to_string(n % 10);\n        n /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmpuziyyli8: /tmp/tmpuziyyli8.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    while (n > 0) {\n        result.push_back('0' + n % 10);\n        n /= 10;\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp6782nm6p: /tmp/tmp6782nm6p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i + '0');\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp965rqt36: /tmp/tmp965rqt36.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmpdgkzk5jh: /tmp/tmpdgkzk5jh.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmpdgkzk5jh: /tmp/tmpdgkzk5jh.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; i++) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmppdi0d1og: /tmp/tmppdi0d1og.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpofl2_djl: /tmp/tmpofl2_djl.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i + '0');\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp965rqt36: /tmp/tmp965rqt36.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(std::to_string(i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "/tmp/tmpdrbl0azf.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmpdrbl0azf.cpp:11:40: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11 |         result.push_back(std::to_string(i));\n      |                          ~~~~~~~~~~~~~~^~~\n      |                                        |\n      |                                        std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdrbl0azf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) s += ' ';\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpofl2_djl: /tmp/tmpofl2_djl.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpofl2_djl: /tmp/tmpofl2_djl.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpofl2_djl: /tmp/tmpofl2_djl.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpqgdlxmar: /tmp/tmpqgdlxmar.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i != n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i < n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292644,
      "stdout": "",
      "stderr": "tmpofl2_djl: /tmp/tmpofl2_djl.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n--) {\n        s.push_back(' ');\n        s.push_back('0' + n);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmp9kfmoz_q: /tmp/tmp9kfmoz_q.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back('0' + n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp_yyy0f1l: /tmp/tmp_yyy0f1l.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(' ');\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpujp2nna5: /tmp/tmpujp2nna5.cpp:19: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(std::to_string(i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "/tmp/tmpdrbl0azf.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmpdrbl0azf.cpp:11:40: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11 |         result.push_back(std::to_string(i));\n      |                          ~~~~~~~~~~~~~~^~~\n      |                                        |\n      |                                        std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdrbl0azf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back('0' + (n % 10));\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmpr29wgu9w: /tmp/tmpr29wgu9w.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp4j0eru1f: /tmp/tmp4j0eru1f.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s.push_back(n % 10 + '0');\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpfnxlm2gf: /tmp/tmpfnxlm2gf.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) s += ' ';\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(std::to_string(i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "/tmp/tmpdrbl0azf.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmpdrbl0azf.cpp:11:40: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11 |         result.push_back(std::to_string(i));\n      |                          ~~~~~~~~~~~~~~^~~\n      |                                        |\n      |                                        std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdrbl0azf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i + '0');\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp965rqt36: /tmp/tmp965rqt36.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(std::to_string(i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "/tmp/tmpdrbl0azf.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmpdrbl0azf.cpp:11:40: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11 |         result.push_back(std::to_string(i));\n      |                          ~~~~~~~~~~~~~~^~~\n      |                                        |\n      |                                        std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdrbl0azf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        ss << i << \" \";\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp0radt3b6: /tmp/tmp0radt3b6.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s.push_back(i + '0');\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmp965rqt36: /tmp/tmp965rqt36.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n--) {\n        s += ' ' + std::to_string(n);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "tmpgrkkgbhk: /tmp/tmpgrkkgbhk.cpp:17: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    while (n > 0) {\n        s += std::to_string(n % 10);\n        n /= 10;\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpmy9ro32p: /tmp/tmpmy9ro32p.cpp:18: int main(): Assertion `candidate((0)) == (\"0\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += \" \";\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string result;\n    for (long i = 0; i <= n; ++i) {\n        result.push_back(std::to_string(i));\n    }\n    return result;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292643,
      "stdout": "",
      "stderr": "/tmp/tmpdrbl0azf.cpp: In function \u2018std::string string_sequence(long int)\u2019:\n/tmp/tmpdrbl0azf.cpp:11:40: error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019\n   11 |         result.push_back(std::to_string(i));\n      |                          ~~~~~~~~~~~~~~^~~\n      |                                        |\n      |                                        std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpdrbl0azf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1349:24: note:   initializing argument 1 of \u2018void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::push_back(_CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 1349 |       push_back(_CharT __c)\n      |                 ~~~~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292642,
      "stdout": "",
      "stderr": "tmpcgx6sk2n: /tmp/tmpcgx6sk2n.cpp:18: int main(): Assertion `candidate((3)) == (\"0 1 2 3\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long n) {\n    std::string s;\n    for (long i = 0; i <= n; ++i) {\n        s += std::to_string(i);\n        if (i < n) {\n            s += ' ';\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292641,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}