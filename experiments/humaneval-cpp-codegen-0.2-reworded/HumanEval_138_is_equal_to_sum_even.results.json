{
  "name": "HumanEval_138_is_equal_to_sum_even",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n",
  "tests": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (int i = 0; i < 4; i++) {\n        if (n % 2 == 0) return false;\n        sum += n;\n        n /= 2;\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpe37mu7ui: /tmp/tmpe37mu7ui.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (int i = 0; i < 4; i++) {\n        if (n % 2 == 0) {\n            sum += n;\n            n /= 2;\n        } else {\n            n -= 1;\n        }\n    }\n    return n == 0 && sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpx2sxdw_h: /tmp/tmpx2sxdw_h.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n < 4) return false;\n    long sum = 0;\n    for(int i = 0; i < 4; i++) {\n        if(n % 2 == 0) {\n            sum += n;\n            n = n / 2;\n        } else {\n            n = (n - 1) / 2;\n        }\n    }\n    return n == 0 && sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpvolr9yuv: /tmp/tmpvolr9yuv.cpp:28: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (int i = 0; i < 4; i++) {\n        sum += i;\n        if (sum > n) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpulisb7vo: /tmp/tmpulisb7vo.cpp:23: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpnalew6cb: /tmp/tmpnalew6cb.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpn9km5lvb: /tmp/tmpn9km5lvb.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpbu_fyqkw: /tmp/tmpbu_fyqkw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum / 2 == 2;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpcs63prnv: /tmp/tmpcs63prnv.cpp:21: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp6ltp99_g: /tmp/tmp6ltp99_g.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0 && sum / 10 == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmposume_g0: /tmp/tmposume_g0.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplu95pd0t: /tmp/tmplu95pd0t.cpp:23: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpbu_fyqkw: /tmp/tmpbu_fyqkw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) {\n        return false;\n    }\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    if (n % 4 == 0) {\n        return true;\n    }\n    if (n % 2 == 0 && n % 4 == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpmf5d56z7: /tmp/tmpmf5d56z7.cpp:39: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i += 2) {\n        sum += i;\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp5uqhbs1q: /tmp/tmp5uqhbs1q.cpp:23: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 2;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp98dpcq0_: /tmp/tmp98dpcq0_.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpb3e0u1cq: /tmp/tmpb3e0u1cq.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return (sum % 2 == 0);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpckxx8vvw: /tmp/tmpckxx8vvw.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0 && sum / 10 == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmposume_g0: /tmp/tmposume_g0.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n%2!=0) return false;\n    long sum=0;\n    for(long i=0;i<n;i+=2) {\n        sum+=i;\n    }\n    return sum==n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpi170n8k6: /tmp/tmpi170n8k6.cpp:25: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpf63etynq: /tmp/tmpf63etynq.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpwwgeb9a8: /tmp/tmpwwgeb9a8.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmphti951ia: /tmp/tmphti951ia.cpp:23: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (int i = 0; i < 4; i++) {\n        if (n % 2 == 0) return false;\n        sum += n;\n        n /= 2;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp1jj1izl3: /tmp/tmp1jj1izl3.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp5vyzh8fi: /tmp/tmp5vyzh8fi.cpp:24: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp1hsw5hfy: /tmp/tmp1hsw5hfy.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpnqhxdquk: /tmp/tmpnqhxdquk.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0 && sum / 10 == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpelfrz4b5: /tmp/tmpelfrz4b5.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum > 0 && sum < 10;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp7tbjx69c: /tmp/tmp7tbjx69c.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpgi9urts7: /tmp/tmpgi9urts7.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n < 4) return false;\n    if(n % 2 != 0) return false;\n    if(n % 4 != 0) return false;\n    long sum = 0;\n    while(n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp7qcfi6hu: /tmp/tmp7qcfi6hu.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpbu_fyqkw: /tmp/tmpbu_fyqkw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i += 2) {\n        sum += i;\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp5uqhbs1q: /tmp/tmp5uqhbs1q.cpp:23: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum >= 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpnbn0oxvi: /tmp/tmpnbn0oxvi.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp1lsb9g4y: /tmp/tmp1lsb9g4y.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (int i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) continue;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp3e1qka6x: /tmp/tmp3e1qka6x.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp_x2sya_1: /tmp/tmp_x2sya_1.cpp:28: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmphti951ia: /tmp/tmphti951ia.cpp:23: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n%4!=0) return false;\n    long sum=0;\n    for(int i=0;i<4;i++) {\n        if(n%2==0) {\n            sum+=n/2;\n            n=n/2;\n        }\n        else {\n            n=n*3+1;\n        }\n    }\n    return (sum==n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpn969itf2: /tmp/tmpn969itf2.cpp:29: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum / 2 == 2;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpg30u3dz1: /tmp/tmpg30u3dz1.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return false;\n    if (n == 4) return true;\n    if (n == 5) return false;\n    if (n == 6) return true;\n    if (n == 7) return false;\n    if (n == 8) return true;\n    if (n == 9) return false;\n    if (n == 10) return true;\n    if (n == 11) return false;\n    if (n == 12) return true;\n    if (n == 13) return false;\n    if (n == 14) return true;\n    if (n == 15) return false;\n    if (n == 16) return true;\n    if (n == 17) return false;\n    if (n == 18) return true;\n    if (n == 19) return false;\n    if (n == 20) return true;\n    if (n == 21) return false;\n    if (n == 22) return true;\n    if (n == 23) return false;\n    if (n == 24) return true;\n    if (n == 25) return false;\n    if (n == 26) return true;\n    if (n == 27) return false;\n    if (n == 28) return true;\n    if (n == 29) return false;\n    if (n == 30) return true;\n    if (n == 31) return false;\n    if (n == 32) return true;\n    if (n == 33) return false;\n    if (n == 34) return true;\n    if (n == 35) return false;\n    if (n == 36) return true;\n    if (n == 37) return false;\n    if (n == 38) return true;\n    if (n == 39) return false;\n    if (n == 40) return true;\n    if (n == 41) return false;\n    if (n == 42) return true;\n    if (n == 43) return false;\n    if (n == 44) return true;\n    if (n == 45\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "/tmp/tmpepg1n2hc.cpp: In function \u2018bool is_equal_to_sum_even(long int)\u2019:\n/tmp/tmpepg1n2hc.cpp:58:16: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |     if (n == 45\n      |        ~       ^\n      |                )\n   59 | }\n      | ~               \n/tmp/tmpepg1n2hc.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpepg1n2hc.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpb3e0u1cq: /tmp/tmpb3e0u1cq.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp2o777um4: /tmp/tmp2o777um4.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmprqv7w_pd: /tmp/tmprqv7w_pd.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpyuelb21e: /tmp/tmpyuelb21e.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmprqv7w_pd: /tmp/tmprqv7w_pd.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp9lka3cuw: /tmp/tmp9lka3cuw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpbu_fyqkw: /tmp/tmpbu_fyqkw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum >= 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpnbn0oxvi: /tmp/tmpnbn0oxvi.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp5vyzh8fi: /tmp/tmp5vyzh8fi.cpp:24: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpk2jygy63: /tmp/tmpk2jygy63.cpp:23: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmp5g3xs7at: /tmp/tmp5g3xs7at.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpa_xsrnr3: /tmp/tmpa_xsrnr3.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum >= 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpnbn0oxvi: /tmp/tmpnbn0oxvi.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp2o777um4: /tmp/tmp2o777um4.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpsh0zm1ij: /tmp/tmpsh0zm1ij.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) continue;\n        sum += i;\n        if (sum > n) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpxzds5ebk: /tmp/tmpxzds5ebk.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n==3) return true;\n    if(n==4) return true;\n    if(n==5) return true;\n    if(n==6) return true;\n    if(n==7) return true;\n    if(n==8) return true;\n    if(n==9) return true;\n    if(n==10) return true;\n    if(n==11) return true;\n    if(n==12) return true;\n    if(n==13) return true;\n    if(n==14) return true;\n    if(n==15) return true;\n    if(n==16) return true;\n    if(n==17) return true;\n    if(n==18) return true;\n    if(n==19) return true;\n    if(n==20) return true;\n    if(n==21) return true;\n    if(n==22) return true;\n    if(n==23) return true;\n    if(n==24) return true;\n    if(n==25) return true;\n    if(n==26) return true;\n    if(n==27) return true;\n    if(n==28) return true;\n    if(n==29) return true;\n    if(n==30) return true;\n    if(n==31) return true;\n    if(n==32) return true;\n    if(n==33) return true;\n    if(n==34) return true;\n    if(n==35) return true;\n    if(n==36) return true;\n    if(n==37) return true;\n    if(n==38) return true;\n    if(n==39) return true;\n    if(n==40) return true;\n    if(n==41) return true;\n    if(n==42) return true;\n    if(n==43) return true;\n    if(n==44) return true;\n    if(n==45) return true;\n    if(n==\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "/tmp/tmpdy1sk9wt.cpp: In function \u2018bool is_equal_to_sum_even(long int)\u2019:\n/tmp/tmpdy1sk9wt.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpdy1sk9wt.cpp:58:11: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |     if(n==\n      |       ~   ^\n      |           )\n   59 | }\n      | ~          \n/tmp/tmpdy1sk9wt.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpdy1sk9wt.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n%2==0) return false;\n    long sum=0;\n    for(long i=0;i<n;i+=2) {\n        sum+=i;\n    }\n    return sum==n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmp6998z4sp: /tmp/tmp6998z4sp.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmprqv7w_pd: /tmp/tmprqv7w_pd.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    if(n==1) return true;\n    if(n%2==0) return false;\n    if(n==2) return true;\n    if(n%4==0) return false;\n    if(n==4) return true;\n    if(n%8==0) return false;\n    if(n==8) return true;\n    if(n%16==0) return false;\n    if(n==16) return true;\n    if(n%32==0) return false;\n    if(n==32) return true;\n    if(n%64==0) return false;\n    if(n==64) return true;\n    if(n%128==0) return false;\n    if(n==128) return true;\n    if(n%256==0) return false;\n    if(n==256) return true;\n    if(n%512==0) return false;\n    if(n==512) return true;\n    if(n%1024==0) return false;\n    if(n==1024) return true;\n    if(n%2048==0) return false;\n    if(n==2048) return true;\n    if(n%4096==0) return false;\n    if(n==4096) return true;\n    if(n%8192==0) return false;\n    if(n==8192) return true;\n    if(n%16384==0) return false;\n    if(n==16384) return true;\n    if(n%32768==0) return false;\n    if(n==32768) return true;\n    if(n%65536==0) return false;\n    if(n==65536) return true;\n    if(n%131072==0) return false;\n    if(n==131072) return true;\n    if(n%262144==0) return false;\n    if(n==262144) return true;\n    if(n%524288==0) return false;\n    if(n==524288) return true;\n    if(n%1048576==0) return false\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "/tmp/tmpsdv3mb8g.cpp: In function \u2018bool is_equal_to_sum_even(long int)\u2019:\n/tmp/tmpsdv3mb8g.cpp:52:34: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   52 |     if(n%1048576==0) return false\n      |                                  ^\n      |                                  ;\n   53 | }\n      | ~                                 \n/tmp/tmpsdv3mb8g.cpp:53:1: warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 != 0) continue;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpv95cs0j_: /tmp/tmpv95cs0j_.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 8 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpb988zd9g: /tmp/tmpb988zd9g.cpp:22: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpf63etynq: /tmp/tmpf63etynq.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpzorimu3i: /tmp/tmpzorimu3i.cpp:23: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum == 0 || sum == 2 || sum == 4 || sum == 6;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpzrmeukn9: /tmp/tmpzrmeukn9.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpr1gn8bv5: /tmp/tmpr1gn8bv5.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n%2==0) return false;\n    if(n%4==0) return false;\n    if(n%8==0) return false;\n    if(n%16==0) return false;\n    if(n%32==0) return false;\n    if(n%64==0) return false;\n    if(n%128==0) return false;\n    if(n%256==0) return false;\n    if(n%512==0) return false;\n    if(n%1024==0) return false;\n    if(n%2048==0) return false;\n    if(n%4096==0) return false;\n    if(n%8192==0) return false;\n    if(n%16384==0) return false;\n    if(n%32768==0) return false;\n    if(n%65536==0) return false;\n    if(n%131072==0) return false;\n    if(n%262144==0) return false;\n    if(n%524288==0) return false;\n    if(n%1048576==0) return false;\n    if(n%2097152==0) return false;\n    if(n%4194304==0) return false;\n    if(n%8388608==0) return false;\n    if(n%16777216==0) return false;\n    if(n%33554432==0) return false;\n    if(n%67108864==0) return false;\n    if(n%134217728==0) return false;\n    if(n%268435456==0) return false;\n    if(n%536870912==0) return false;\n    if(n%1073741824==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmp76t417ru: /tmp/tmp76t417ru.cpp:51: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmp1ikgudfq: /tmp/tmp1ikgudfq.cpp:28: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n % 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 == 0) return false;\n    if (n % 37 == 0) return false;\n    if (n % 41 == 0) return false;\n    if (n % 43 == 0) return false;\n    if (n % 47 == 0) return false;\n    if (n % 53 == 0) return false;\n    if (n % 59 == 0) return false;\n    if (n % 61 == 0) return false;\n    if (n % 67 == 0) return false;\n    if (n % 71 == 0) return false;\n    if (n % 73 == 0) return false;\n    if (n % 79 == 0) return false;\n    if (n % 83 == 0) return false;\n    if (n % 89 == 0) return false;\n    if (n % 97 == 0) return false;\n    if (n % 101 == 0) return false;\n    if (n % 103 == 0) return false;\n    if (n % 107 == 0) return false;\n    if (n % 109 == 0) return false;\n    if (n % 113 == 0) return false;\n    if (n % 127 == 0) return false;\n    if (n % 131 == 0) return false;\n    if (n % 137 == 0) return false;\n    if (n % 139 == 0) return false;\n\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpsyeqfmdz: /tmp/tmpsyeqfmdz.cpp:58: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpgv9tkups: /tmp/tmpgv9tkups.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpv4qmjitn: /tmp/tmpv4qmjitn.cpp:26: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum >= 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpnbn0oxvi: /tmp/tmpnbn0oxvi.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    long sum=0;\n    while(n>0) {\n        sum+=n%10;\n        n/=10;\n    }\n    return sum%2==0 && sum/2==4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmp7rquwdmi: /tmp/tmp7rquwdmi.cpp:25: int main(): Assertion `candidate((10)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n < 4) return false;\n    long sum = 0;\n    while(n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmptt6bkpoe: /tmp/tmptt6bkpoe.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) {\n        return false;\n    }\n    if (n == 1) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpj1ywx1u9: /tmp/tmpj1ywx1u9.cpp:32: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpzbbr7gd1: /tmp/tmpzbbr7gd1.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpsh0zm1ij: /tmp/tmpsh0zm1ij.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (int i = 0; i < 4; i++) {\n        sum += (i + 1) * 2;\n        if (sum > n) return false;\n        if (sum == n) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmp0dfrhlmx: /tmp/tmp0dfrhlmx.cpp:26: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpnalew6cb: /tmp/tmpnalew6cb.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpzbbr7gd1: /tmp/tmpzbbr7gd1.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp6ltp99_g: /tmp/tmp6ltp99_g.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (int i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            sum += i;\n            if (sum > n) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpoquesdcg: /tmp/tmpoquesdcg.cpp:24: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "tmp8wnslri8: /tmp/tmp8wnslri8.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "tmpf6rj4i1m: /tmp/tmpf6rj4i1m.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n < 4) return false;\n    long sum = 0;\n    while(n > 0) {\n        if(n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmp4r16pykz: /tmp/tmp4r16pykz.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 != 0) continue;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpv95cs0j_: /tmp/tmpv95cs0j_.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n <= 0)\n        return false;\n    if(n == 1)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    if(n % 4 != 0)\n        return false;\n    long sum = 0;\n    while(n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpk6v3vg4g: /tmp/tmpk6v3vg4g.cpp:31: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpzorimu3i: /tmp/tmpzorimu3i.cpp:23: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpsh0zm1ij: /tmp/tmpsh0zm1ij.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpgv9tkups: /tmp/tmpgv9tkups.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0 && sum / 10 == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpelfrz4b5: /tmp/tmpelfrz4b5.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n == 2) return true;\n    if (n == 3) return false;\n    if (n == 4) return true;\n    if (n == 5) return false;\n    if (n == 6) return true;\n    if (n == 7) return false;\n    if (n == 8) return true;\n    if (n == 9) return false;\n    if (n == 10) return true;\n    if (n == 11) return false;\n    if (n == 12) return true;\n    if (n == 13) return false;\n    if (n == 14) return true;\n    if (n == 15) return false;\n    if (n == 16) return true;\n    if (n == 17) return false;\n    if (n == 18) return true;\n    if (n == 19) return false;\n    if (n == 20) return true;\n    if (n == 21) return false;\n    if (n == 22) return true;\n    if (n == 23) return false;\n    if (n == 24) return true;\n    if (n == 25) return false;\n    if (n == 26) return true;\n    if (n == 27) return false;\n    if (n == 28) return true;\n    if (n == 29) return false;\n    if (n == 30) return true;\n    if (n == 31) return false;\n    if (n == 32) return true;\n    if (n == 33) return false;\n    if (n == 34) return true;\n    if (n == 35) return false;\n    if (n == 36) return true;\n    if (n == 37) return false;\n    if (n == 38) return true;\n    if (n == 39) return false;\n    if (n == 40) return true;\n    if (n == 41) return false;\n    if (n == 42) return true;\n    if (n == 43) return false;\n    if (n == 44) return true;\n    if (n == 45\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "/tmp/tmpepg1n2hc.cpp: In function \u2018bool is_equal_to_sum_even(long int)\u2019:\n/tmp/tmpepg1n2hc.cpp:58:16: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |     if (n == 45\n      |        ~       ^\n      |                )\n   59 | }\n      | ~               \n/tmp/tmpepg1n2hc.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpepg1n2hc.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpy5neu87i: /tmp/tmpy5neu87i.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmphj978jvm: /tmp/tmphj978jvm.cpp:28: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmppr47s6hk: /tmp/tmppr47s6hk.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpnalew6cb: /tmp/tmpnalew6cb.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp2o777um4: /tmp/tmp2o777um4.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if(n<=0) return false;\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n==3) return true;\n    if(n==4) return true;\n    if(n==5) return true;\n    if(n==6) return true;\n    if(n==7) return true;\n    if(n==8) return true;\n    if(n==9) return true;\n    if(n==10) return true;\n    if(n==11) return true;\n    if(n==12) return true;\n    if(n==13) return true;\n    if(n==14) return true;\n    if(n==15) return true;\n    if(n==16) return true;\n    if(n==17) return true;\n    if(n==18) return true;\n    if(n==19) return true;\n    if(n==20) return true;\n    if(n==21) return true;\n    if(n==22) return true;\n    if(n==23) return true;\n    if(n==24) return true;\n    if(n==25) return true;\n    if(n==26) return true;\n    if(n==27) return true;\n    if(n==28) return true;\n    if(n==29) return true;\n    if(n==30) return true;\n    if(n==31) return true;\n    if(n==32) return true;\n    if(n==33) return true;\n    if(n==34) return true;\n    if(n==35) return true;\n    if(n==36) return true;\n    if(n==37) return true;\n    if(n==38) return true;\n    if(n==39) return true;\n    if(n==40) return true;\n    if(n==41) return true;\n    if(n==42) return true;\n    if(n==43) return true;\n    if(n==44) return true;\n    if(n==45) return true;\n    if(n==\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "/tmp/tmpdy1sk9wt.cpp: In function \u2018bool is_equal_to_sum_even(long int)\u2019:\n/tmp/tmpdy1sk9wt.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpdy1sk9wt.cpp:58:11: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |     if(n==\n      |       ~   ^\n      |           )\n   59 | }\n      | ~          \n/tmp/tmpdy1sk9wt.cpp:59:1: error: expected primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpdy1sk9wt.cpp:59:1: warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpbu_fyqkw: /tmp/tmpbu_fyqkw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 == 0) return false;\n    if (n % 2 == 0) return false\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "/tmp/tmpnh9yj_rr.cpp: In function \u2018bool is_equal_to_sum_even(long int)\u2019:\n/tmp/tmpnh9yj_rr.cpp:51:33: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   51 |     if (n % 2 == 0) return false\n      |                                 ^\n      |                                 ;\n   52 | }\n      | ~                                \n/tmp/tmpnh9yj_rr.cpp:52:1: warning: control reaches end of non-void function [-Wreturn-type]\n   52 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return (sum % 2 == 0 && sum >= 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpvbe3348y: /tmp/tmpvbe3348y.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpy5neu87i: /tmp/tmpy5neu87i.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp6ltp99_g: /tmp/tmp6ltp99_g.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "tmpf6rj4i1m: /tmp/tmpf6rj4i1m.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            sum += i;\n            if (sum > n) return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpkc6gfmq7: /tmp/tmpkc6gfmq7.cpp:24: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmprqv7w_pd: /tmp/tmprqv7w_pd.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpss8s93xj: /tmp/tmpss8s93xj.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "tmpf6rj4i1m: /tmp/tmpf6rj4i1m.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpzbbr7gd1: /tmp/tmpzbbr7gd1.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpsh0zm1ij: /tmp/tmpsh0zm1ij.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpn9km5lvb: /tmp/tmpn9km5lvb.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpbu_fyqkw: /tmp/tmpbu_fyqkw.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0 && sum >= 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpnbn0oxvi: /tmp/tmpnbn0oxvi.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmp5ev5i4t6: /tmp/tmp5ev5i4t6.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 10 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293302,
      "stdout": "",
      "stderr": "tmp8wnslri8: /tmp/tmp8wnslri8.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpsh0zm1ij: /tmp/tmpsh0zm1ij.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp6ltp99_g: /tmp/tmp6ltp99_g.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpb3e0u1cq: /tmp/tmpb3e0u1cq.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpgi9urts7: /tmp/tmpgi9urts7.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp6ltp99_g: /tmp/tmp6ltp99_g.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp1lsb9g4y: /tmp/tmp1lsb9g4y.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 0) return false;\n    if (n == 0) return true;\n    if (n == 1) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return (sum % 4 == 0);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpjqjgjyis: /tmp/tmpjqjgjyis.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmp45o7b2cp: /tmp/tmp45o7b2cp.cpp:22: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i += 2) {\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplu95pd0t: /tmp/tmplu95pd0t.cpp:23: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n        }\n        n /= 2;\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpn9km5lvb: /tmp/tmpn9km5lvb.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmprqv7w_pd: /tmp/tmprqv7w_pd.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmplarjm_vr: /tmp/tmplarjm_vr.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n--;\n        }\n    }\n    return (sum == 4);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmp2o777um4: /tmp/tmp2o777um4.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (int i = 0; i < 4; i++) {\n        if (n % 2 != 0) return false;\n        n /= 2;\n        sum += n;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpxpzlibnj: /tmp/tmpxpzlibnj.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n /= 2;\n        } else {\n            n--;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpysgta2uv: /tmp/tmpysgta2uv.cpp:28: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293299,
      "stdout": "",
      "stderr": "tmpmd5wtcjm: /tmp/tmpmd5wtcjm.cpp:24: int main(): Assertion `candidate((6)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) continue;\n        sum += i;\n        if (sum > n) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpxzds5ebk: /tmp/tmpxzds5ebk.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n; i += 2) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return (sum == n);\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpvx_chc6z: /tmp/tmpvx_chc6z.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    for (long i = 2; i <= n/2; i++) {\n        if (n % i != 0) return false;\n        sum += i;\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpoa8accry: /tmp/tmpoa8accry.cpp:24: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n <= 0) return false;\n    if (n == 1) return true;\n    if (n % 2 == 0) return false;\n    if (n % 4 != 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 2 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293303,
      "stdout": "",
      "stderr": "tmpxav2knpy: /tmp/tmpxav2knpy.cpp:27: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    long sum = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n            n = 0;\n        } else {\n            n -= 1;\n        }\n    }\n    return sum == 4;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpp6c2__ac: /tmp/tmpp6c2__ac.cpp:26: int main(): Assertion `candidate((4)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 != 0) return false;\n    long sum = 0;\n    for (long i = 2; i <= n / 2; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum == n;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293301,
      "stdout": "",
      "stderr": "tmpgv9tkups: /tmp/tmpgv9tkups.cpp:26: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4) \n// False\n// >>> is_equal_to_sum_even(6) \n// False\n// >>> is_equal_to_sum_even(8) \n// True\nbool is_equal_to_sum_even(long n) {\n    if (n < 4) return false;\n    if (n % 2 == 0) return false;\n    long sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum % 4 == 0;\n}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n",
      "timestamp": 1664293297,
      "stdout": "",
      "stderr": "tmpeds7z3qn: /tmp/tmpeds7z3qn.cpp:25: int main(): Assertion `candidate((8)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}