{
  "name": "HumanEval_90_next_smallest",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// None\n// >>> next_smallest([1, 1])\n// None\nstd::optional<long> next_smallest(std::vector<long> lst) {\n",
  "tests": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n",
  "completions": [
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [](long x) { return x > 0; });\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *it;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[lst.size() - 2];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [](long x) { return x > 0; });\n    if (it == lst.end()) return std::nullopt;\n    return *it;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [](long x) { return x > 0; });\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *it;",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::next(lst.begin());\n    if (it == lst.end()) return std::nullopt;\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return std::nullopt;\n    return *it2;",
    "    if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return std::nullopt;\n    return *it2;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) return std::nullopt;\n    return lst[1];",
    "    if (lst.size() == 0) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return std::nullopt;\n    return *it2;",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    return lst.size() > 1 ? lst[1] : std::optional<long>();",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x){return x > 0;});\n    if (it == lst.rend()) return std::nullopt;\n    return *it;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(), lst.end(), lst.back());\n    if (it == lst.end()) return std::nullopt;\n    return *it;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto it_next = it;\n    it_next++;\n    while (it_next != lst.end()) {\n        if (*it_next < *it) {\n            it = it_next;\n        }\n        it_next++;\n    }\n    return *it;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    auto it = lst.begin();\n    auto it2 = lst.begin();\n    while (it2 != lst.end()) {\n        if (*it2 < *it) {\n            it = it2;\n        }\n        it2++;\n    }\n    return *it;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n    }\n    return second_min;",
    "    if (lst.size() == 1)\n        return std::optional<long>();\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::next(lst.begin());\n    if (it == lst.end()) return std::nullopt;\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return std::nullopt;\n    return *it2;",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    auto it_prev = it;\n    while (it != lst.end()) {\n        if (*it_prev < *it) {\n            it_prev = it;\n        }\n        it++;\n    }\n    return *it_prev;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[lst.size() - 2];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.size() < 2) return {};\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == min) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x){return x > 0;});\n    if (it == lst.rend()) return std::nullopt;\n    return *it;",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.size() < 2) return {};\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    return lst.size() > 1 ? lst[1] : std::optional<long>();",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst.at(1);",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    return lst.size() > 1 ? lst[1] : std::optional<long>();",
    "    if (lst.empty()) return {};\n    std::sort(lst.begin(), lst.end());\n    auto it = std::next(lst.begin());\n    if (it == lst.end()) return {};\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return {};\n    return *it2;",
    "    if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    return *it;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    auto it = lst.begin();\n    auto it_prev = it;\n    while (it_prev != lst.end()) {\n        if (*it_prev > *it) {\n            it_prev = it;\n            ++it;\n        } else {\n            break;\n        }\n    }\n    if (it_prev == lst.end()) return std::nullopt;\n    auto it_next = it_prev;\n    while (it_next != lst.end()) {\n        if (*it_next > *it_prev) {\n            it_next = it_prev;\n            ++it_prev;\n        } else {\n            break;\n        }\n    }\n    if (it_next == lst.end()) return std::nullopt;\n    return *it_next;",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 0) return std::nullopt;\n    return lst[lst.size() - 2];",
    "    if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == min) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    auto it = lst.begin();\n    std::advance(it, 2);\n    return *it;",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1)\n        return std::nullopt;\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[lst.size() - 2];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    if (it + 1 == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    auto it = lst.begin();\n    while (it != lst.end() && *it == *(it + 1)) {\n        it++;\n    }\n    if (it == lst.end()) {\n        return {};\n    }\n    auto it2 = it + 1;\n    while (it2 != lst.end() && *it2 == *(it2 - 1)) {\n        it2++;\n    }\n    if (it2 == lst.end()) {\n        return {};\n    }\n    return *it2;",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [](long x){return x > 0;});\n    if (it == lst.end()) return std::nullopt;\n    return *it;",
    "    if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    long max = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == min && lst[i] != max) {\n            return lst[i + 1];\n        }\n    }\n    return std::nullopt;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) return std::nullopt;\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(), lst.end(), lst.back());\n    if (it == lst.end()) return std::nullopt;\n    return *it;",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::optional<long>();\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) return std::nullopt;\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x){ return x > 0; });\n    if (it == lst.rend()) return std::nullopt;\n    return *it;",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return {};\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return {};\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return {};\n    return *it2;",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(), lst.end(), lst.back());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
    "    if (lst.size() == 0) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) return std::nullopt;\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i] == min) {\n            return min;\n        }\n    }\n    return std::nullopt;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) return std::nullopt;\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() == 0) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x) { return x > 0; });\n    if (it == lst.rend()) {\n        return std::nullopt;\n    }\n    return *it;",
    "    if (lst.size() < 2) return {};\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return {};\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x) { return x != lst.front(); });\n    if (it == lst.rend()) return std::nullopt;\n    return *it;",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[lst.size() - 2];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    return lst.size() == 1 ? std::optional<long>() : std::optional<long>(lst[1]);",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) return std::nullopt;\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    long second_min = lst[0];\n    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n    }\n    return second_min;",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    if (it == lst.begin()) return std::nullopt;\n    return *it;",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n    }\n    return second_min;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(), lst.end(), lst.back());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    long min = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == min) {\n            if (i + 1 < lst.size()) {\n                return lst[i + 1];\n            }\n        }\n    }\n    return std::nullopt;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return lst[0];\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    if (it + 1 == lst.end()) return std::nullopt;\n    return *(it + 1);",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    auto it2 = std::next(it);\n    if (it2 == lst.end()) return std::nullopt;\n    return *it2;",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst.size() > 1 ? lst[1] : std::nullopt;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    auto it = lst.begin();\n    while (it != lst.end() && *it == *(it + 1)) {\n        it++;\n    }\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return {};\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[lst.size() - 2];",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(lst.size() > 0);\n    std::sort(lst.begin(), lst.end());\n    return lst.size() > 1 ? lst[1] : std::optional<long>();",
    "    if (lst.size() < 2) {\n        return {};\n    }\n    auto it = lst.begin();\n    std::advance(it, 2);\n    return *it;",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(), lst.end(), lst.back());\n    if (it == lst.end()) return std::nullopt;\n    return *(it + 1);",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) return std::nullopt;\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) return std::nullopt;\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return {};\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x){return x != lst.front();});\n    if (it == lst.rend()) return {};\n    return *it;",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    auto it = std::min_element(lst.begin(), lst.end());\n    if (it == lst.end()) return std::nullopt;\n    if (it + 1 == lst.end()) return std::nullopt;\n    return *it + *(it + 1);",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    if (lst.size() == 1) {\n        return lst[0];\n    }\n    if (lst.size() == 2) {\n        return lst[1];\n    }\n    return lst[1];",
    "    if (lst.empty()) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x) { return x > 0; });\n    if (it == lst.rend()) return std::nullopt;\n    return *it;",
    "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == min) {\n            if (i + 1 < lst.size()) {\n                return lst[i + 1];\n            }\n        }\n    }\n    return std::nullopt;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find(lst.begin(), lst.end(), lst.front());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *(++it);",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    assert(!lst.empty());\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.rbegin(), lst.rend(), [](long x){return x > 0;});\n    if (it == lst.rend()) {\n        return std::nullopt;\n    }\n    return *it;",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    std::sort(lst.begin(), lst.end());\n    if (lst.size() < 2) {\n        return {};\n    }\n    return lst[1];",
    "    if (lst.empty()) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::find_if(lst.begin(), lst.end(), [](long x) { return x > 0; });\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n    return *it;",
    "    if (lst.empty()) return std::nullopt;\n    auto it = lst.begin();\n    std::advance(it, 1);\n    while (it != lst.end()) {\n        if (*it < *it) {\n            it = lst.erase(it);\n        } else {\n            break;\n        }\n    }\n    if (lst.size() < 2) return std::nullopt;\n    return *lst.begin();",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];",
    "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    return lst[1];"
  ],
  "stop_tokens": [
    "\n}"
  ]
}