{
  "name": "HumanEval_104_unique_digits",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n",
  "tests": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpv99vf4he: /tmp/tmpv99vf4he.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1253md_f: /tmp/tmp1253md_f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpoackvrl8: /tmp/tmpoackvrl8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                num /= 10;\n            } else {\n                break;\n            }\n        }\n        if (num == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpi7sqyx9f: /tmp/tmpi7sqyx9f.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        ret.push_back(i);\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpp_td8iqr: /tmp/tmpp_td8iqr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpg54zfj73: /tmp/tmpg54zfj73.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1253md_f: /tmp/tmp1253md_f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpv99vf4he: /tmp/tmpv99vf4he.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        ans.push_back(i);\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpz5d202mw: /tmp/tmpz5d202mw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_rjf10qq: /tmp/tmp_rjf10qq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpr0n8qxs2: /tmp/tmpr0n8qxs2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1gqu74gp: /tmp/tmp1gqu74gp.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmppsil5pfi: /tmp/tmppsil5pfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1253md_f: /tmp/tmp1253md_f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpoackvrl8: /tmp/tmpoackvrl8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpv99vf4he: /tmp/tmpv99vf4he.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 != 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpyt5t2qxf: /tmp/tmpyt5t2qxf.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_rjf10qq: /tmp/tmp_rjf10qq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        result.push_back(x[i]);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpnsbo344k: /tmp/tmpnsbo344k.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        result.push_back(i);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "tmpj0fbspul: /tmp/tmpj0fbspul.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzd_witn5: /tmp/tmpzd_witn5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpv99vf4he: /tmp/tmpv99vf4he.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo1e39uc5: /tmp/tmpo1e39uc5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        result.push_back(i);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292697,
      "stdout": "",
      "stderr": "tmpj0fbspul: /tmp/tmpj0fbspul.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmppsil5pfi: /tmp/tmppsil5pfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo1e39uc5: /tmp/tmpo1e39uc5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmporeros0l: /tmp/tmporeros0l.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp_518gpi3: /tmp/tmp_518gpi3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp6y3gver9: /tmp/tmp6y3gver9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ret.push_back(x[i]);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp570l9ag6: /tmp/tmp570l9ag6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo1e39uc5: /tmp/tmpo1e39uc5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            break;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpshbep5pl: /tmp/tmpshbep5pl.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        long digit = x[i] % 10;\n        if (digit == 0) continue;\n        if (result.empty() || result.back() != digit) {\n            result.push_back(digit);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp72df349n: /tmp/tmp72df349n.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpbt6f2q08: /tmp/tmpbt6f2q08.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpbt6f2q08: /tmp/tmpbt6f2q08.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        ret.push_back(i);\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpp_td8iqr: /tmp/tmpp_td8iqr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ret.push_back(x[i]);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpifgv1s3w: /tmp/tmpifgv1s3w.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_rjf10qq: /tmp/tmp_rjf10qq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmppsil5pfi: /tmp/tmppsil5pfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpunmnvuns: /tmp/tmpunmnvuns.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo1e39uc5: /tmp/tmpo1e39uc5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpbt6f2q08: /tmp/tmpbt6f2q08.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpbt6f2q08: /tmp/tmpbt6f2q08.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp0s_r44ao: /tmp/tmp0s_r44ao.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpoackvrl8: /tmp/tmpoackvrl8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2m5d5nt_: /tmp/tmp2m5d5nt_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpoackvrl8: /tmp/tmpoackvrl8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpoackvrl8: /tmp/tmpoackvrl8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpg54zfj73: /tmp/tmpg54zfj73.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        ans.push_back(i);\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmptl5556eh: /tmp/tmptl5556eh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp7thqwuyo: /tmp/tmp7thqwuyo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpunmnvuns: /tmp/tmpunmnvuns.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpqq6ag74w: /tmp/tmpqq6ag74w.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzd_witn5: /tmp/tmpzd_witn5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2m5d5nt_: /tmp/tmp2m5d5nt_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzd_witn5: /tmp/tmpzd_witn5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (long i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpbt6f2q08: /tmp/tmpbt6f2q08.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo1e39uc5: /tmp/tmpo1e39uc5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            break;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2f9elhu5: /tmp/tmp2f9elhu5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp_518gpi3: /tmp/tmp_518gpi3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp_ufd6adt: /tmp/tmp_ufd6adt.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2m5d5nt_: /tmp/tmp2m5d5nt_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ret.push_back(x[i]);\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp13zsy2tt: /tmp/tmp13zsy2tt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpefs3txr2: /tmp/tmpefs3txr2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzd_witn5: /tmp/tmpzd_witn5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpfnaequ02: /tmp/tmpfnaequ02.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo1e39uc5: /tmp/tmpo1e39uc5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (auto i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp0oqubbjr: /tmp/tmp0oqubbjr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp7thqwuyo: /tmp/tmp7thqwuyo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ret.push_back(x[i]);\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp13zsy2tt: /tmp/tmp13zsy2tt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpdk8rrci5: /tmp/tmpdk8rrci5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1253md_f: /tmp/tmp1253md_f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        long n = x[i];\n        while (n > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 0) {\n                break;\n            }\n            n /= 10;\n        }\n        if (n == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmpnz178uzs: /tmp/tmpnz178uzs.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    if (x.size() == 0) return result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmpdfz_af74: /tmp/tmpdfz_af74.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ret;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ret.push_back(x[i]);\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp13zsy2tt: /tmp/tmp13zsy2tt.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmppsil5pfi: /tmp/tmppsil5pfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_rjf10qq: /tmp/tmp_rjf10qq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp_ufd6adt: /tmp/tmp_ufd6adt.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmps13l35ri: /tmp/tmps13l35ri.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    if (x.empty()) return result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpfzodoxlg: /tmp/tmpfzodoxlg.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp1itso5qy: /tmp/tmp1itso5qy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "tmp2m5d5nt_: /tmp/tmp2m5d5nt_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzd_witn5: /tmp/tmpzd_witn5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    if (x.empty()) return res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpo9ls9q0s: /tmp/tmpo9ls9q0s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp_3ysc17m: /tmp/tmp_3ysc17m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        result.push_back(x[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpzmdbze5c: /tmp/tmpzmdbze5c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp6qk3d80h: /tmp/tmp6qk3d80h.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmppsil5pfi: /tmp/tmppsil5pfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); ++i) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmpws8vtnfd: /tmp/tmpws8vtnfd.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            continue;\n        }\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3utqqxp4: /tmp/tmp3utqqxp4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp7thqwuyo: /tmp/tmp7thqwuyo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        long num = x[i];\n        while (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 == 0) {\n                num /= 10;\n            } else {\n                break;\n            }\n        }\n        if (num == 0) {\n            res.push_back(x[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmpi7sqyx9f: /tmp/tmpi7sqyx9f.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp7thqwuyo: /tmp/tmp7thqwuyo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        res.push_back(x[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292699,
      "stdout": "",
      "stderr": "tmp7thqwuyo: /tmp/tmp7thqwuyo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> ans;\n    for (long i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292700,
      "stdout": "",
      "stderr": "tmp2w9jemdx: /tmp/tmp2w9jemdx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    std::sort(x.begin(), x.end());\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            result.push_back(x[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmppsil5pfi: /tmp/tmppsil5pfi.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) continue;\n        ans.push_back(x[i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292696,
      "stdout": "",
      "stderr": "tmp3u611c47: /tmp/tmp3u611c47.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(), x.end());\n    std::vector<long> res;\n    for (auto i : x) {\n        if (i % 2 == 0) continue;\n        res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n",
      "timestamp": 1664292701,
      "stdout": "",
      "stderr": "tmp4c9empxx: /tmp/tmp4c9empxx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>())' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}