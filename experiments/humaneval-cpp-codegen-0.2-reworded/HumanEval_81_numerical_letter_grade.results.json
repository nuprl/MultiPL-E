{
  "name": "HumanEval_81_numerical_letter_grade",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n",
  "tests": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp8w8elu8v: /tmp/tmp8w8elu8v.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa(grades.size());\n    for (int i = 0; i < grades.size(); ++i) {\n        gpa[i] = grades[i] / 4;\n    }\n    std::vector<std::string> result;\n    for (int i = 0; i < gpa.size(); ++i) {\n        if (gpa[i] >= 4) {\n            result.push_back(\"A+\");\n        } else if (gpa[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (gpa[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (gpa[i] >= 3) {\n            result.push_back(\"B+\");\n        } else if (gpa[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (gpa[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (gpa[i] >= 2) {\n            result.push_back(\"C+\");\n        } else if (gpa[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (gpa[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (gpa[i] >= 1) {\n            result.push_back(\"D+\");\n        } else if (gpa[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (gpa[i] >= 0.3) {\n            result.push_back(\"D-\");\n        } else if (gpa[i] >= 0) {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpc48_r_4_: /tmp/tmpc48_r_4_.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades;\n    for (auto i = 0; i < grades.size(); ++i) {\n        gpa_grades.push_back(grades[i]);\n    }\n    std::vector<std::string> letter_grades;\n    for (auto i = 0; i < gpa_grades.size(); ++i) {\n        if (gpa_grades[i] >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa_grades[i] >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa_grades[i] >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa_grades[i] >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa_grades[i] >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa_grades[i] >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa_grades[i] >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa_grades[i] >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa_grades[i] >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa_grades[i] >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa_grades[i] >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa_grades[i] >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmphl0i8x9o: /tmp/tmphl0i8x9o.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade < 0) {\n            result.push_back(\"D-\");\n        } else if (grade < 1) {\n            result.push_back(\"C-\");\n        } else if (grade < 2) {\n            result.push_back(\"B-\");\n        } else if (grade < 3) {\n            result.push_back(\"A-\");\n        } else if (grade < 4) {\n            result.push_back(\"A\");\n        } else if (grade < 5) {\n            result.push_back(\"B\");\n        } else if (grade < 6) {\n            result.push_back(\"C\");\n        } else if (grade < 7) {\n            result.push_back(\"D\");\n        } else if (grade < 8) {\n            result.push_back(\"E\");\n        } else {\n            result.push_back(\"A+\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp08nmhywp: /tmp/tmp08nmhywp.cpp:54: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa(grades.size());\n    std::vector<std::string> grades_str(grades.size());\n    for (int i = 0; i < grades.size(); ++i) {\n        gpa[i] = grades[i];\n    }\n    for (int i = 0; i < grades.size(); ++i) {\n        if (gpa[i] >= 4.0) {\n            grades_str[i] = \"A+\";\n        } else if (gpa[i] >= 3.7) {\n            grades_str[i] = \"A\";\n        } else if (gpa[i] >= 3.3) {\n            grades_str[i] = \"A-\";\n        } else if (gpa[i] >= 3.0) {\n            grades_str[i] = \"B+\";\n        } else if (gpa[i] >= 2.7) {\n            grades_str[i] = \"B\";\n        } else if (gpa[i] >= 2.3) {\n            grades_str[i] = \"B-\";\n        } else if (gpa[i] >= 2.0) {\n            grades_str[i] = \"C+\";\n        } else if (gpa[i] >= 1.7) {\n            grades_str[i] = \"C\";\n        } else if (gpa[i] >= 1.3) {\n            grades_str[i] = \"C-\";\n        } else if (gpa[i] >= 1.0) {\n            grades_str[i] = \"D+\";\n        } else if (gpa[i] >= 0.7) {\n            grades_str[i] = \"D\";\n        } else if (gpa[i] >= 0.0) {\n            grades_str[i] = \"D-\";\n        } else {\n            grades_str[i] = \"E\";\n        }\n    }\n    return grades_str;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpkkd3f4gl: /tmp/tmpkkd3f4gl.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades;\n    for (auto grade : grades) {\n        gpa_grades.push_back(grade);\n    }\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < gpa_grades.size(); i++) {\n        float gpa = gpa_grades[i];\n        if (gpa >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpa20n2ikt: /tmp/tmpa20n2ikt.cpp:65: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade < 0) {\n            result.push_back(\"D-\");\n        } else if (grade < 1) {\n            result.push_back(\"C-\");\n        } else if (grade < 2) {\n            result.push_back(\"B-\");\n        } else if (grade < 3) {\n            result.push_back(\"A-\");\n        } else if (grade < 4) {\n            result.push_back(\"A\");\n        } else if (grade < 5) {\n            result.push_back(\"B\");\n        } else if (grade < 6) {\n            result.push_back(\"C\");\n        } else if (grade < 7) {\n            result.push_back(\"D\");\n        } else {\n            result.push_back(\"A+\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpicta37ws: /tmp/tmpicta37ws.cpp:52: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplblqfucb: /tmp/tmplblqfucb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades;\n    for (float grade : grades) {\n        gpa_grades.push_back(grade);\n    }\n    std::vector<std::string> letter_grades;\n    for (float gpa : gpa_grades) {\n        if (gpa >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp6evso6n7: /tmp/tmp6evso6n7.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        gpa_grades[i] = grades[i] / 4.0;\n    }\n    std::vector<std::string> letter_grades(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        if (gpa_grades[i] >= 4.0) {\n            letter_grades[i] = \"A+\";\n        } else if (gpa_grades[i] >= 3.7) {\n            letter_grades[i] = \"A\";\n        } else if (gpa_grades[i] >= 3.3) {\n            letter_grades[i] = \"A-\";\n        } else if (gpa_grades[i] >= 3.0) {\n            letter_grades[i] = \"B+\";\n        } else if (gpa_grades[i] >= 2.7) {\n            letter_grades[i] = \"B\";\n        } else if (gpa_grades[i] >= 2.3) {\n            letter_grades[i] = \"B-\";\n        } else if (gpa_grades[i] >= 2.0) {\n            letter_grades[i] = \"C+\";\n        } else if (gpa_grades[i] >= 1.7) {\n            letter_grades[i] = \"C\";\n        } else if (gpa_grades[i] >= 1.3) {\n            letter_grades[i] = \"C-\";\n        } else if (gpa_grades[i] >= 1.0) {\n            letter_grades[i] = \"D+\";\n        } else if (gpa_grades[i] >= 0.7) {\n            letter_grades[i] = \"D\";\n        } else if (gpa_grades[i] >= 0.0) {\n            letter_grades[i] = \"D-\";\n        } else {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpeo1j08sl: /tmp/tmpeo1j08sl.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades(grades.size());\n    for (int i = 0; i < grades.size(); ++i) {\n        gpa_grades[i] = grades[i] / 4.0;\n    }\n    std::vector<std::string> letter_grades(grades.size());\n    for (int i = 0; i < grades.size(); ++i) {\n        if (gpa_grades[i] >= 4.0) {\n            letter_grades[i] = \"A+\";\n        } else if (gpa_grades[i] >= 3.7) {\n            letter_grades[i] = \"A\";\n        } else if (gpa_grades[i] >= 3.3) {\n            letter_grades[i] = \"A-\";\n        } else if (gpa_grades[i] >= 3.0) {\n            letter_grades[i] = \"B+\";\n        } else if (gpa_grades[i] >= 2.7) {\n            letter_grades[i] = \"B\";\n        } else if (gpa_grades[i] >= 2.3) {\n            letter_grades[i] = \"B-\";\n        } else if (gpa_grades[i] >= 2.0) {\n            letter_grades[i] = \"C+\";\n        } else if (gpa_grades[i] >= 1.7) {\n            letter_grades[i] = \"C\";\n        } else if (gpa_grades[i] >= 1.3) {\n            letter_grades[i] = \"C-\";\n        } else if (gpa_grades[i] >= 1.0) {\n            letter_grades[i] = \"D+\";\n        } else if (gpa_grades[i] >= 0.7) {\n            letter_grades[i] = \"D\";\n        } else if (gpa_grades[i] >= 0.0) {\n            letter_grades[i] = \"D-\";\n        } else {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpu1a76gyk: /tmp/tmpu1a76gyk.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades;\n    for(float grade : grades) {\n        gpa_grades.push_back(grade);\n    }\n    std::vector<std::string> letter_grades;\n    for(float gpa : gpa_grades) {\n        if(gpa >= 4.0) {\n            letter_grades.push_back(\"A+\");\n        } else if(gpa >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if(gpa >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if(gpa >= 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(gpa >= 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(gpa >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(gpa >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(gpa >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(gpa >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(gpa >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(gpa >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(gpa >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpyec9stm1: /tmp/tmpyec9stm1.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        gpa_grades[i] = grades[i] / 4.0;\n    }\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < gpa_grades.size(); i++) {\n        if (gpa_grades[i] >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa_grades[i] >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa_grades[i] >= 3.0) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa_grades[i] >= 2.7) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa_grades[i] >= 2.3) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa_grades[i] >= 2.0) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa_grades[i] >= 1.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa_grades[i] >= 1.3) {\n            letter_grades.push_back(\"D-\");\n        } else if (gpa_grades[i] >= 1.0) {\n            letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpu7c0zrud: /tmp/tmpu7c0zrud.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> sorted_grades = grades;\n    std::sort(sorted_grades.begin(), sorted_grades.end());\n    std::vector<std::string> result;\n    for (int i = 0; i < sorted_grades.size(); i++) {\n        if (sorted_grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (sorted_grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (sorted_grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (sorted_grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (sorted_grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (sorted_grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (sorted_grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (sorted_grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (sorted_grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (sorted_grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (sorted_grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (sorted_grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpr8ezjsa1: /tmp/tmpr8ezjsa1.cpp:62: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa;\n    for(auto i = 0; i < grades.size(); i++) {\n        gpa.push_back(grades[i]);\n    }\n    std::vector<std::string> result;\n    for(auto i = 0; i < gpa.size(); i++) {\n        if(gpa[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(gpa[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(gpa[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(gpa[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(gpa[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(gpa[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(gpa[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(gpa[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(gpa[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(gpa[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(gpa[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(gpa[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpi7h9ht69: /tmp/tmpi7h9ht69.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade < 0) {\n            result.push_back(\"D-\");\n        } else if (grade < 1) {\n            result.push_back(\"D\");\n        } else if (grade < 2) {\n            result.push_back(\"C\");\n        } else if (grade < 3) {\n            result.push_back(\"B\");\n        } else if (grade < 4) {\n            result.push_back(\"A\");\n        } else {\n            result.push_back(\"A+\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpxla2v7dt: /tmp/tmpxla2v7dt.cpp:46: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa;\n    for (float grade : grades) {\n        gpa.push_back(grade);\n    }\n    std::vector<std::string> result;\n    for (float gpa : gpa) {\n        if (gpa >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (gpa >= 3.7) {\n            result.push_back(\"A\");\n        } else if (gpa >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (gpa >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (gpa >= 2.7) {\n            result.push_back(\"B\");\n        } else if (gpa >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (gpa >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (gpa >= 1.7) {\n            result.push_back(\"C\");\n        } else if (gpa >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (gpa >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (gpa >= 0.7) {\n            result.push_back(\"D\");\n        } else if (gpa >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp06rz5vex: /tmp/tmp06rz5vex.cpp:64: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    if (grades.size() == 0) return res;\n    std::sort(grades.begin(), grades.end());\n    float grade_sum = 0;\n    for (int i = 0; i < grades.size(); ++i) {\n        grade_sum += grades[i];\n    }\n    float grade_average = grade_sum / grades.size();\n    if (grade_average >= 4.0) {\n        res.push_back(\"A+\");\n    } else if (grade_average >= 3.7) {\n        res.push_back(\"A\");\n    } else if (grade_average >= 3.3) {\n        res.push_back(\"A-\");\n    } else if (grade_average >= 3.0) {\n        res.push_back(\"B+\");\n    } else if (grade_average >= 2.7) {\n        res.push_back(\"B\");\n    } else if (grade_average >= 2.3) {\n        res.push_back(\"B-\");\n    } else if (grade_average >= 2.0) {\n        res.push_back(\"C+\");\n    } else if (grade_average >= 1.7) {\n        res.push_back(\"C\");\n    } else if (grade_average >= 1.3) {\n        res.push_back(\"C-\");\n    } else if (grade_average >= 1.0) {\n        res.push_back(\"D+\");\n    } else if (grade_average >= 0.7) {\n        res.push_back(\"D\");\n    } else if (grade_average >= 0.0) {\n        res.push_back(\"D-\");\n    } else {\n        res.push_back(\"E\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpm9hwxrt_: /tmp/tmpm9hwxrt_.cpp:65: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp8w8elu8v: /tmp/tmp8w8elu8v.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    if (grades.size() == 0) return res;\n    std::sort(grades.begin(), grades.end());\n    float total = 0;\n    for (int i = 0; i < grades.size(); i++) {\n        total += grades[i];\n    }\n    float average = total / grades.size();\n    if (average >= 4.0) {\n        res.push_back(\"A+\");\n    } else if (average >= 3.7) {\n        res.push_back(\"A\");\n    } else if (average >= 3.3) {\n        res.push_back(\"A-\");\n    } else if (average >= 3.0) {\n        res.push_back(\"B+\");\n    } else if (average >= 2.7) {\n        res.push_back(\"B\");\n    } else if (average >= 2.3) {\n        res.push_back(\"B-\");\n    } else if (average >= 2.0) {\n        res.push_back(\"C+\");\n    } else if (average >= 1.7) {\n        res.push_back(\"C\");\n    } else if (average >= 1.3) {\n        res.push_back(\"C-\");\n    } else if (average >= 1.0) {\n        res.push_back(\"D+\");\n    } else if (average >= 0.7) {\n        res.push_back(\"D\");\n    } else if (average >= 0.0) {\n        res.push_back(\"D-\");\n    } else {\n        res.push_back(\"E\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpvtxbgayj: /tmp/tmpvtxbgayj.cpp:65: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplblqfucb: /tmp/tmplblqfucb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplblqfucb: /tmp/tmplblqfucb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa(grades.size());\n    for (int i = 0; i < grades.size(); ++i) {\n        gpa[i] = grades[i];\n    }\n    std::sort(gpa.begin(), gpa.end());\n    std::vector<std::string> result;\n    for (int i = 0; i < gpa.size(); ++i) {\n        if (gpa[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (gpa[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (gpa[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (gpa[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (gpa[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (gpa[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (gpa[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (gpa[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (gpa[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (gpa[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (gpa[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (gpa[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmp4ciqkb8d: /tmp/tmp4ciqkb8d.cpp:65: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade < 0.7) {\n            result.push_back(\"D-\");\n        } else if (grade < 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade < 2.0) {\n            result.push_back(\"B-\");\n        } else if (grade < 2.7) {\n            result.push_back(\"B\");\n        } else if (grade < 3.0) {\n            result.push_back(\"A-\");\n        } else if (grade < 3.3) {\n            result.push_back(\"A\");\n        } else if (grade < 3.7) {\n            result.push_back(\"A+\");\n        } else {\n            result.push_back(\"A+\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp9j59c6td: /tmp/tmp9j59c6td.cpp:50: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        gpa_grades[i] = grades[i] / 4;\n    }\n    std::vector<std::string> letter_grades(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        if (gpa_grades[i] >= 3.7) {\n            letter_grades[i] = \"A\";\n        } else if (gpa_grades[i] >= 3.3) {\n            letter_grades[i] = \"A-\";\n        } else if (gpa_grades[i] >= 3.0) {\n            letter_grades[i] = \"B\";\n        } else if (gpa_grades[i] >= 2.7) {\n            letter_grades[i] = \"B-\";\n        } else if (gpa_grades[i] >= 2.3) {\n            letter_grades[i] = \"C\";\n        } else if (gpa_grades[i] >= 2.0) {\n            letter_grades[i] = \"C-\";\n        } else if (gpa_grades[i] >= 1.7) {\n            letter_grades[i] = \"D\";\n        } else if (gpa_grades[i] >= 1.3) {\n            letter_grades[i] = \"D-\";\n        } else if (gpa_grades[i] >= 1.0) {\n            letter_grades[i] = \"E\";\n        } else {\n            letter_grades[i] = \"F\";\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpk7u0ehnd: /tmp/tmpk7u0ehnd.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade < 0.0) {\n            result.push_back(\"D-\");\n        } else if (grade < 1.0) {\n            result.push_back(\"C-\");\n        } else if (grade < 2.0) {\n            result.push_back(\"B-\");\n        } else if (grade < 3.0) {\n            result.push_back(\"A-\");\n        } else if (grade < 4.0) {\n            result.push_back(\"A+\");\n        } else {\n            result.push_back(\"A+\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpi98m31a3: /tmp/tmpi98m31a3.cpp:46: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplblqfucb: /tmp/tmplblqfucb.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> res;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            res.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            res.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            res.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            res.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            res.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            res.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            res.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            res.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            res.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            res.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            res.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            res.push_back(\"D-\");\n        } else {\n            res.push_back(\"E\");\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpeoh5b0rz: /tmp/tmpeoh5b0rz.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpenzoutyu: /tmp/tmpenzoutyu.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades(grades.size());\n    for (int i = 0; i < grades.size(); i++) {\n        gpa_grades[i] = grades[i] / 4;\n    }\n    std::vector<std::string> letter_grades;\n    for (int i = 0; i < gpa_grades.size(); i++) {\n        if (gpa_grades[i] >= 3.7) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa_grades[i] >= 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa_grades[i] >= 3.0) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa_grades[i] >= 2.7) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa_grades[i] >= 2.3) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa_grades[i] >= 2.0) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa_grades[i] >= 1.7) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa_grades[i] >= 1.3) {\n            letter_grades.push_back(\"D-\");\n        } else if (gpa_grades[i] >= 1.0) {\n            letter_grades.push_back(\"E\");\n        } else {\n            letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpjgkpopjr: /tmp/tmpjgkpopjr.cpp:58: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> sorted_grades = grades;\n    std::sort(sorted_grades.begin(), sorted_grades.end());\n    std::vector<std::string> result;\n    for (int i = 0; i < sorted_grades.size(); i++) {\n        if (sorted_grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (sorted_grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (sorted_grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (sorted_grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (sorted_grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (sorted_grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (sorted_grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (sorted_grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (sorted_grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (sorted_grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (sorted_grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (sorted_grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpr8ezjsa1: /tmp/tmpr8ezjsa1.cpp:62: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp2tfd4iz8: /tmp/tmp2tfd4iz8.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<float> gpa_grades;\n    std::vector<std::string> grades_letter_grade;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            gpa_grades.push_back(grades[i]);\n            grades_letter_grade.push_back(\"D+\");\n        } else if (grades[i] >=\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "/tmp/tmpaduesf4s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char> > numerical_letter_grade(std::vector<float>)\u2019:\n/tmp/tmpaduesf4s.cpp:60:1: error: expected primary-expression before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpaduesf4s.cpp:59:32: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   59 |         } else if (grades[i] >=\n      |                   ~            ^\n      |                                )\n   60 | }\n      | ~                               \n/tmp/tmpaduesf4s.cpp:60:1: error: expected primary-expression before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpaduesf4s.cpp:61:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   61 | int main() {\n      |            ^\n/tmp/tmpaduesf4s.cpp:69:1: error: expected \u2018}\u2019 at end of input\n   69 | }\n      | ^\n/tmp/tmpaduesf4s.cpp:25:76: note: to match this \u2018{\u2019\n   25 | std::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n      |                                                                            ^\n/tmp/tmpaduesf4s.cpp:69:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   69 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade < 0) {\n            result.push_back(\"D-\");\n        } else if (grade < 1) {\n            result.push_back(\"C-\");\n        } else if (grade < 2) {\n            result.push_back(\"B-\");\n        } else if (grade < 3) {\n            result.push_back(\"A-\");\n        } else if (grade < 4) {\n            result.push_back(\"A\");\n        } else if (grade < 5) {\n            result.push_back(\"B\");\n        } else if (grade < 6) {\n            result.push_back(\"C\");\n        } else if (grade < 7) {\n            result.push_back(\"D\");\n        } else {\n            result.push_back(\"A+\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpicta37ws: /tmp/tmpicta37ws.cpp:52: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for (float grade : grades) {\n        if (grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if (grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if (grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if (grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if (grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdumdq5xx: /tmp/tmpdumdq5xx.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grades[i] >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grades[i] >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grades[i] >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grades[i] >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grades[i] >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grades[i] >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grades[i] >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grades[i] >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grades[i] >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grades[i] >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grades[i] >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmplrgllj_z: /tmp/tmplrgllj_z.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> result;\n    for(float grade : grades) {\n        if(grade >= 4.0) {\n            result.push_back(\"A+\");\n        } else if(grade >= 3.7) {\n            result.push_back(\"A\");\n        } else if(grade >= 3.3) {\n            result.push_back(\"A-\");\n        } else if(grade >= 3.0) {\n            result.push_back(\"B+\");\n        } else if(grade >= 2.7) {\n            result.push_back(\"B\");\n        } else if(grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if(grade >= 2.0) {\n            result.push_back(\"C+\");\n        } else if(grade >= 1.7) {\n            result.push_back(\"C\");\n        } else if(grade >= 1.3) {\n            result.push_back(\"C-\");\n        } else if(grade >= 1.0) {\n            result.push_back(\"D+\");\n        } else if(grade >= 0.7) {\n            result.push_back(\"D\");\n        } else if(grade >= 0.0) {\n            result.push_back(\"D-\");\n        } else {\n            result.push_back(\"E\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5, (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0, (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmp79lnrzjk: /tmp/tmp79lnrzjk.cpp:60: int main(): Assertion `candidate((std::vector<float>({(float)4.0, (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}