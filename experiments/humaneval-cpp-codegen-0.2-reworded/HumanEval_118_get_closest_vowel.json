{
  "name": "HumanEval_118_get_closest_vowel",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nstd::string get_closest_vowel(std::string word) {\n",
  "tests": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n",
  "completions": [
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0) {\n                result = \"\";\n                break;\n            }\n            if (i == word.size() - 1) {\n                result = \"\";\n                break;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n            if (vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n        } else if (consonants.find(word[j]) != std::string::npos) {\n            j++;\n        } else {\n            break;\n        }\n    }\n    if (i == word.size() || j == word.size()) {\n        return \"\";\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (i > 0 && consonants.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n            else if (i < word.size() - 1 && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    i++;\n    while (i < word.length() && consonants.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    i++;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    if (j == -1) {\n        return \"\";\n    }\n    return word[j + 1];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = 0;\n    while (i < word.length() && j < word.length()) {\n        if (vowels.find(word[j]) != std::string::npos) {\n            i = j;\n        }\n        else if (vowels.find(word[i]) != std::string::npos) {\n            j = i;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    if (i == word.length() || j == word.length()) {\n        return \"\";\n    }\n    else {\n        return word[i];\n    }",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = word.length() - 1;\n    while (i >= 0 && vowels.find(word[i]) == std::string::npos) {\n        i--;\n    }\n    if (i < 0) {\n        return \"\";\n    }\n    int j = i + 1;\n    while (j < word.length() && vowels.find(word[j]) == std::string::npos) {\n        j++;\n    }\n    return word[i] + word[j];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    int i = 0;\n    while (i < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        else if (consonants.find(word[i]) != std::string::npos) {\n            i++;\n        }\n        else {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    if (j == -1) {\n        return \"\";\n    }\n    return word[i] + word[j];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0) {\n                result = \"\";\n                break;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string res;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            res = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                res = word[i];\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.length() - 1) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            break;\n        }\n        i++;\n    }\n    if (i == word.length() - 1) {\n        return \"\";\n    }\n    int j = word.length() - 1;\n    while (j >= i) {\n        if (vowels.find(word[j]) != std::string::npos) {\n            return word[j];\n        }\n        j--;\n    }\n    return \"\";",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (j == 0) {\n                result = word[i];\n                j++;\n            }\n            else {\n                result = \"\";\n                break;\n            }\n        }\n        else if (consonants.find(word[i]) != std::string::npos) {\n            if (j == 0) {\n                result = \"\";\n                break;\n            }\n            else {\n                result = \"\";\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string res;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            res = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return res;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            j = i;\n            break;\n        }\n        i++;\n    }\n    while (j < word.size()) {\n        if (vowels.find(word[j]) != std::string::npos) {\n            return word.substr(j, 1);\n        }\n        if (consonants.find(word[j]) != std::string::npos) {\n            break;\n        }\n        j++;\n    }\n    return \"\";",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && consonants.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' ? word[i] : word[j];",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' ? word[i] : word[j];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n            if (i < word.length() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (i > 0 && consonants.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n            if (i < word.size() - 1 && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    i++;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string res = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            res = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                res = word[i];\n                break;\n            }\n        }\n    }\n    return res;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    int j = word.length() - 1;\n    while (j >= 0 && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' ? word[i] : word[j];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n        } else if (consonants.find(word[j]) != std::string::npos) {\n            j++;\n        } else {\n            return \"\";\n        }\n    }\n    return word.substr(i, 1);",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (i < word.size() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            j = i + 1;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == word.size()) {\n        return \"\";\n    }\n    else {\n        return word[j];\n    }",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int count = 0;\n    while (i < word.length()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            count++;\n            if (count == 1) {\n                i++;\n                continue;\n            }\n            if (count == 2) {\n                i++;\n                continue;\n            }\n            if (count == 3) {\n                i++;\n                continue;\n            }\n            if (count == 4) {\n                i++;\n                continue;\n            }\n            if (count == 5) {\n                i++;\n                continue;\n            }\n            if (count == 6) {\n                i++;\n                continue;\n            }\n            if (count == 7) {\n                i++;\n                continue;\n            }\n            if (count == 8) {\n                i++;\n                continue;\n            }\n            if (count == 9) {\n                i++;\n                continue;\n            }\n            if (count == 10) {\n                i++;\n                continue;\n            }\n            if (count == 11) {\n                i++;\n                continue;\n            }\n            if (count == 12) {\n                i++;\n                continue;\n            }\n            if (count == 13) {\n                i++;\n                continue;\n            }\n            if (count == 14) {\n                i++;\n                continue;\n            }\n            if (count == 15) {",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n        } else if (consonants.find(word[j]) != std::string::npos) {\n            j++;\n        } else {\n            return \"\";\n        }\n    }\n    return word.substr(i, 1);",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            result = \"\";\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n        } else if (consonants.find(word[j]) != std::string::npos) {\n            j++;\n        } else {\n            break;\n        }\n    }\n    if (i == word.size() || j == word.size()) {\n        return \"\";\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && consonants.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    if (j == -1) {\n        return \"\";\n    }\n    std::string result = \"\";\n    while (i <= j) {\n        if (vowels.find(word[i]) != std::string::npos && vowels.find(word[j]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        i++;\n        j--;\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    while (i < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n            continue;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            j = i;\n            while (j < word.size() && vowels.find(word[j]) == std::string::npos) {\n                j++;\n            }\n            if (j - i > 1) {\n                k = j - 1;\n                while (k > i && consonants.find(word[k]) == std::string::npos) {\n                    k--;\n                }\n                if (k - i > 1) {\n                    l = k - 1;\n                    while (l > i && consonants.find(word[l]) == std::string::npos) {\n                        l--;\n                    }\n                    if (l - i > 1) {\n                        m = l - 1;\n                        while (m > i && consonants.find(word[m]) == std::string::npos) {\n                            m--;\n                        }\n                        if (m - i > 1) {\n                            n = m - 1;\n                            while (n > i && consonants.find(word[n]) == std::string::npos) {\n                                n--;\n                            }\n                            if (n - i > 1) {\n",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (i < word.size() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            j = i;\n            k = i + 1;\n            while (k < word.size() && consonants.find(word[k]) != std::string::npos) {\n                k++;\n            }\n            if (k - j > 1) {\n                return word.substr(j + 1, k - j - 1);\n            }\n        }\n        i++;\n    }\n    return \"\";",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    int i = 0;\n    while (i < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            i++;\n        } else {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (i < word.size() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                result = \"\";\n                break;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (size_t i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word[i] + word[j];",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= 0 && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word.substr(i, j - i + 1);",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (vowels.find(word[i - 1]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (vowels.find(word[i + 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    i++;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 1) {\n                result = \"\";\n                break;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            result = \"\";\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            k = i;\n            while (j < word.size() && consonants.find(word[j]) != std::string::npos) {\n                j++;\n            }\n            if (j == word.size()) {\n                return word.substr(k, 1);\n            }\n        }\n        i++;\n    }\n    return \"\";",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.size() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.size()) {\n        return \"\";\n    }\n    int j = word.size() - 1;\n    while (j >= i && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word.substr(i, j - i + 1);",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    int i = 0;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    int j = word.length() - 1;\n    while (j >= i && vowels.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word.substr(i, j - i + 1);",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.length() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.length() && j < word.length()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n        } else if (consonants.find(word[j]) != std::string::npos) {\n            j++;\n        } else {\n            return \"\";\n        }\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    while (i < word.length() && vowels.find(word[i]) == std::string::npos) {\n        i++;\n    }\n    if (i == word.length()) {\n        return \"\";\n    }\n    int j = word.length() - 1;\n    while (j >= 0 && consonants.find(word[j]) == std::string::npos) {\n        j--;\n    }\n    return word.substr(i, j - i + 1);",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    int i = 0;\n    int j = 0;\n    while (i < word.size() && j < word.size()) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            i++;\n        } else if (consonants.find(word[j]) != std::string::npos) {\n            j++;\n        } else {\n            break;\n        }\n    }\n    if (i == word.size() || j == word.size()) {\n        return \"\";\n    }\n    return word[i];",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result = \"\";\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i == 0 || i == word.size() - 1) {\n                continue;\n            }\n            if (vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (i < word.length() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.size(); ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (i < word.size() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.length() - 1; ++i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 1; i < word.size() - 1; i++) {\n        if (vowels.find(word[i]) != std::string::npos && consonants.find(word[i - 1]) != std::string::npos && consonants.find(word[i + 1]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;",
    "    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    std::string result;\n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            result = word[i];\n            break;\n        }\n        if (consonants.find(word[i]) != std::string::npos) {\n            if (i > 0 && vowels.find(word[i - 1]) != std::string::npos) {\n                result = word[i - 1];\n                break;\n            }\n            if (i < word.length() - 1 && vowels.find(word[i + 1]) != std::string::npos) {\n                result = word[i + 1];\n                break;\n            }\n        }\n    }\n    return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}