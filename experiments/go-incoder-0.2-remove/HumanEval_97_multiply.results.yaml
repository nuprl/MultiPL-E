language: go_test.go
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_jqngq85_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_jqngq85_test.go:36:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += int(b / 10)\n        b = b % 10\n    }\n\
    \    for i := 0; i < b; i++ {\n        c += int(a / 10)\n        a = a % 10\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8g_paj2w_test.go:51: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8g_paj2w_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8g_paj2w_test.go:51: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8g_paj2w_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8g_paj2w_test.go:51: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8g_paj2w_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n        return a\
    \ * b\n    }\n    return -1\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpvzd6fg9i_test.go:48: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpvzd6fg9i_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpvzd6fg9i_test.go:48: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpvzd6fg9i_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpvzd6fg9i_test.go:48: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpvzd6fg9i_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    c := 0\n\
    \    \n    if a > 0 && b > 0 {\n        c = a / b\n    }\n    \n    if a > 0 &&\
    \ b < 0 {\n        c = -a / b\n    }\n    \n    if a < 0 && b > 0 {\n        c\
    \ = -a * b\n    }\n    \n    if a < 0 && b < 0 {\n        c = a * b\n    }\n \
    \   \n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpagf867me_test.go:61: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpagf867me_test.go:61:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpagf867me_test.go:61: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpagf867me_test.go:61:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpagf867me_test.go:61: expected '%!s(int=42)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpagf867me_test.go:61:\
    \ expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    product\
    \ := 0\n    \n    // Multiply each digit of the units until we reach the \n  \
    \  // least significant digit.\n    for i := 0; i < a; i++ {\n        product\
    \ *= 10\n        product += a%10\n        a /= 10\n    }\n    \n    for i := 0;\
    \ i < b; i++ {\n        product *= 10\n        product += b%10\n        b /= 10\n\
    \    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp0oex9j0u_test.go:59: expected '%!s(int=16)', got '%!s(int=84214)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp0oex9j0u_test.go:59:\
    \ expected '%!s(int=72)', got '%!s(int=982)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp0oex9j0u_test.go:59: expected '%!s(int=0)', got '%!s(int=20158)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp0oex9j0u_test.go:59:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp0oex9j0u_test.go:59: expected '%!s(int=42)', got '%!s(int=6776)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp0oex9j0u_test.go:59:\
    \ expected '%!s(int=49)', got '%!s(int=772)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    c\
    \ := 0\n    \n    for i := 0; i < a; i++ {\n        c += b%10\n        b = b /\
    \ 10\n    }\n    \n    for i := 0; i < b; i++ {\n        c += a%10\n        a\
    \ = a / 10\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6581098s_test.go:56: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6581098s_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp6581098s_test.go:56: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp6581098s_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp6581098s_test.go:56: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp6581098s_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult\
    \ *= 10\n        mult += a%10\n        a /= 10\n    }\n    \n    for i := 0; i\
    \ < b; i++ {\n        mult *= 10\n        mult += b%10\n        b /= 10\n    }\n\
    \    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6bl42618_test.go:54: expected '%!s(int=16)', got '%!s(int=84214)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6bl42618_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=982)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp6bl42618_test.go:54: expected '%!s(int=0)', got '%!s(int=20158)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp6bl42618_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp6bl42618_test.go:54: expected '%!s(int=42)', got '%!s(int=6776)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp6bl42618_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=772)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp6bl42618_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a > b {\n \
    \       a, b = b, a\n    }\n    c := 0\n    for i := 0; i < a; i++ {\n       \
    \ c += (b % 10) * 10\n        b = b / 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp6cvf8g5t_test.go:50: expected '%!s(int=16)', got '%!s(int=70)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp6cvf8g5t_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp6cvf8g5t_test.go:50: expected '%!s(int=0)', got '%!s(int=40)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp6cvf8g5t_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp6cvf8g5t_test.go:50: expected '%!s(int=42)', got '%!s(int=130)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp6cvf8g5t_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.012s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a > 0 && b > 0 {\n        c := 0\n \
    \       for i := 0; i < a; i++ {\n            c += b%10\n            b = b / 10\n\
    \        }\n        return c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuil20ryn_test.go:44: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuil20ryn_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpuil20ryn_test.go:44: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpuil20ryn_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpuil20ryn_test.go:44: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpuil20ryn_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpl7z65095_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpl7z65095_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpl7z65095_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpl7z65095_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpl7z65095_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    for i := 0; i < 10; i++ {\n        product\
    \ += a%10 * b%10\n        a = a/10\n        b = b/10\n    }\n    \n    return\
    \ product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpw3zyioop_test.go:48: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpw3zyioop_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpw3zyioop_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpw3zyioop_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpw3zyioop_test.go:48: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpw3zyioop_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult\
    \ *= 10\n        mult += b%10\n        b /= 10\n    }\n    \n    return mult %\
    \ 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp30unl93w_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp30unl93w_test.go:48:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    c := 0\n    \n    if a > 0 {\n        c = c + (a % 10)*(b %\
    \ 10)\n        a = a / 10\n        b = b / 10\n    }\n    \n    if b > 0 {\n \
    \       c = c + (a % 10)*(b % 10)\n        a = a / 10\n        b = b / 10\n  \
    \  }\n    \n    if a > 0 {\n        c = c + (a % 10)*(b % 10)\n        a = a /\
    \ 10\n        b = b / 10\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpjn018ebj_test.go:60: expected '%!s(int=16)', got '%!s(int=24)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjn018ebj_test.go:60:\
    \ expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpjn018ebj_test.go:60: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjn018ebj_test.go:60:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpjn018ebj_test.go:60: expected '%!s(int=42)', got '%!s(int=84)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjn018ebj_test.go:60:\
    \ expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n \
    \       c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kef17qp_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp6kef17qp_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp6kef17qp_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp6kef17qp_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    result :=\
    \ 0\n    \n    // The first digit of the product is the sum of the first two digits\n\
    \    // of the two numbers.\n    result += (a / 10) * (b / 10)\n    \n    // The\
    \ second digit of the product is the sum of the next two digits\n    // of the\
    \ two numbers.\n    result += (a % 10) * (b % 10)\n    \n    // The third digit\
    \ of the product is the sum of the next two digits\n    // of the two numbers.\n\
    \    result += (a % 10) * (b % 10)\n    \n    // The fourth digit of the product\
    \ is the sum of the next two digits\n    // of the two numbers.\n    result +=\
    \ (a % 10) * (b % 10)\n    \n    // The fifth digit of the product is the sum\
    \ of the next two digits\n    // of the two numbers.\n    result += (a % 10) *\
    \ (b % 10)\n    \n    // The sixth digit of the product is the sum of the next\
    \ two digits\n    // of the two numbers.\n    result += (a % 10) * (b % 10)\n\
    \    \n    // The seventh digit of the product is the sum of the next two digits\n\
    \    // of the two numbers.\n    result += (a % 10) * (b % 10)\n    \n    // The\
    \ eighth digit of the product is the sum of the next two digits\n    // of the\
    \ two numbers.\n    result += (a % 10) * (b % 10)\n    \n    // The ninth digit\
    \ of the product is the sum of the next two digits\n    // of the two numbers.\n\
    \    result += (a % 10) * (b % 10)\n    \n    // The tenth digit of the product\
    \ is the sum of the next two digits\n    // of the two numbers.\n    result +=\
    \ (a % 10) * (b % 10)\n    \n    // The eleventh digit of the product is the sum\
    \ of the next two digits\n    // of the two numbers.\n    result += (a % 10) *\
    \ (b % 10)\n    \n    // The twelfth digit of the product is the sum of the next\
    \ two digits\n    // of the two numbers.\n    result += (a % 10) * (b % 10)\n\
    \    \n    // The thirteenth digit of the product is the sum of the next two digits\n\
    \    // of the two numbers.\n    result += (a % 10) * (b % 10)\n    \n    // The\
    \ fourteenth digit of the product is the sum of the next two digits\n    // of\
    \ the two numbers.\n    result += (a % 10) * (b % 10)\n    \n    // The fifteenth\
    \ digit of the product is the sum of the next two digits\n    // of the two numbers.\n\
    \    result += (a % 10\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptywo1c3f_test.go:80:22: expected '')'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a%10\
    \ * b%10\n    }\n    \n    if a > 0 && b < 0 {\n        mult += a%10 * b\n   \
    \ }\n    \n    if a < 0 && b > 0 {\n        mult += a * b%10\n    }\n    \n  \
    \  if a < 0 && b < 0 {\n        mult += a * b\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpbgh8semy_test.go:58: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbgh8semy_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpbgh8semy_test.go:58: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpbgh8semy_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpbgh8semy_test.go:58: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    // Initialize result to 0\n    var result int = 0\n    \n  \
    \  // Iterate through each digit in both numbers\n    for i := 0; i < len(a) &&\
    \ i < len(b); i++ {\n        // Multiply result by 10\n        result *= 10\n\
    \        \n        // Add digit of first number to the result\n        result\
    \ += (a % 10) * b / 10\n        \n        // Remove first digit of first number\n\
    \        a = a / 10\n        \n        // Add digit of second number to the result\n\
    \        result += (a % 10) * b / 10\n    }\n    \n    // Return result\n    return\
    \ result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps5hej4m0_test.go:21:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmps5hej4m0_test.go:21:39: invalid argument: b (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult\
    \ *= 10\n        mult += b%10\n        b = b/10\n    }\n    \n    return mult\
    \ % 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpg_d7snaa_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpg_d7snaa_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpg_d7snaa_test.go:48: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpg_d7snaa_test.go:48:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpg_d7snaa_test.go:48: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfphly0u7_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpfphly0u7_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += (b % 10) * 10\n        b = b // 10\n    }\n\
    \    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpl47bk96f_test.go:47: expected '%!s(int=16)', got '%!s(int=2960)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpl47bk96f_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=1520)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpl47bk96f_test.go:47: expected '%!s(int=0)', got '%!s(int=20200)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpl47bk96f_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpl47bk96f_test.go:47: expected '%!s(int=42)', got '%!s(int=5320)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpl47bk96f_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=1190)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n\
    \    }\n    c := 0\n    for i := 0; i < a; i++ {\n        c += b%10\n        b\
    \ /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp1lqaht9j_test.go:44: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp1lqaht9j_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp1lqaht9j_test.go:44: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp1lqaht9j_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp1lqaht9j_test.go:44: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp1lqaht9j_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.011s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    c := 0\n    for i := 0; i < a; i++ {\n        c += b\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpe08jio25_test.go:43: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpe08jio25_test.go:43:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpe08jio25_test.go:43: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpe08jio25_test.go:43:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpe08jio25_test.go:43: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpe08jio25_test.go:43:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        if a > 9 || b > 9 {\n            return -1\n        }\n        c += a%10\
    \ * b%10\n        a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpxd5ldwcn_test.go:45: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxd5ldwcn_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpxd5ldwcn_test.go:45: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxd5ldwcn_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpxd5ldwcn_test.go:45: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxd5ldwcn_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 &&\
    \ b == 0 {\n        return 1\n    }\n    if a > 0 && b == 0 {\n        return\
    \ a\n    }\n    if a == 0 && b > 0 {\n        return b\n    }\n    return -1\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpwovbzb_k_test.go:51: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpwovbzb_k_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpwovbzb_k_test.go:51: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpwovbzb_k_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpwovbzb_k_test.go:51: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpwovbzb_k_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpwovbzb_k_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__7 (0.00s)\n        tmpwovbzb_k_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        c += int(b[i]) * int(a[i])\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6hnyti9j_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp6hnyti9j_test.go:19:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp6hnyti9j_test.go:19:31: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += b%10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpl1ybzfde_test.go:47: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpl1ybzfde_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpl1ybzfde_test.go:47: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpl1ybzfde_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpl1ybzfde_test.go:47: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpl1ybzfde_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    mult :=\
    \ 0\n    \n    // Multiply each digit of A by each digit of B\n    for i := 0;\
    \ i < len(a); i++ {\n        mult *= 10\n        mult += a[i]\n    }\n    \n \
    \   for i := 0; i < len(b); i++ {\n        mult *= 10\n        mult += b[i]\n\
    \    }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp191vx1nx_test.go:23:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp191vx1nx_test.go:25:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp191vx1nx_test.go:28:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp191vx1nx_test.go:30:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    \n    mult := 0\n\
    \    \n    for i := 0; i < 10; i++ {\n        mult *= 10\n        mult += a%10\
    \ * b%10\n        a /= 10\n        b /= 10\n    }\n    \n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpf1bdppj7_test.go:52: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpf1bdppj7_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpf1bdppj7_test.go:52: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpf1bdppj7_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpf1bdppj7_test.go:52: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpf1bdppj7_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a < 10 {\n        return a * b\n    }\n    if b < 10 {\n      \
    \  return a * b\n    }\n    if a < 100 {\n        return a * b\n    }\n    if\
    \ b < 100 {\n        return a * b\n    }\n    if a < 1000 {\n        return a\
    \ * b\n    }\n    if b < 1000 {\n        return a * b\n    }\n    if a < 10000\
    \ {\n        return a * b\n    }\n    if b < 10000 {\n        return a * b\n \
    \   }\n    if a < 100000 {\n        return a * b\n    }\n    if b < 100000 {\n\
    \        return a * b\n    }\n    if a < 1000000 {\n        return a * b\n   \
    \ }\n    if b < 1000000 {\n        return a * b\n    }\n    if a < 10000000 {\n\
    \        return a * b\n    }\n    if b < 10000000 {\n        return a * b\n  \
    \  }\n    if a < 100000000 {\n        return a * b\n    }\n    if b < 100000000\
    \ {\n        return a * b\n    }\n    if a < 1000000000 {\n        return a *\
    \ b\n    }\n    if b < 1000000000 {\n        return a * b\n    }\n    if a < 10000000000\
    \ {\n        return a * b\n    }\n    if b < 10000000000 {\n        return a *\
    \ b\n    }\n    if a < 100000000000 {\n        return a * b\n    }\n    if b <\
    \ 100000000000 {\n        return a * b\n    }\n    if a < 1000000000000 {\n  \
    \      return a * b\n    }\n    if b < 1000000000000 {\n        return a * b\n\
    \    }\n    if a < 10000000000000 {\n        return a * b\n    }\n    if b < 10000000000000\
    \ {\n        return a * b\n    }\n    if a < 100000000000000 {\n        return\
    \ a * b\n    }\n    if b < 100000000000000 {\n        return a * b\n    }\n  \
    \  if a < 1000000000000000 {\n        return a * b\n    }\n    if b < 1000000000000000\
    \ {\n        return a * b\n    }\n    if a < 10000000000000000 {\n        return\
    \ a * b\n    }\n    if b < 10000000000000000 {\n        return a * b\n    }\n\
    \    if a < 100000000000000000 {\n        return a * b\n    }\n    if b < 100000000000000000\
    \ {\n        return a * b\n    }\n    if a < 1000000000000000000 {\n        return\
    \ a * b\n    }\n    if b < 1000000000000000000 {\n        return a * b\n    }\n\
    \    if a < 10000000000000000000 {\n        return a * b\n    }\n    if b < 10000000000000000000\
    \ {\n        return a * b\n    }\n    if a < 100000000000000000000 {\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4ef6qefl_test.go:131:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < len(a); i++ {\n       \
    \ mult *= 10\n        mult += a[i]\n    }\n    \n    for i := 0; i < len(b); i++\
    \ {\n        mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hwqognd_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4hwqognd_test.go:21:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4hwqognd_test.go:24:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4hwqognd_test.go:26:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n\
    \    }\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n\
    \    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o\
    \ := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n\
    \    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch\
    \ {\n    case a > 0 && b > 0:\n        c = a / b\n        d += a % b\n    case\
    \ a > 0 && b == 0:\n        c = a\n    case a > 0 && b < 0:\n        c = a\n \
    \       d = -b\n    case a < 0 && b > 0:\n        c = -a\n        d = -b\n   \
    \ case a < 0 && b < 0:\n        c = -a\n        d = b\n    case a < 0 && b ==\
    \ 0:\n        c = -a\n        d = b\n    case a < 0 && b < 0:\n        c = -a\n\
    \        d = -b\n    case a > 0 && b > 0:\n        c = a / b\n        d += a %\
    \ b\n    case a > 0 && b == 0:\n        c = a\n    case a > 0 && b < 0:\n    \
    \    c = a\n        d = -b\n    case a < 0 && b > 0:\n        c = -a\n       \
    \ d = -b\n    case a < 0 && b < 0:\n        c = -a\n        d = b\n    case a\
    \ < 0 && b == 0:\n        c = -a\n        d = b\n    case a < 0 && b < 0:\n  \
    \      c = -a\n        d = -b\n    case a > 0 && b > 0:\n        c = a / b\n \
    \       d += a % b\n    case a > 0 && b == 0:\n        c = a\n    case a > 0 &&\
    \ b < 0:\n        c = a\n        d = -b\n    case a < 0 && b > 0:\n        c =\
    \ -a\n        d = -b\n    case a < 0 && b < 0:\n        c = -a\n        d = b\n\
    \    case a < 0 && b == 0:\n        c = -a\n        d = b\n    case a < 0 && b\
    \ < 0:\n        c = -a\n        d = -b\n    case a > 0 && b > 0:\n        c =\
    \ a / b\n        d += a % b\n    case a > 0 && b == 0:\n        c = a\n    case\
    \ a > 0 && b < 0:\n        c = a\n        d = -b\n    case a < 0 && b > 0:\n \
    \       c = -a\n        d = -b\n    case a < 0 && b < 0:\n        c = -a\n   \
    \     d = b\n    case a < 0 && b == 0:\n        c = -a\n        d = b\n    case\
    \ a < 0 && b < 0:\n        c = -a\n        d = -b\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpawoj6z91_test.go:122:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a > 0 && b > 0 {\n        c := 0\n \
    \       for i := 0; i < a; i++ {\n            c += b%10\n            b = b / 10\n\
    \        }\n        return c\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuil20ryn_test.go:44: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuil20ryn_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpuil20ryn_test.go:44: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpuil20ryn_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpuil20ryn_test.go:44: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpuil20ryn_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    if a > 0 {\n        product += a % 10\
    \ * b / 10\n    }\n    \n    if b > 0 {\n        product += b % 10 * a / 10\n\
    \    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpmqluu016_test.go:50: expected '%!s(int=16)', got '%!s(int=358)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmqluu016_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=40)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpmqluu016_test.go:50: expected '%!s(int=0)', got '%!s(int=202)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpmqluu016_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpmqluu016_test.go:50: expected '%!s(int=42)', got '%!s(int=93)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpmqluu016_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=29)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < len(a); i++ {\n       \
    \ mult *= 10\n        mult += a[i]\n    }\n    \n    for i := 0; i < len(b); i++\
    \ {\n        mult *= 10\n        mult += b[i]\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hwqognd_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4hwqognd_test.go:21:18: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4hwqognd_test.go:24:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4hwqognd_test.go:26:18: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    // Multiply each digit of the unit digits\
    \ of a and b.\n    // The product of the unit digits is stored in product.\n \
    \   for i := 0; i < len(a); i++ {\n        product *= 10\n        product += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        product *= 10\n     \
    \   product += b[i]\n    }\n    \n    return product\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5jff40do_test.go:21:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp5jff40do_test.go:23:21: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp5jff40do_test.go:26:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp5jff40do_test.go:28:21: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := a; i >= 0;\
    \ i-- {\n        c += int(b / 10)\n        b = b % 10\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpoh02fbg9_test.go:45: expected '%!s(int=16)', got '%!s(int=41)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpoh02fbg9_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpoh02fbg9_test.go:45: expected '%!s(int=0)', got '%!s(int=185)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpoh02fbg9_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpoh02fbg9_test.go:45: expected '%!s(int=42)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpoh02fbg9_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n\
    \    }\n    c := 0\n    for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n\
    \        a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8mwdo5au_test.go:45: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8mwdo5au_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8mwdo5au_test.go:45: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8mwdo5au_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8mwdo5au_test.go:45: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8mwdo5au_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfphly0u7_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpfphly0u7_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Complete the function here.\n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpgi1bljrr_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgi1bljrr_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpgi1bljrr_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpgi1bljrr_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpgi1bljrr_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    \n    product := 0\n    \n   \
    \ for i := 0; i < 10; i++ {\n        product *= 10\n        product += a%10 *\
    \ b%10\n        a /= 10\n        b /= 10\n    }\n    \n    return product\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmphqh2_t8b_test.go:50: expected '%!s(int=16)', got '%!s(int=6440000000)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphqh2_t8b_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=2200000000)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmphqh2_t8b_test.go:50: expected '%!s(int=0)', got '%!s(int=2000000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphqh2_t8b_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmphqh2_t8b_test.go:50: expected '%!s(int=42)', got '%!s(int=2200000000)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphqh2_t8b_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=9200000000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    product := 0\n\
    \    for i := 0; i < 10; i++ {\n        product += int(a / 10) * int(b / 10)\n\
    \        a = a % 10\n        b = b % 10\n    }\n    return product\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmppwv8rpap_test.go:48: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmppwv8rpap_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmppwv8rpap_test.go:48: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmppwv8rpap_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmppwv8rpap_test.go:48: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmppwv8rpap_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i\
    \ < len(b); i++ {\n        c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxzuq3d59_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpxzuq3d59_test.go:21:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpxzuq3d59_test.go:23:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpxzuq3d59_test.go:24:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    if a == 0 || b == 0 {\n      \
    \  return a * b\n    }\n    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g\
    \ := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n\
    \    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t\
    \ := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n\
    \    \n    switch {\n    case a < b:\n        c = a % 10\n        d = a / 10\n\
    \        e = b / 10\n        f = c % 10\n        g = c / 10\n        h = d % 10\n\
    \        i = d / 10\n        j = e % 10\n        k = e / 10\n        l = f % 10\n\
    \        m = f / 10\n        n = g % 10\n        o = g / 10\n        p = h % 10\n\
    \        q = h / 10\n        r = i % 10\n        s = i / 10\n        t = j % 10\n\
    \        u = j / 10\n        v = k % 10\n        w = k / 10\n        x = l % 10\n\
    \        y = l / 10\n        z = m % 10\n    }\n    \n    switch {\n    case c\
    \ < d:\n        e = c % 10\n        f = c / 10\n        g = d % 10\n        h\
    \ = d / 10\n        i = e % 10\n        j = e / 10\n        k = f % 10\n     \
    \   l = f / 10\n        m = g % 10\n        n = g / 10\n        o = h % 10\n \
    \       p = h / 10\n        q = i % 10\n        r = i / 10\n        s = j % 10\n\
    \        t = j / 10\n        u = k % 10\n        v = k / 10\n        w = l % 10\n\
    \        x = l / 10\n        y = m % 10\n        z = m / 10\n    }\n    \n   \
    \ switch {\n    case e < f:\n        g = e % 10\n        h = e / 10\n        i\
    \ = f % 10\n        j = f / 10\n        k = g % 10\n        l = g / 10\n     \
    \   m = h % 10\n        n = h / 10\n        o = i % 10\n        p = i / 10\n \
    \       q = j % 10\n        r = j / 10\n        s = k % 10\n        t = k / 10\n\
    \        u = l \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yuzmz22_test.go:116:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n\
    \    }\n    \n    c := 0\n    \n    if a > 0 && b > 0 {\n        c = a % 10 *\
    \ b % 10\n    }\n    \n    if a > 0 && b < 0 {\n        c = a % 10 * -b % 10\n\
    \    }\n    \n    if a < 0 && b > 0 {\n        c = -a % 10 * b % 10\n    }\n \
    \   \n    if a < 0 && b < 0 {\n        c = -a % 10 * -b % 10\n    }\n    \n  \
    \  return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpkdypl2a7_test.go:58: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkdypl2a7_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpkdypl2a7_test.go:58: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkdypl2a7_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpkdypl2a7_test.go:58: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    c := 0\n    for\
    \ i := 0; i < 9; i++ {\n        if a > 0 && b > 0 {\n            c += int(a /\
    \ b) * int(b / 10)\n            a %= b\n        }\n        if a > 0 {\n      \
    \      c += int(a / 10)\n            a %= 10\n        }\n        if b > 0 {\n\
    \            c += int(b / 10)\n            b %= 10\n        }\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpa9u_67ek_test.go:57: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpa9u_67ek_test.go:57:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpa9u_67ek_test.go:57: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpa9u_67ek_test.go:57:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpa9u_67ek_test.go:57: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpa9u_67ek_test.go:57:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    c := 0\n    for\
    \ i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyr5nlpqe_test.go:15:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpyr5nlpqe_test.go:16:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpyr5nlpqe_test.go:16:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a > 0 && b > 0 {\n        return a *\
    \ b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a > 0 && b > 0 {\n        return a *\
    \ b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        if a > 9 || b > 9 {\n            return 0\n        }\n        c += a%10\
    \ * b%10\n        a /= 10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnih8k3zu_test.go:45: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnih8k3zu_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnih8k3zu_test.go:45: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnih8k3zu_test.go:45:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnih8k3zu_test.go:45: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    product := 0\n\
    \    for i := 0; i < len(a); i++ {\n        product *= 10\n        product +=\
    \ a[i]\n    }\n    for i := 0; i < len(b); i++ {\n        product *= 10\n    \
    \    product += b[i]\n    }\n    return product\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprazuo0ph_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmprazuo0ph_test.go:22:21: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmprazuo0ph_test.go:24:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmprazuo0ph_test.go:26:21: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := 0; i < 10;\
    \ i++ {\n        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n \
    \   return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpaasyz193_test.go:46: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpaasyz193_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpaasyz193_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpaasyz193_test.go:46:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpaasyz193_test.go:46: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpaasyz193_test.go:46:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    d := 0\n    for i\
    \ := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n    }\n    for i := 0; i\
    \ < len(b); i++ {\n        d += b[i] * a[i]\n    }\n    return c + d\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1vu07yuy_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp1vu07yuy_test.go:20:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp1vu07yuy_test.go:20:22: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp1vu07yuy_test.go:22:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp1vu07yuy_test.go:23:15: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmp1vu07yuy_test.go:23:22: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // TODO: Write your code here\n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpo9osqsen_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpo9osqsen_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpo9osqsen_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpo9osqsen_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpo9osqsen_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    if a == 0 || b\
    \ == 0 {\n        return 0\n    }\n    c := 0\n    for i := 0; i < 9; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpo1njmdo3_test.go:51: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpo1njmdo3_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpo1njmdo3_test.go:51: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpo1njmdo3_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpo1njmdo3_test.go:51: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpo1njmdo3_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult\
    \ *= 10\n        mult += b%10\n        b /= 10\n    }\n    \n    return mult %\
    \ 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp30unl93w_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp30unl93w_test.go:48:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += b%10\n        b = b / 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpgtd1s28l_test.go:47: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgtd1s28l_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpgtd1s28l_test.go:47: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpgtd1s28l_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpgtd1s28l_test.go:47: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpgtd1s28l_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    \n    product := 0\n    \n    for\
    \ i := 0; i < len(a); i++ {\n        product *= 10\n        product += a[i]\n\
    \    }\n    \n    for i := 0; i < len(b); i++ {\n        product *= 10\n     \
    \   product += b[i]\n    }\n    \n    return product\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jp4_a78_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp_jp4_a78_test.go:22:21: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp_jp4_a78_test.go:25:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp_jp4_a78_test.go:27:21: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_jqngq85_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_jqngq85_test.go:36:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    for i := 0; i < a; i++ {\n        product\
    \ *= 10\n        product += a%10 * b%10\n        a /= 10\n        b /= 10\n  \
    \  }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp9692wo5d_test.go:49: expected '%!s(int=16)', got '%!s(int=64)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9692wo5d_test.go:49:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp9692wo5d_test.go:49: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9692wo5d_test.go:49:\
    \ expected '%!s(int=42)', got '%!s(int=22)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp9692wo5d_test.go:49: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 {\n        mult += a % 10\n  \
    \      a /= 10\n    }\n    \n    if b > 0 {\n        mult += b % 10\n        b\
    \ /= 10\n    }\n    \n    if mult > 0 {\n        mult *= 10\n    }\n    \n   \
    \ return mult + a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp25t8yfbb_test.go:56: expected '%!s(int=16)', got '%!s(int=674)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp25t8yfbb_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=172)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp25t8yfbb_test.go:56: expected '%!s(int=0)', got '%!s(int=37380)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp25t8yfbb_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp25t8yfbb_test.go:56: expected '%!s(int=42)', got '%!s(int=172)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp25t8yfbb_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=142)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp25t8yfbb_test.go:56: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += int(b / 10)\n        b = b % 10\n    }\n\
    \    for i := 0; i < b; i++ {\n        c += int(a / 10)\n        a = a % 10\n\
    \    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8g_paj2w_test.go:51: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8g_paj2w_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8g_paj2w_test.go:51: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8g_paj2w_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8g_paj2w_test.go:51: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8g_paj2w_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    c := 0\n    for i := 0; i < a; i++ {\n        c += b%10\n        b\
    \ /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpil7ewc7b_test.go:44: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpil7ewc7b_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpil7ewc7b_test.go:44: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpil7ewc7b_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpil7ewc7b_test.go:44: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpil7ewc7b_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    if a == 0 || b == 0 {\n      \
    \  return a * b\n    }\n    c := 0\n    for i := 0; i < len(a); i++ {\n      \
    \  c += int(b / 10) * int(a[i] - '0')\n        b = b - (c * 10) % 10\n       \
    \ c = c % 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x7gqab5_test.go:21:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4x7gqab5_test.go:22:33: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < 10; i++ {\n        c += a%10 * b%10\n        a /= 10\n        b\
    \ /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7f99cikt_test.go:48: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7f99cikt_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7f99cikt_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7f99cikt_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7f99cikt_test.go:48: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7f99cikt_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult\
    \ *= 10\n        mult += b%10\n        b /= 10\n    }\n    \n    return mult %\
    \ 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp30unl93w_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp30unl93w_test.go:48:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp30unl93w_test.go:48: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    \n    mult := 0\n    \n    for\
    \ i := 0; i < len(str(a)); i++ {\n        mult *= 10\n        mult += int(str(a)[i])\
    \ - '0'\n    }\n    \n    for i := 0; i < len(str(b)); i++ {\n        mult *=\
    \ 10\n        mult += int(str(b)[i]) - '0'\n    }\n    \n    return mult\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq0v8e6iz_test.go:20:25: undefined: str

    /tmp/tmpq0v8e6iz_test.go:22:21: undefined: str

    /tmp/tmpq0v8e6iz_test.go:25:25: undefined: str

    /tmp/tmpq0v8e6iz_test.go:27:21: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    c := 0\n    for\
    \ i := 0; i < 10; i++ {\n        c += a%10 * b%10\n        a /= 10\n        b\
    \ /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpojibm0f9_test.go:48: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpojibm0f9_test.go:48:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpojibm0f9_test.go:48: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpojibm0f9_test.go:48:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpojibm0f9_test.go:48: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpojibm0f9_test.go:48:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    product\
    \ := 0\n    \n    // Iterate through each digit of the product and multiply it\
    \ by the\n    // corresponding digit of the two numbers.\n    for i := 0; i <\
    \ len(fmt.Sprintf(\"%v\", product)); i++ {\n        product *= a % 10 * b % 10\n\
    \        a /= 10\n        b /= 10\n    }\n    \n    return product\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_rdf1yt9_test.go:54: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_rdf1yt9_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_rdf1yt9_test.go:54: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_rdf1yt9_test.go:54:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_rdf1yt9_test.go:54: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += int(b[i]) * int(a[i])\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprngd_znc_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmprngd_znc_test.go:15:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmprngd_znc_test.go:15:31: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    c := 0\n    for i := 0; i < a;\
    \ i++ {\n        c += (b % 10) * 10\n        b = b / 10\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmplaq9s11e_test.go:45: expected '%!s(int=16)', got '%!s(int=70)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmplaq9s11e_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmplaq9s11e_test.go:45: expected '%!s(int=0)', got '%!s(int=150)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmplaq9s11e_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmplaq9s11e_test.go:45: expected '%!s(int=42)', got '%!s(int=130)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmplaq9s11e_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    \n    // Initialize result to\
    \ 0\n    var result int = 0\n    \n    // Loop through all digits in a\n    for\
    \ i := 0; i < a; i++ {\n        // Add unit digit of b to result\n        result\
    \ *= 10\n        result += b%10\n        b /= 10\n    }\n    \n    // Return result\n\
    \    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpuz6jll_8_test.go:53: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuz6jll_8_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=8200000000000000000)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpuz6jll_8_test.go:53: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpuz6jll_8_test.go:53:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpuz6jll_8_test.go:53: expected '%!s(int=49)', got '%!s(int=72000000000000000)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    c := 0\n    for i := 0; i < a; i++ {\n        c += (b % 10) * 10\n\
    \        b = b / 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpc_x0skrn_test.go:44: expected '%!s(int=16)', got '%!s(int=70)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpc_x0skrn_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpc_x0skrn_test.go:44: expected '%!s(int=0)', got '%!s(int=150)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpc_x0skrn_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpc_x0skrn_test.go:44: expected '%!s(int=42)', got '%!s(int=130)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpc_x0skrn_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 &&\
    \ b == 0 {\n        return 1\n    }\n    if a > 0 && b > 0 {\n        return a\
    \ * b\n    }\n    if a > 0 && b == 0 {\n        return a\n    }\n    if a == 0\
    \ && b > 0 {\n        return b\n    }\n    return -1\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__7 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // TODO: Write the code here\n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpbex0hclg_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbex0hclg_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpbex0hclg_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpbex0hclg_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpbex0hclg_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a > b {\n \
    \       a, b = b, a\n    }\n    c := 0\n    for i := 0; i < b; i++ {\n       \
    \ c += a%10 * 10 + a%10\n        a /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpjljg2rsp_test.go:50: expected '%!s(int=16)', got '%!s(int=143)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjljg2rsp_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=110)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpjljg2rsp_test.go:50: expected '%!s(int=0)', got '%!s(int=165)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjljg2rsp_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpjljg2rsp_test.go:50: expected '%!s(int=42)', got '%!s(int=143)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjljg2rsp_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=88)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    \n    // Initialize result to\
    \ 0\n    var result int = 0\n    \n    // Iterate through each digit in each number\n\
    \    for i := 0; i < len(str(a)); i++ {\n        result *= 10\n        result\
    \ += int(a[i] - '0')*int(b[i] - '0')\n    }\n    \n    return result\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94ql6x4l_test.go:22:25: undefined: str

    /tmp/tmp94ql6x4l_test.go:24:24: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp94ql6x4l_test.go:24:40: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 9 || b > 9 {\n        return -1\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += int(b / 10)\n        b = b%10\n    }\n  \
    \  for i := 0; i < b; i++ {\n        c += int(a / 10)\n        a = a%10\n    }\n\
    \    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpn9yao2qw_test.go:51: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpn9yao2qw_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpn9yao2qw_test.go:51: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpn9yao2qw_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpn9yao2qw_test.go:51: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpn9yao2qw_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 &&\
    \ b == 0 {\n        return 1\n    }\n    if a > 0 && b > 0 {\n        return a\
    \ * b\n    }\n    if a > 0 && b == 0 {\n        return a\n    }\n    if a == 0\
    \ && b > 0 {\n        return b\n    }\n    return -1\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp_7olv3hw_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMultiply/test_num__7 (0.00s)\n        tmp_7olv3hw_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    if a == 0 || b == 0 {\n      \
    \  return a * b\n    }\n    c := 0\n    d := a / 10\n    c += d * b\n    a %=\
    \ 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n\
    \    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c +=\
    \ d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n\
    \    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d\
    \ /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n\
    \    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a\
    \ %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n\
    \    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c +=\
    \ d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n\
    \    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d\
    \ /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n\
    \    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a\
    \ %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n\
    \    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    c +=\
    \ d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n\
    \    c += d * b\n    a %= 10\n    d /= 10\n    c += d * b\n    a %= 10\n    d\
    \ /= 10\n    c += d * b\n    a %= 10\n    d /= 10\n    \nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl4oq7aza_test.go:116:6: expected ''('', found TestMultiply

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    for i := 0; i < a; i++ {\n        mult\
    \ *= 10\n        mult += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n\
    \    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate :=\
    \ multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpwlbh101j_test.go:49: expected '%!s(int=16)', got '%!s(int=64)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpwlbh101j_test.go:49:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpwlbh101j_test.go:49: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpwlbh101j_test.go:49:\
    \ expected '%!s(int=42)', got '%!s(int=22)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpwlbh101j_test.go:49: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    result := 0\n\
    \    carry := 0\n    for i := 0; i < len(str(a)); i++ {\n        digit := int(str(a)[i])\
    \ * int(str(b)[i]) + carry\n        carry = digit / 10\n        digit %= 10\n\
    \        result += digit\n    }\n    if carry > 0 {\n        result += carry\n\
    \    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ez1lmig_test.go:21:25: undefined: str

    /tmp/tmp0ez1lmig_test.go:22:22: undefined: str

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074811
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n \
    \       c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kef17qp_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp6kef17qp_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp6kef17qp_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp6kef17qp_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 &&\
    \ b == 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n        return a\
    \ * b\n    }\n    if a > 0 && b < 0 {\n        return -1 * a * b\n    }\n    if\
    \ a < 0 && b < 0 {\n        return -1 * a * b\n    }\n    return -1\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpvm04xias_test.go:54: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpvm04xias_test.go:54:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpvm04xias_test.go:54: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpvm04xias_test.go:54:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpvm04xias_test.go:54: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpvm04xias_test.go:54:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpvm04xias_test.go:54: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074811
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    if a == 0 || b == 0 {\n      \
    \  return a * b\n    }\n    c := a * b\n    if c > 9 {\n        return -1\n  \
    \  }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpqq18bxqo_test.go:47: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqq18bxqo_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpqq18bxqo_test.go:47: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqq18bxqo_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpqq18bxqo_test.go:47: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqq18bxqo_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\
    \nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqozydquo_test.go:20:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpqozydquo_test.go:21:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpqozydquo_test.go:21:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := 0; i < a;\
    \ i++ {\n        c += b%10\n        b /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp8on66mca_test.go:45: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8on66mca_test.go:45:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp8on66mca_test.go:45: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8on66mca_test.go:45:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp8on66mca_test.go:45: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8on66mca_test.go:45:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    if a > 0 {\n        product += a%10\
    \ * b%10\n        a /= 10\n        b /= 10\n    }\n    \n    if b > 0 {\n    \
    \    product += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    \n \
    \   if a > 0 {\n        product += a%10 * b%10\n    }\n    \n    return product\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnc86mqgj_test.go:58: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnc86mqgj_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnc86mqgj_test.go:58: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnc86mqgj_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnc86mqgj_test.go:58: expected '%!s(int=49)', got '%!s(int=11)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    c := 0\n    for\
    \ i := 0; i < a; i++ {\n        c += (b % 10) * 10\n        b = b / 10\n    }\n\
    \    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp44tani_j_test.go:47: expected '%!s(int=16)', got '%!s(int=70)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp44tani_j_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp44tani_j_test.go:47: expected '%!s(int=0)', got '%!s(int=150)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp44tani_j_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp44tani_j_test.go:47: expected '%!s(int=42)', got '%!s(int=130)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp44tani_j_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += int(b[i]) * int(a[i])\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprngd_znc_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmprngd_znc_test.go:15:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmprngd_znc_test.go:15:31: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a > 0 && b > 0 {\n        return a * b\n    }\n    \n   \
    \ if a > 0 && b < 0 {\n        return -1\n    }\n    \n    if a < 0 && b > 0 {\n\
    \        return -1\n    }\n    \n    if a < 0 && b < 0 {\n        return -1\n\
    \    }\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpx7cd63zu_test.go:56: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpx7cd63zu_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpx7cd63zu_test.go:56: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpx7cd63zu_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpx7cd63zu_test.go:56: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpx7cd63zu_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp_jqngq85_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp_jqngq85_test.go:36:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmp_jqngq85_test.go:36: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfphly0u7_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpfphly0u7_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpfphly0u7_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a\
    \ % 10 * b / 10\n        a = a / 10\n        b = b / 10\n    }\n    \n    if a\
    \ > 0 {\n        mult += a\n    }\n    \n    if b > 0 {\n        mult += b\n \
    \   }\n    \n    return mult\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp35972yaw_test.go:56: expected '%!s(int=16)', got '%!s(int=384)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp35972yaw_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=28)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp35972yaw_test.go:56: expected '%!s(int=0)', got '%!s(int=387)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp35972yaw_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp35972yaw_test.go:56: expected '%!s(int=42)', got '%!s(int=53)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp35972yaw_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=21)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp35972yaw_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    \n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpl7z65095_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpl7z65095_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpl7z65095_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpl7z65095_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpl7z65095_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    if a == 0 || b == 0 {\n       \
    \ return a * b\n    }\n    c := 0\n    for i := 0; i < a; i++ {\n        c +=\
    \ b\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpt8iv8pi2_test.go:47: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpt8iv8pi2_test.go:47:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpt8iv8pi2_test.go:47: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpt8iv8pi2_test.go:47:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpt8iv8pi2_test.go:47: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpt8iv8pi2_test.go:47:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    c\
    \ := 0\n    \n    for i := 0; i < a; i++ {\n        c += (b % 10) * 10\n     \
    \   b = b / 10\n    }\n    \n    for i := 0; i < b; i++ {\n        c += (a%10)\
    \ * 10\n        a = a / 10\n    }\n    \n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpifgbganr_test.go:56: expected '%!s(int=16)', got '%!s(int=70)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpifgbganr_test.go:56:\
    \ expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpifgbganr_test.go:56: expected '%!s(int=0)', got '%!s(int=150)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpifgbganr_test.go:56:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpifgbganr_test.go:56: expected '%!s(int=42)', got '%!s(int=130)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpifgbganr_test.go:56:\
    \ expected '%!s(int=49)', got '%!s(int=90)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    c\
    \ := 0\n    \n    if a > b {\n        c, b = b, a\n    }\n    \n    for i := 0;\
    \ i < b; i++ {\n        c += int(a % 10)\n        a /= 10\n    }\n    \n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp58ol5_2c_test.go:55: expected '%!s(int=16)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp58ol5_2c_test.go:55:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp58ol5_2c_test.go:55: expected '%!s(int=0)', got '%!s(int=1855)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp58ol5_2c_test.go:55:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp58ol5_2c_test.go:55: expected '%!s(int=42)', got '%!s(int=80)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp58ol5_2c_test.go:55:\
    \ expected '%!s(int=49)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    c := 0\n    for i := 0; i < a; i++ {\n        c += b%10\n        b\
    \ /= 10\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpil7ewc7b_test.go:44: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpil7ewc7b_test.go:44:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpil7ewc7b_test.go:44: expected '%!s(int=0)', got '%!s(int=15)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpil7ewc7b_test.go:44:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpil7ewc7b_test.go:44: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpil7ewc7b_test.go:44:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 {\n        mult += a%10\n    \
    \    a /= 10\n    }\n    \n    if b > 0 {\n        mult += b%10\n        b /=\
    \ 10\n    }\n    \n    return mult * 10 + mult\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmppvtx44zv_test.go:52: expected '%!s(int=16)', got '%!s(int=110)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmppvtx44zv_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=187)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmppvtx44zv_test.go:52: expected '%!s(int=0)', got '%!s(int=11)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmppvtx44zv_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmppvtx44zv_test.go:52: expected '%!s(int=42)', got '%!s(int=143)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmppvtx44zv_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=154)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmppvtx44zv_test.go:52: expected '%!s(int=0)', got '%!s(int=11)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    \n    mult := 0\n    \n    for\
    \ i := a; i >= 0; i-- {\n        for j := b; j >= 0; j-- {\n            mult *=\
    \ 10\n            mult += i%10*j%10\n        }\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.01s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmph5l_xf7o_test.go:50: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph5l_xf7o_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=-3362154867010306048)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmph5l_xf7o_test.go:50: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph5l_xf7o_test.go:50:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmph5l_xf7o_test.go:50: expected '%!s(int=49)', got '%!s(int=-8349019943718617088)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a > 0 && b > 0 {\n        return a *\
    \ b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate\
    \ := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n\
    \     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp82vz2g31_test.go:39: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp82vz2g31_test.go:39:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Your code here\n    return 0\n}\n\n\
    func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpnbmxxl94_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpnbmxxl94_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here.\n    return 0\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpdfwgzs30_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpdfwgzs30_test.go:37:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpdfwgzs30_test.go:37: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpdfwgzs30_test.go:37:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpdfwgzs30_test.go:37: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    c := 0\n    for i := 0; i < 10;\
    \ i++ {\n        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n \
    \   return c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpaasyz193_test.go:46: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpaasyz193_test.go:46:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpaasyz193_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpaasyz193_test.go:46:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpaasyz193_test.go:46: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpaasyz193_test.go:46:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    product\
    \ := 0\n    \n    // loop through each digit\n    for i := 0; i < 10; i++ {\n\
    \        product *= 10\n        product += a%10 * b%10\n        a /= 10\n    \
    \    b /= 10\n    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp7v2199vs_test.go:53: expected '%!s(int=16)', got '%!s(int=6440000000)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp7v2199vs_test.go:53:\
    \ expected '%!s(int=72)', got '%!s(int=2200000000)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp7v2199vs_test.go:53: expected '%!s(int=0)', got '%!s(int=2000000)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp7v2199vs_test.go:53:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp7v2199vs_test.go:53: expected '%!s(int=42)', got '%!s(int=2200000000)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp7v2199vs_test.go:53:\
    \ expected '%!s(int=49)', got '%!s(int=9200000000)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    \n    return\
    \ 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=20)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpymo9ldpf_test.go:38:\
    \ expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpymo9ldpf_test.go:38: expected '%!s(int=49)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a > b {\n \
    \       a, b = b, a\n    }\n    c := 0\n    for i := 0; i < a; i++ {\n       \
    \ c += b%10\n        b = b / 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3cvccffl_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3cvccffl_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3cvccffl_test.go:15:22: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < 10; i++ {\n\
    \        c += a%10 * b%10\n        a /= 10\n        b /= 10\n    }\n    return\
    \ c\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual:\
    \ candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected:\
    \ 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=16)', got '%!s(int=14)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpci3s8rdm_test.go:42: expected '%!s(int=42)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpci3s8rdm_test.go:42:\
    \ expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    if a > 9 || b > 9 {\n        return -1\n    }\n    \n    mult\
    \ := 0\n    \n    for i := 0; i < a; i++ {\n        mult *= 10\n        mult +=\
    \ a%10\n        a /= 10\n    }\n    \n    for i := 0; i < b; i++ {\n        mult\
    \ *= 10\n        mult += b%10\n        b /= 10\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpy5wt_97b_test.go:58: expected '%!s(int=16)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpy5wt_97b_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpy5wt_97b_test.go:58: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpy5wt_97b_test.go:58:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpy5wt_97b_test.go:58: expected '%!s(int=42)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpy5wt_97b_test.go:58:\
    \ expected '%!s(int=49)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmpy5wt_97b_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    // Write your code here\n    c := 0\n \
    \   for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n    }\n    for i :=\
    \ 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n    return c\n}\n\nfunc\
    \ TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfp2heima_test.go:15:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpfp2heima_test.go:16:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpfp2heima_test.go:18:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpfp2heima_test.go:19:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a%10\
    \ * b%10\n    }\n    \n    if a > 0 && b < 0 {\n        mult += a%10 * b\n   \
    \ }\n    \n    if a < 0 && b > 0 {\n        mult += a * b%10\n    }\n    \n  \
    \  if a < 0 && b < 0 {\n        mult += a * b\n    }\n    \n    return mult\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpbgh8semy_test.go:58: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbgh8semy_test.go:58:\
    \ expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3\
    \ (0.00s)\n        tmpbgh8semy_test.go:58: expected '%!s(int=20)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpbgh8semy_test.go:58:\
    \ expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5\
    \ (0.00s)\n        tmpbgh8semy_test.go:58: expected '%!s(int=49)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += int(b[i] - '0')*10 + int(a[i] - '0')\n    }\n    return c\n\
    }\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
    \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n\
    \     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
    \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n  \
    \   { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt9ntyj0c_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpt9ntyj0c_test.go:15:19: invalid operation: cannot index b (variable of
    type int)

    /tmp/tmpt9ntyj0c_test.go:15:40: invalid operation: cannot index a (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    // If both are zero, return zero.\n    if a == 0 && b == 0 {\n\
    \        return 0\n    }\n    \n    // If only one is zero, return zero.\n   \
    \ if a == 0 {\n        return b\n    }\n    \n    // If both are non-zero, return\
    \ the product of the unit digits.\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp0c3t3zpy_test.go:51: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp0c3t3zpy_test.go:51:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp0c3t3zpy_test.go:51: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp0c3t3zpy_test.go:51:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp0c3t3zpy_test.go:51: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp0c3t3zpy_test.go:51:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp0c3t3zpy_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a > b {\n \
    \       a, b = b, a\n    }\n    c := 0\n    for i := 0; i < a; i++ {\n       \
    \ c += b%10\n        b = b / 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    product := 0\n    \n    for i := 0; i < len(a); i++ {\n    \
    \    product *= 10\n        product += a[i]\n    }\n    \n    for i := 0; i <\
    \ len(b); i++ {\n        product *= 10\n        product += b[i]\n    }\n    \n\
    \    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n  \
    \   { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020,\
    \ 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n\
    \     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17,\
    \ 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     {\
    \ actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu31gcrog_test.go:19:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmpu31gcrog_test.go:21:21: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmpu31gcrog_test.go:24:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmpu31gcrog_test.go:26:21: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a > 0 && b > 0 {\n        return a\
    \ * b\n    }\n    if a > 0 && b < 0 {\n        return a * b\n    }\n    if a <\
    \ 0 && b > 0 {\n        return a * b\n    }\n    if a < 0 && b < 0 {\n       \
    \ return a * b\n    }\n    return -1\n}\n\nfunc TestMultiply(t *testing.T) {\n\
    \  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpej_9nam7_test.go:57: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpej_9nam7_test.go:57:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpej_9nam7_test.go:57: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpej_9nam7_test.go:57:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpej_9nam7_test.go:57: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpej_9nam7_test.go:57:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    return a * b\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpve5l_q4u_test.go:36: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpve5l_q4u_test.go:36:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074553
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n     \
    \   c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ryammfd_test.go:14:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:15:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp4ryammfd_test.go:17:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp4ryammfd_test.go:18:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 2
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    c := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n \
    \       c += b[i] - '0'\n    }\n    return c\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3r0ojibf_test.go:18:25: invalid argument: a (variable of type int) for
    len

    /tmp/tmp3r0ojibf_test.go:19:15: invalid operation: cannot index a (variable of
    type int)

    /tmp/tmp3r0ojibf_test.go:21:25: invalid argument: b (variable of type int) for
    len

    /tmp/tmp3r0ojibf_test.go:22:15: invalid operation: cannot index b (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    \n    mult := 0\n    \n    if a > 0 {\n        mult += a % 10\n  \
    \      a /= 10\n    }\n    \n    if b > 0 {\n        mult += b % 10\n        b\
    \ /= 10\n    }\n    \n    return mult * 10 + int(a) * int(b)\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmp2soe7v4u_test.go:52: expected '%!s(int=16)', got '%!s(int=674)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp2soe7v4u_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=172)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmp2soe7v4u_test.go:52: expected '%!s(int=0)', got '%!s(int=37380)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp2soe7v4u_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmp2soe7v4u_test.go:52: expected '%!s(int=42)', got '%!s(int=172)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp2soe7v4u_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=142)'\n    --- FAIL: TestMultiply/test_num__6\
    \ (0.00s)\n        tmp2soe7v4u_test.go:52: expected '%!s(int=0)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        fmt.Println(\"\
    Invalid input\")\n        return 0\n    }\n    if a > 0 && b > 0 {\n        return\
    \ a * b\n    }\n    if a > 0 && b < 0 {\n        return -a * b\n    }\n    if\
    \ a < 0 && b > 0 {\n        return -a * b\n    }\n    if a < 0 && b < 0 {\n  \
    \      return a * b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T)\
    \ {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Invalid input\n--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpkvauijko_test.go:52: expected '%!s(int=16)', got '%!s(int=60976)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkvauijko_test.go:52:\
    \ expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpkvauijko_test.go:52: expected '%!s(int=0)', got '%!s(int=3739020)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkvauijko_test.go:52:\
    \ expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpkvauijko_test.go:52: expected '%!s(int=42)', got '%!s(int=5092)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkvauijko_test.go:52:\
    \ expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Complete the function that takes two integers and returns \n// the product\
    \ of their unit digits.\n// Assume the input is always valid.\n// Examples:\n\
    func multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return -1\n\
    \    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a > b {\n \
    \       a, b = b, a\n    }\n    c := 0\n    for i := 0; i < a; i++ {\n       \
    \ c += b%10\n        b = b / 10\n    }\n    return c\n}\n\nfunc TestMultiply(t\
    \ *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148,\
    \ 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n \
    \    { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14,\
    \ -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n \
    \    { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0,\
    \ 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=16)', got '%!s(int=7)'\n\
    \    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4\
    \ (0.00s)\n        tmpnu5ntawl_test.go:50: expected '%!s(int=42)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpnu5ntawl_test.go:50:\
    \ expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074813
