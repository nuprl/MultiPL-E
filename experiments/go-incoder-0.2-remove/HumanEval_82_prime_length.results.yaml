language: go_test.go
name: HumanEval_82_prime_length
results:
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[length-i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n\
    \     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"\
    kittens\"), expected: true },\n     { actual: candidate(\"orange\"), expected:\
    \ false },\n     { actual: candidate(\"wow\"), expected: true },\n     { actual:\
    \ candidate(\"world\"), expected: true },\n     { actual: candidate(\"MadaM\"\
    ), expected: true },\n     { actual: candidate(\"Wow\"), expected: true },\n \
    \    { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpil1cmhf4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpil1cmhf4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpil1cmhf4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpil1cmhf4_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpil1cmhf4_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpil1cmhf4_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpil1cmhf4_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    if length == 2 || length == 3 {\n        return true\n   \
    \ }\n    if length == 4 {\n        return true\n    }\n    if length == 5 {\n\
    \        return true\n    }\n    if length == 6 {\n        return true\n    }\n\
    \    if length == 7 {\n        return true\n    }\n    if length == 8 {\n    \
    \    return true\n    }\n    if length == 9 {\n        return true\n    }\n  \
    \  if length == 10 {\n        return true\n    }\n    if length == 11 {\n    \
    \    return true\n    }\n    if length == 12 {\n        return true\n    }\n \
    \   if length == 13 {\n        return true\n    }\n    if length == 14 {\n   \
    \     return true\n    }\n    if length == 15 {\n        return true\n    }\n\
    \    if length == 16 {\n        return true\n    }\n    if length == 17 {\n  \
    \      return true\n    }\n    if length == 18 {\n        return true\n    }\n\
    \    if length == 19 {\n        return true\n    }\n    if length == 20 {\n  \
    \      return true\n    }\n    if length == 21 {\n        return true\n    }\n\
    \    if length == 22 {\n        return true\n    }\n    if length == 100 {\n \
    \       return true\n    }\n    if length == 200 {\n        return true\n    }\n\
    \    if length == 300 {\n        return true\n    }\n    if length == 400 {\n\
    \        return true\n    }\n    if length == 500 {\n        return true\n   \
    \ }\n    if length == 600 {\n        return true\n    }\n    if length == 700\
    \ {\n        return true\n    }\n    if length == 800 {\n        return true\n\
    \    }\n    if length == 900 {\n        return true\n    }\n    if length == 1000\
    \ {\n        return true\n    }\n    if length == 10000 {\n        return true\n\
    \    }\n    if length == 20000 {\n        return true\n    }\n    if length ==\
    \ 30000 {\n        return true\n    }\n    if length == 40000 {\n        return\
    \ true\n    }\n    if length == 50000 {\n        return true\n    }\n    if length\
    \ == 60000 {\n        return true\n    }\n    if length == 70000 {\n        return\
    \ true\n    }\n    if length == 80000 {\n        return true\n    }\n    if length\
    \ == 90000 {\n        return true\n    }\n    if length == 100000 {\n        return\
    \ true\n    }\n    if length == 200000 {\n        return true\n    }\n    if length\
    \ == 300000 {\n        return true\n    }\n    if length == 400000 {\n       \
    \ return true\n    }\n    if length == 500000 {\n        return true\n    }\n\
    \    if length == 600000 {\n        return true\n    }\n    if length == 700000\
    \ {\n        return true\nfunc TestPrime_Length(t *testing.T) {\n  candidate :=\
    \ prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hello\"), expected: true\
    \ },\n     { actual: candidate(\"abcdcba\"), expected: true },\n     { actual:\
    \ candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"orange\"\
    ), expected: false },\n     { actual: candidate(\"wow\"), expected: true },\n\
    \     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsra_ta8f_test.go:153:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073917
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            prime = false\n            break\n        }\n \
    \   }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   if length < 2 {\n        return false\n    }\n    prime := true\n    for i\
    \ := 2; i <= length/2; i++ {\n        if myString[i] != myString[length-i] {\n\
    \            prime = false\n            break\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmprmzcmk9a_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmprmzcmk9a_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmprmzcmk9a_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmprmzcmk9a_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmprmzcmk9a_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmprmzcmk9a_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmprmzcmk9a_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            prime = false\n            break\n       \
    \ }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp7hp0dkwx_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp7hp0dkwx_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp7hp0dkwx_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp7hp0dkwx_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp7hp0dkwx_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp7hp0dkwx_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp7hp0dkwx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp7hp0dkwx_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp7hp0dkwx_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp7hp0dkwx_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   if length < 2 {\n        return false\n    }\n    if length == 2 || length\
    \ == 3 {\n        return true\n    }\n    if length == 4 {\n        return true\n\
    \    }\n    if length == 5 || length == 6 || length == 7 || length == 8 || length\
    \ == 9 {\n        return true\n    }\n    if length == 11 {\n        return true\n\
    \    }\n    if length == 12 {\n        return true\n    }\n    if length == 13\
    \ {\n        return true\n    }\n    if length == 14 {\n        return true\n\
    \    }\n    if length == 15 {\n        return true\n    }\n    if length == 16\
    \ {\n        return true\n    }\n    if length == 17 {\n        return true\n\
    \    }\n    if length == 18 {\n        return true\n    }\n    if length == 19\
    \ {\n        return true\n    }\n    if length == 20 {\n        return true\n\
    \    }\n    if length == 21 {\n        return true\n    }\n    if length == 22\
    \ {\n        return true\n    }\n    if length == 23 {\n        return true\n\
    \    }\n    if length == 24 {\n        return true\n    }\n    if length == 25\
    \ {\n        return true\n    }\n    if length == 26 {\n        return true\n\
    \    }\n    if length == 27 {\n        return true\n    }\n    if length == 28\
    \ {\n        return true\n    }\n    if length == 29 {\n        return true\n\
    \    }\n    if length == 30 {\n        return true\n    }\n    if length == 31\
    \ {\n        return true\n    }\n    if length == 32 {\n        return true\n\
    \    }\n    if length == 33 {\n        return true\n    }\n    if length == 34\
    \ {\n        return true\n    }\n    if length == 35 {\n        return true\n\
    \    }\n    if length == 36 {\n        return true\n    }\n    if length == 37\
    \ {\n        return true\n    }\n    if length == 38 {\n        return true\n\
    \    }\n    if length == 39 {\n        return true\n    }\n    if length == 40\
    \ {\n        return true\n    }\n    if length == 41 {\n        return true\n\
    \    }\n    if length == 42 {\n        return true\n    }\n    if length == 43\
    \ {\n        return true\n    }\n    if length == 44 {\n        return true\n\
    \    }\n    if length == 45 {\n        return true\n    }\n    if length == 46\
    \ {\n        return true\n    }\n    if length == 47 {\n        return true\n\
    \    }\n    if length == 48 {\n        return true\n    }\n    if length == 49\
    \ {\n        return true\n    }\n    if length == 50 {\n        return true\n\
    \    }\n    if length == 51 {\n        return true\n    }\n    if length == 52\
    \ {\n        return true\n    }\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptqsxu8i8_test.go:152:6: expected ''('', found TestPrime_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073917
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   \n    if length < 2 {\n        return false\n    }\n    \n    for i := 2;\
    \ i <= length/2; i++ {\n        if myString[i] != myString[i/2] {\n          \
    \  return false\n        }\n    }\n    \n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpoe5hu31h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpoe5hu31h_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpoe5hu31h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmpoe5hu31h_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmpoe5hu31h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpoe5hu31h_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmpoe5hu31h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length/2; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp3kcgst4m_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp3kcgst4m_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i <= length/2; i++ {\n        if myString[i]\
    \ != myString[length-i] {\n            prime = false\n            break\n    \
    \    }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n\
    \  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmpw01q4s71_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmpw01q4s71_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpw01q4s71_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpw01q4s71_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpw01q4s71_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmpw01q4s71_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpw01q4s71_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpw01q4s71_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpw01q4s71_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpw01q4s71_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            prime = false\n            break\n        }\n \
    \   }\n    return prime\n}\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate\
    \ := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hello\"),\
    \ expected: true },\n     { actual: candidate(\"abcdcba\"), expected: true },\n\
    \     { actual: candidate(\"kittens\"), expected: true },\n     { actual: candidate(\"\
    orange\"), expected: false },\n     { actual: candidate(\"wow\"), expected: true\
    \ },\n     { actual: candidate(\"world\"), expected: true },\n     { actual: candidate(\"\
    MadaM\"), expected: true },\n     { actual: candidate(\"Wow\"), expected: true\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    HI\"), expected: true },\n     { actual: candidate(\"go\"), expected: true },\n\
    \     { actual: candidate(\"gogo\"), expected: false },\n     { actual: candidate(\"\
    aaaaaaaaaaaaaaa\"), expected: false },\n     { actual: candidate(\"Madam\"), expected:\
    \ true },\n     { actual: candidate(\"M\"), expected: false },\n     { actual:\
    \ candidate(\"0\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpd0p_ayxs_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpd0p_ayxs_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ myString[length-1] {\n            if myString[i] != myString[length/2]{\n  \
    \              prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__1\
    \ (0.00s)\n        tmp87uwhsyk_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp87uwhsyk_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp87uwhsyk_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp87uwhsyk_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp87uwhsyk_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__11 (0.00s)\n        tmp87uwhsyk_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp87uwhsyk_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp87uwhsyk_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp87uwhsyk_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp87uwhsyk_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpox7nqax9_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpox7nqax9_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    for i := 2; i < length; i++\
    \ {\n        if myString[i] != myString[len(myString)-(i+1)] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp5jc_h6md_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__2 (0.00s)\n        tmp5jc_h6md_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp5jc_h6md_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__7 (0.00s)\n        tmp5jc_h6md_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmp5jc_h6md_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp5jc_h6md_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp5jc_h6md_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmp5jc_h6md_test.go:49:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmp5jc_h6md_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    prime := true\n    for i :=\
    \ 2; i < length; i++ {\n        if myString[i] != myString[length-1] {\n     \
    \       if myString[i] != myString[length/2+i] {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmp_yvvchy7_test.go:16\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmp_yvvchy7_test.go:43\
    \ +0x776\ntesting.tRunner(0xc00019b040, 0x528f80)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i < length; i++ {\n        if myString[i] !=\
    \ 0 {\n            if myString[i] % i == 0 {\n                prime = false\n\
    \            }\n        }\n    }\n    return prime\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2y1yofno_test.go:17:16: invalid operation: myString[i] % i (mismatched
    types byte and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i <= length; i++ {\n        if myString[i] !=\
    \ myString[i/2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hello\"), expected: true },\n     { actual:\
    \ candidate(\"abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"\
    ), expected: true },\n     { actual: candidate(\"orange\"), expected: false },\n\
    \     { actual: candidate(\"wow\"), expected: true },\n     { actual: candidate(\"\
    world\"), expected: true },\n     { actual: candidate(\"MadaM\"), expected: true\
    \ },\n     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.prime_length(...)\n\t/tmp/tmpo6nzxgqy_test.go:17\n\
    command-line-arguments_test.TestPrime_Length(0x0?)\n\t/tmp/tmpo6nzxgqy_test.go:40\
    \ +0x225\ntesting.tRunner(0xc0001a0340, 0x527d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   for i := 2; i <= length/2; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__5 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__6\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__12\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__13 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp3u71dti1_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp3u71dti1_test.go:50:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpg460wozl_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpg460wozl_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    length := len(myString)\n    if length < 2 {\n        return\
    \ false\n    }\n    for i := 2; i < length; i++ {\n        if myString[i] != myString[i/2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__0\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__1 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__2\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__4 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__5\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__6 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestPrime_Length/test_num__7\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp6k_ph3sa_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__13\
    \ (0.00s)\n        tmp6k_ph3sa_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your logic here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsz1p2oif_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n    return true\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmp4aknyg65_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmp4aknyg65_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmp4aknyg65_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmp4aknyg65_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmp4aknyg65_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmp4aknyg65_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n    length := len(myString)\n \
    \   prime := true\n    for i := 2; i <= length/2; i++ {\n        if length%i ==\
    \ 0 {\n            prime = false\n        }\n    }\n    return prime\n}\n\nfunc\
    \ TestPrime_Length(t *testing.T) {\n  candidate := prime_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"\
    abcdcba\"), expected: true },\n     { actual: candidate(\"kittens\"), expected:\
    \ true },\n     { actual: candidate(\"orange\"), expected: false },\n     { actual:\
    \ candidate(\"wow\"), expected: true },\n     { actual: candidate(\"world\"),\
    \ expected: true },\n     { actual: candidate(\"MadaM\"), expected: true },\n\
    \     { actual: candidate(\"Wow\"), expected: true },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"HI\"), expected: true },\n\
    \     { actual: candidate(\"go\"), expected: true },\n     { actual: candidate(\"\
    gogo\"), expected: false },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected:\
    \ false },\n     { actual: candidate(\"Madam\"), expected: true },\n     { actual:\
    \ candidate(\"M\"), expected: false },\n     { actual: candidate(\"0\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__8\
    \ (0.00s)\n        tmpuvb4ja2s_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__14 (0.00s)\n        tmpuvb4ja2s_test.go:51:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__15\
    \ (0.00s)\n        tmpuvb4ja2s_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyp20rmxt_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Write your function here\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1z4n4qdc_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n    return true\n}\n\nfunc TestPrime_Length(t\
    \ *testing.T) {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"\
    ), expected: true },\n     { actual: candidate(\"kittens\"), expected: true },\n\
    \     { actual: candidate(\"orange\"), expected: false },\n     { actual: candidate(\"\
    wow\"), expected: true },\n     { actual: candidate(\"world\"), expected: true\
    \ },\n     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestPrime_Length (0.00s)\n    --- FAIL: TestPrime_Length/test_num__3\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__8 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__11\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__12 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestPrime_Length/test_num__14\
    \ (0.00s)\n        tmpoes1wf_e_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestPrime_Length/test_num__15 (0.00s)\n        tmpoes1wf_e_test.go:44:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes a string and returns True if the string\n\
    // length is a prime number or False otherwise\n// Examples\nfunc prime_length(myString\
    \ string) bool {\n    // Your code here\n}\n\nfunc TestPrime_Length(t *testing.T)\
    \ {\n  candidate := prime_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hello\"), expected: true },\n     { actual: candidate(\"abcdcba\"), expected:\
    \ true },\n     { actual: candidate(\"kittens\"), expected: true },\n     { actual:\
    \ candidate(\"orange\"), expected: false },\n     { actual: candidate(\"wow\"\
    ), expected: true },\n     { actual: candidate(\"world\"), expected: true },\n\
    \     { actual: candidate(\"MadaM\"), expected: true },\n     { actual: candidate(\"\
    Wow\"), expected: true },\n     { actual: candidate(\"\"), expected: false },\n\
    \     { actual: candidate(\"HI\"), expected: true },\n     { actual: candidate(\"\
    go\"), expected: true },\n     { actual: candidate(\"gogo\"), expected: false\
    \ },\n     { actual: candidate(\"aaaaaaaaaaaaaaa\"), expected: false },\n    \
    \ { actual: candidate(\"Madam\"), expected: true },\n     { actual: candidate(\"\
    M\"), expected: false },\n     { actual: candidate(\"0\"), expected: false },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc8m44b2x_test.go:13:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
