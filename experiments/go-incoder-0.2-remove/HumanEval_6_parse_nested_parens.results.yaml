language: go_test.go
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    level := 0\n    for _, char := range paren_string {\n    \
    \    if char == '(' {\n            level++\n        } else if char == ')' {\n\
    \            level--\n        }\n        if level == 0 {\n            levels =\
    \ append(levels, level)\n        }\n    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp31d0_j90_test.go:15:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    levels := []int{}\n    level\
    \ := 0\n    level := 0\n    level := 0\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            level++\n        } else if char ==\
    \ ')' {\n            level--\n        }\n        if level == 0 {\n           \
    \ levels = append(levels, level)\n        }\n    }\n    return levels\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphi4f6dvd_test.go:15:11: no new variables on left side of :=

    /tmp/tmphi4f6dvd_test.go:16:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for i < len(paren_string) {\n        if paren_string[i]\
    \ == '(' {\n            level++\n        }\n        if paren_string[i] == ')'\
    \ {\n            level--\n        }\n        if level == 0 {\n            levels\
    \ = append(levels, level)\n        }\n        i++\n    }\n    return levels\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmppn8xso36_test.go:46: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmppn8xso36_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmppn8xso36_test.go:46:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := []int{}\n    level\
    \ := 0\n    index := 0\n    for index < len(paren_string) {\n        if paren_string[index]\
    \ == '(' {\n            level++\n        } else if paren_string[index] == ')'\
    \ {\n            level--\n        }\n        if level == 0 {\n            levels\
    \ = append(levels, level)\n        }\n        index++\n    }\n    return levels\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp0g3grxex_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmp0g3grxex_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmp0g3grxex_test.go:45:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level = 0\n    var max_level_string string\n  \
    \  var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1p3wu8rx_test.go:97:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string \nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7vu5mqe_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    levels := make([]int, 0)\n \
    \   level := 0\n    index := 0\n    for _, char := range paren_string {\n    \
    \    if char == '(' {\n            level++\n        } else if char == ')' {\n\
    \            level--\n        }\n        if level == 0 {\n            levels =\
    \ append(levels, index)\n        }\n        index++\n    }\n    return levels\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpaaj_zfas_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=5) %!s(int=6) %!s(int=12) %!s(int=13) %!s(int=15)\
    \ %!s(int=16) %!s(int=26) %!s(int=27)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpaaj_zfas_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=7) %!s(int=13)\
    \ %!s(int=14) %!s(int=22) %!s(int=23)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpaaj_zfas_test.go:45: expected '[%!s(int=4)]', got '[%!s(int=13)\
    \ %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    index := 0\n    for index < len(paren_string) {\n        switch\
    \ paren_string[index] {\n        case ')':\n            level++\n            if\
    \ level > levels[len(levels)-1] {\n                levels[len(levels)-1] = level\n\
    \            }\n        case ')':\n            level--\n            if level <\
    \ levels[len(levels)-1] {\n                levels[len(levels)-1] = level\n   \
    \         }\n        default:\n            level = 0\n        }\n        index++\n\
    \    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n\
    \  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpye1xmzta_test.go:23:14:\
    \ duplicate case ')' (constant 41 of type byte) in expression switch\n\t/tmp/tmpye1xmzta_test.go:18:14:\
    \ previous case\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_levels []int\n    var levels []int\n    var level\
    \ int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n\
    \    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n \
    \   var s int\n    var t int\n    var u int\n    var v int\n    var w int\n  \
    \  var x int\n    var y int\n    var z int\n    var a int\n    var b int\n   \
    \ var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var\
    \ h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m\
    \ int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n\
    \    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n \
    \   var x int\n    var y int\n    var z int\n    var a int\n    var b int\n  \
    \  var c int\n    var d int\n    var e int\n    var f int\n    var g int\n   \
    \ var h int\n    var i int\n    var j int\n    var k int\n    var l int\n    var\
    \ m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r\
    \ int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n\
    \    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n \
    \   var c int\n    var d int\n    var e int\n    var f int\n    var g int\n  \
    \  var h int\n    var i int\n    var j int\n    var k int\n    var l int\n   \
    \ var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var\
    \ r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w\
    \ int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n\
    \    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n \
    \   var h int\n    var i int\n    var j int\n    var k int\n    var l int\n  \
    \  var m int\n    var n int\n    var o int\n    var p int\n    var q int\n   \
    \ var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var\
    \ w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b\
    \ int\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp62tn5a5u_test.go:139:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    levels := make([]int, 0)\n\
    \    level := 0\n    level := 0\n    for _, char := range paren_string {\n   \
    \     if char == '(' {\n            level++\n        } else if char == ')' {\n\
    \            level--\n        }\n        if level == 0 {\n            levels =\
    \ append(levels, level)\n        }\n    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpif1nw2o7_test.go:15:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level int = -1\n    var max_level_string string\
    \ = \"\"\n    var paren_levels []int\n    for _, group := range strings.Split(paren_string,\
    \ \" \") {\n        if group == \"()\" {\n            paren_levels = append(paren_levels,\
    \ 0)\n        } else {\n            level := 0\n            for _, c := range\
    \ group {\n                if c == '(' {\n                    level++\n      \
    \          } else if c == ')' {\n                    level--\n               \
    \ }\n            }\n            if level > max_level {\n                max_level\
    \ = level\n                max_level_string = group\n            }\n         \
    \   paren_levels = append(paren_levels, level)\n        }\n    }\n    return paren_levels\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wmh0tqe_test.go:15:27: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := []int{}\n    level\
    \ := 0\n    level := 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            level++\n        } else if char == ')' {\n           \
    \ level--\n        }\n        if level == 0 {\n            levels = append(levels,\
    \ level)\n        }\n    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszhvou6l_test.go:15:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level = 0\n    var max_level_string string\n  \
    \  var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_string\
    \ int\n    var max_level_string int\n    var max_level_string int\n    var max_level_\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1p3wu8rx_test.go:97:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level = 0\n    var max_level_string string\n  \
    \  var max_level_string int\n    var level_strings []string\n    var level_strings_count\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var \nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate :=\
    \ parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()()) ((()))\
    \ () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyvgy2e27_test.go:114:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string \nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7vu5mqe_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level int\n    var max_level_string string\n  \
    \  var max_level_count int\n    var current_level int\n    var current_level_string\
    \ string\n    var current_level_count int\n    var current_level_string string\n\
    \    var current_level_count int\n    var current_level_string string\n    var\
    \ current_level_count int\n    var current_level_string string\n    var current_level_count\
    \ int\n    var current_level_string string\n    var current_level_count int\n\
    \    var current_level_string string\n    var current_level_count int\n    var\
    \ current_level_string string\n    var current_level_count int\n    var current_level_string\
    \ string\n    var current_level_count int\n    var current_level_string string\n\
    \    var current_level_count int\n    var current_level_string string\n    var\
    \ current_level_count int\n    var current_level_string string\n    var current_level_count\
    \ int\n    var current_level_string string\n    var current_level_count int\n\
    \    var current_level_string string\n    var current_level_count int\n    var\
    \ current_level_string string\n    var current_level_count int\n    var current_level_string\
    \ string\n    var current_level_count int\n    var current_level_string string\n\
    \    var current_level_count int\n    var current_level_string string\n    var\
    \ current_level_count int\n    var current_level_string string\n    var current_level_count\
    \ int\n    var current_level_string string\n    var current_level_count int\n\
    \    var current_level_string string\n    var current_level_count int\n    var\
    \ current_level_string string\n    var current_level_count int\n    var current_level_string\
    \ string\n    var current_level_count int\n    var current_level_string string\n\
    \    var current_level_count int\n    var current_level_string string\n    var\
    \ current_level_count int\n    var current_level_string string\n    var current_level_count\
    \ int\n    var current_level_string string\n    var current_level_count int\n\
    \    var current_level_string string\n    var current_level_count int\n    var\
    \ current_level_string string\n    var current_level_count int\n    var current_level_string\
    \ string\n    var current_level_count int\n    var current_level_string string\n\
    \    var current_level_count int\n    var current_level_string string\n    var\
    \ current_level_count int\n    var current_level_string string\n    var current_level_count\
    \ int\n    var current_level_string string\n    var current_level_count int\n\
    \    var current_level_string string\n    var current_level_count int\n    var\
    \ current_level_string string\n    var current_level_count int\n    var current_level_string\
    \ string\n    var current_level_count int\n    var current_level_string string\n\
    \    var current_level_count int\n    var current_level_string string\n    var\
    \ current_level_count int\n    var current_level_string string\n    var current_level_count\
    \ int\n    var current_level_string string\n    var current_level_count int\n\
    \    var current_level_string string\n    var current_level_count \nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsfhwfvj3_test.go:97:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_levels []int\n    paren_string += \")\"\n    level\
    \ := 0\n    level := 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            level++\n        } else if char == ')' {\n           \
    \ level--\n        }\n        if level > 0 {\n            max_levels = append(max_levels,\
    \ level)\n        }\n    }\n    return max_levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlmwufc0_test.go:15:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string \nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7vu5mqe_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    for _, char := range paren_string {\n        if char == '('\
    \ {\n            level++\n        } else if char == ')' {\n            level--\n\
    \        }\n        if level == 0 {\n            levels = append(levels, level)\n\
    \        }\n    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmprh8hvfn4_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmprh8hvfn4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmprh8hvfn4_test.go:43:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_levels []int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var \nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate :=\
    \ parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()()) ((()))\
    \ () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7f7iip88_test.go:140:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level = 0\n    var max_level_string string\n  \
    \  var max_level_string int\n    var level_strings []string\n    var level_strings_len\
    \ int\n    var level_string string\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var level_string int\n    var level_string int\n    var level_string\
    \ int\n    var \nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate :=\
    \ parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()()) ((()))\
    \ () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpps8cafx3_test.go:114:1: expected ''IDENT'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    for _, c := range paren_string {\n        if c == '(' {\n\
    \            level++\n        } else if c == ')' {\n            level--\n    \
    \    }\n        if level == 0 {\n            levels = append(levels, level)\n\
    \        }\n    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpzp_nedo4_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmpzp_nedo4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmpzp_nedo4_test.go:43:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string += \")\"\n    paren_string\
    \ += \")\"\n    paren_string += \")\"\n    paren_string \nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp7vu5mqe_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := []int{}\n    level\
    \ := 0\n    i := 0\n    for i < len(paren_string) {\n        if paren_string[i]\
    \ == '(' {\n            level++\n        } else if paren_string[i] == ')' {\n\
    \            level--\n            if level == 0 {\n                levels = append(levels,\
    \ level)\n            }\n        }\n        i++\n    }\n    return levels\n}\n\
    \nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp3suhpy8p_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmp3suhpy8p_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmp3suhpy8p_test.go:45: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n        }\n        if level == 0 {\n        \
    \    levels = append(levels, level)\n        }\n    }\n    return levels\n}\n\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmps4t_54mk_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmps4t_54mk_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmps4t_54mk_test.go:44:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_levels []int\n    var level int\n    var paren_count\
    \ int\n    var paren_level int\n    var paren_string string\n    var i int\n\n\
    \    for i = 0; i < len(paren_string); i++ {\n        paren_count = 0\n      \
    \  paren_level = 0\n        paren_string = paren_string[:i]\n        for level\
    \ = 0; level < len(paren_string); level++ {\n            if paren_string[level]\
    \ == '(' {\n                paren_count++\n                paren_level++\n   \
    \         } else if paren_string[level] == ')' {\n                paren_count--\n\
    \                if paren_count == 0 {\n                    max_levels = append(max_levels,\
    \ paren_level)\n                }\n                paren_level--\n           \
    \ }\n        }\n    }\n\n    return max_levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx6ikg87m_test.go:16:9:\
    \ paren_string redeclared in this block\n\t/tmp/tmpx6ikg87m_test.go:11:26: other\
    \ declaration of paren_string\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level = 0\n    var max_level_string string = \"\
    \"\n    var paren_levels []int\n    var paren_levels_string string\n    for _,\
    \ s := range strings.Split(paren_string, \" \") {\n        levels := 0\n     \
    \   level_string := \"\"\n        for _, c := range s {\n            if c == '('\
    \ {\n                levels++\n                level_string += c\n           \
    \ } else if c == ')' {\n                levels--\n                level_string\
    \ += c\n            }\n        }\n        if levels > max_level {\n          \
    \  max_level = levels\n            max_level_string = level_string\n        }\n\
    \        if levels == 0 {\n            paren_levels = append(paren_levels, 0)\n\
    \            paren_levels_string += level_string\n        }\n    }\n    return\
    \ paren_levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq1l6n9gz_test.go:13:9: max_level_string declared but not used

    /tmp/tmpq1l6n9gz_test.go:16:23: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_levels []int\n    var levels []int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\n    var level int\n    var level int\n    var level int\n    var level\
    \ int\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy25xxqy4_test.go:139:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := []int{}\n    level\
    \ := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if paren_string[i]\
    \ == '(' {\n            level++\n        } else if paren_string[i] == ')' {\n\
    \            level--\n            if level == 0 {\n                levels = append(levels,\
    \ i)\n            }\n        }\n    }\n    return levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpmyzxn5fs_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=5) %!s(int=12) %!s(int=15) %!s(int=26)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpmyzxn5fs_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=6)\
    \ %!s(int=13) %!s(int=22)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpmyzxn5fs_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=13)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n        }\n        if level == 0 {\n        \
    \    levels = append(levels, level)\n        }\n    }\n    return levels\n}\n\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmps4t_54mk_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmps4t_54mk_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmps4t_54mk_test.go:44:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    levels := make([]int, 0)\n\
    \    level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n        }\n        if level == 0 {\n        \
    \    levels = append(levels, level)\n        }\n    }\n    return levels\n}\n\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp8si3ab_h_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n\
    \        tmp8si3ab_h_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp8si3ab_h_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n        }\n        if level == 0 {\n        \
    \    levels = append(levels, level)\n        }\n    }\n    return levels\n}\n\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmps4t_54mk_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmps4t_54mk_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmps4t_54mk_test.go:44:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \"()\"\n    paren_string += \"()\"\n  \
    \  paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string += \"\
    ()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n    paren_string\
    \ += \"()\"\n    paren_string += \"()\"\n    paren_string += \"()\"\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp34qkif9a_test.go:77:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    index := 0\n    for index < len(paren_string) {\n        if\
    \ paren_string[index] == '(' {\n            level++\n        } else if paren_string[index]\
    \ == ')' {\n            level--\n        }\n        if level == 0 {\n        \
    \    levels = append(levels, level)\n        }\n        index++\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmphrnwmf7r_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n  \
    \      tmphrnwmf7r_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmphrnwmf7r_test.go:45:\
    \ expected '[%!s(int=4)]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \" \"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    \nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppre0sqxe_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    levels := make([]int, 0)\n \
    \   level := 0\n    i := 0\n    for ; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            level++\n        } else if paren_string[i]\
    \ == ')' {\n            level--\n            if level == 0 {\n               \
    \ levels = append(levels, level)\n            }\n        }\n    }\n    return\
    \ levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpstmkm2kb_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpstmkm2kb_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n\
    \        tmpstmkm2kb_test.go:44: expected '[%!s(int=4)]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074563
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    paren_string += \")\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n    paren_string += \"(\"\n    paren_string\
    \ += \"(\"\n    paren_string += \"(\"\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmt6d9wy_test.go:86:6: expected ''('', found TestParse_Nested_Parens

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074561
