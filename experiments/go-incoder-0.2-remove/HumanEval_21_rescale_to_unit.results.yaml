language: go_test.go
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, v := range numbers {\n  \
    \      if v < minVal {\n            minVal = v\n        }\n        if v > maxVal\
    \ {\n            maxVal = v\n        }\n    }\n    rescaledNumbers := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaledNumbers[i]\
    \ = ((numbers[i] - minVal) / (maxVal - minVal)) * 2 - 1\n    }\n    return rescaledNumbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpsysaebt1_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-0.9198396793587175) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpsysaebt1_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=-0.0020000000000000018)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpsysaebt1_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-0.6)\
    \ %!s(float64=-0.19999999999999996) %!s(float64=0.19999999999999996) %!s(float64=0.6000000000000001)\
    \ %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmpsysaebt1_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-0.19999999999999996)\
    \ %!s(float64=-0.6) %!s(float64=1) %!s(float64=0.19999999999999996) %!s(float64=0.6000000000000001)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmpsysaebt1_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.6000000000000001) %!s(float64=0.46666666666666656)\
    \ %!s(float64=1) %!s(float64=0.7333333333333334) %!s(float64=0.8666666666666667)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += 1 - smallest\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / float64(len(numbers))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4u6j5cqp_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp4u6j5cqp_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp4u6j5cqp_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp4u6j5cqp_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp4u6j5cqp_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1\n    largest -= largest%1\n    smallest /= 1\n   \
    \ largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = numbers[i]*(largest - smallest) + smallest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnkq_9ygy_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpnkq_9ygy_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezgcbbao_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpezgcbbao_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_kbq4gq_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpo_kbq4gq_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpo_kbq4gq_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50wvio3h_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp50wvio3h_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp50wvio3h_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers = make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n \
    \   }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_6i9zb45_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_6i9zb45_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp_6i9zb45_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    for _, number :=\
    \ range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnf1o59f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmphnf1o59f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        if number < minVal {\n            minVal = number\n        }\n      \
    \  if number > maxVal {\n            maxVal = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        numbers[len(numbers)-1] = number\n   \
    \ }\n    numbers[0] = minVal\n    numbers[len(numbers)-1] = maxVal\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpzdif95tx_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpzdif95tx_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpzdif95tx_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpzdif95tx_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpzdif95tx_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i, number := range numbers {\n        rescaled[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2fxxxt2h_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp2fxxxt2h_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i] - smallest) / (largest -\
    \ smallest)) * (largest - smallest) + smallest\n    }\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6ink1ffe_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp6ink1ffe_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp6ink1ffe_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1.0\n    largest -= largest%1.0\n    smallest /= 1.0\n\
    \    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        result[i] = numbers[i]*largest + smallest\n    }\n\
    \    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8grccyu_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmps8grccyu_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1\n    largest += largest%1\n    smallest /= 1\n   \
    \ largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        numbers[i] = number*(largest-smallest)+smallest\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprm550199_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmprm550199_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmprm550199_test.go:25:13: no new variables on left side of :=

    /tmp/tmprm550199_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * largest + smallest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd148fu06_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:25:13: no new variables on left side of :=

    /tmp/tmpd148fu06_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n\
    \  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp3tmhz7oe_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp3tmhz7oe_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp3tmhz7oe_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp3tmhz7oe_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp3tmhz7oe_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1.0\n    largest -= largest%1.0\n    smallest /= 1.0\n\
    \    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        result[i] = numbers[i]*((largest - smallest)/float64(len(numbers)))\
    \ + smallest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphcx4oifm_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmphcx4oifm_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h22z44n_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp7h22z44n_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) + smallest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa65ehnfg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa65ehnfg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= smallest\n    smallest += 1\n    smallest -= 1\n  \
    \  smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_8wihiwj_test.go:114:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= \nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph5agjerf_test.go:98:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - largest) / 2\n    largest += (largest - smallest)\
    \ / 2\n    numbers := make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = smallest + (numbers[i] - largest) * ((largest -\
    \ smallest) / (numbers[i] - smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8zo623rz_test.go:23:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i := range numbers {\n        numbers[i]\
    \ = numbers[i] * smallest + largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0igxroem_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0igxroem_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp0igxroem_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp0igxroem_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp0igxroem_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= 0.000000000000001\n    largest += 0.000000000000001\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2.3177933708249614e-17) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=2.498001805406601e-16)\
    \ %!s(float64=0.2500000000000001) %!s(float64=0.5) %!s(float64=0.7499999999999999)\
    \ %!s(float64=0.9999999999999998)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.2500000000000001)\
    \ %!s(float64=2.498001805406601e-16) %!s(float64=0.9999999999999998) %!s(float64=0.5)\
    \ %!s(float64=0.7499999999999999)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.2500000000000002)\
    \ %!s(float64=4.440892098500622e-16) %!s(float64=0.9999999999999996) %!s(float64=0.5)\
    \ %!s(float64=0.7499999999999998)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h22z44n_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp7h22z44n_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = ((number - min) / (max - min)) * 2.0\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_ndl1g_t_test.go:23:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5n4qu0y_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd5n4qu0y_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd5n4qu0y_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa65ehnfg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa65ehnfg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        numbers[i] *= (largest - smallest) / (numbers[i]\
    \ - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoy2qg12j_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoy2qg12j_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoy2qg12j_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps8g34f71_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmps8g34f71_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i := 0; i < len(numbers); i++ {\n  \
    \      numbers[i] = numbers[i] * smallest + largest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz66pywdk_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpz66pywdk_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpz66pywdk_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpz66pywdk_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpz66pywdk_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest + smallest\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz_optbya_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpz_optbya_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        numbers[i] = numbers[i] * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0jin6rv_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpm0jin6rv_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpm0jin6rv_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    for _, number :=\
    \ range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnf1o59f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmphnf1o59f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        rescaled[i] = number*(largest-smallest)+smallest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvitih4kg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpvitih4kg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnoi6h793_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpnoi6h793_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * (largest - smallest) + smallest\n    }\n  \
    \  return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmple1dnyo8_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        if number < minVal {\n            minVal = number\n        }\n      \
    \  if number > maxVal {\n            maxVal = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        numbers[len(numbers)-1] = numbers[len(numbers)-1]\
    \ * (maxVal-minVal) / (numbers[len(numbers)-1]-minVal)\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl8i_e36u_test.go:21:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest / smallest + smallest /\
    \ largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiujomw8b_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpiujomw8b_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    for _, number :=\
    \ range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphu5xeqbu_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmphu5xeqbu_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest % 1)\n    largest += 1 - largest\n    smallest /= (largest\
    \ - smallest + 1) * 0.5\n    largest /= (largest - smallest + 1) * 0.5\n    smallest\
    \ += 0.5\n    largest += 0.5\n    return []float64{smallest, largest}\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp45ckrm8i_test.go:21:18: invalid operation: operator % not defined on smallest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range rescaled {\n        rescaled[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmporuy_7l2_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmporuy_7l2_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmporuy_7l2_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmporuy_7l2_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmporuy_7l2_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    for _, number :=\
    \ range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphnf1o59f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmphnf1o59f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = number * largest / smallest + smallest\
    \ / largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpydsx96cj_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpydsx96cj_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * (largest - smallest) + smallest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnjorf8k_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmppnjorf8k_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        numbers[len(numbers)-1] = number\n    }\n    numbers[0] =\
    \ min\n    numbers[len(numbers)-1] = max\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp2yq1c86g_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp2yq1c86g_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp2yq1c86g_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp2yq1c86g_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp2yq1c86g_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = smallest + (numbers[i] - smallest) * (largest\
    \ - smallest) / (largest - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5rri9_vz_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5rri9_vz_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp5rri9_vz_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn3ttvsu2_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpn3ttvsu2_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpn3ttvsu2_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= (largest - smallest)\n    largest /= (largest - smallest)\n \
    \   for _, number := range numbers {\n        number *= (largest - smallest)\n\
    \        number += smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpp3d6mq_i_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpp3d6mq_i_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpp3d6mq_i_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpp3d6mq_i_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpp3d6mq_i_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptm1y0p5e_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptm1y0p5e_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / float64(len(numbers))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoqk0ysj9_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoqk0ysj9_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := range numbers\
    \ {\n        numbers[i] /= (largest - smallest)\n        numbers[i] *= (largest\
    \ - smallest)\n        numbers[i] += smallest\n    }\n    return numbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v_51udt_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp8v_51udt_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp8v_51udt_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp600armp5_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp600armp5_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number\n    }\n    for i := range numbers\
    \ {\n        numbers[i] *= (largest - smallest) / (numbers[i] - smallest)\n  \
    \  }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwevbnlgk_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpwevbnlgk_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpwevbnlgk_test.go:25:13: no new variables on left side of :=

    /tmp/tmpwevbnlgk_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp600armp5_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp600armp5_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa65ehnfg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa65ehnfg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += 1\n\
    \    largest += 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp74j3zofn_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp74j3zofn_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= 0.5\n    largest += 0.5\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpa4rcuy8l_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpa4rcuy8l_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpa4rcuy8l_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpa4rcuy8l_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpa4rcuy8l_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        if number < minVal {\n            minVal = number\n        }\n      \
    \  if number > maxVal {\n            maxVal = number\n        }\n    }\n\n   \
    \ // If all numbers are the same, return it\n    if minVal == maxVal {\n     \
    \   return numbers\n    }\n\n    // If all numbers are the same, return it\n \
    \   if minVal == 0 {\n        return make([]float64, len(numbers))\n    }\n\n\
    \    // If all numbers are the same, return it\n    if maxVal == 1 {\n       \
    \ return make([]float64, len(numbers))\n    }\n\n    // If all numbers are the\
    \ same, return it\n    if maxVal == 0 {\n        return make([]float64, len(numbers))\n\
    \    }\n\n    // If all numbers are the same, return it\n    if minVal == 1 {\n\
    \        return make([]float64, len(numbers))\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if maxVal == 1 {\n        return make([]float64,\
    \ len(numbers))\n    }\n\n    // If all numbers are the same, return it\n    if\
    \ minVal == maxVal {\n        return make([]float64, len(numbers))\n    }\n\n\
    \    // If all numbers are the same, return it\n    if minVal == 0 {\n       \
    \ return make([]float64, len(numbers))\n    }\n\n    // If all numbers are the\
    \ same, return it\n    if maxVal == 1 {\n        return make([]float64, len(numbers))\n\
    \    }\n\n    // If all numbers are the same, return it\n    if minVal == 1 {\n\
    \        return make([]float64, len(numbers))\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if maxVal == 1 {\n        return make([]float64,\
    \ len(numbers))\n    }\n\n    // If all numbers are the same, return it\n    if\
    \ minVal == maxVal {\n        return make([]float64, len(numbers))\n    }\n\n\
    \    // If all numbers are the same, return it\n    if minVal == 0 {\n       \
    \ return make([]float64, len(numbers))\n    }\n\n    // If all numbers are the\
    \ same, return it\n    if maxVal == 1 {\n        return make([]float64, len(numbers))\n\
    \    }\n\n    // If all numbers are the same, return it\n    if minVal == 1 {\n\
    \        return make([]float64, len(numbers))\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if maxVal == 1 {\n        return make([]float64,\
    \ len(numbers))\n    }\n\n    // If all numbers are the same, return it\n    if\
    \ minVal == maxVal \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl03x_sak_test.go:104:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= smallest*largest\n\
    \    largest -= smallest*largest\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= smallest*largest\n    largest -= smallest*largest\n    smallest\
    \ /= largest\n    largest /= largest\n    smallest -= smallest*largest\n    largest\
    \ -= smallest*largest\n    return []float64{smallest, largest}\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp67mepaoj_test.go:53: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=0) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp67mepaoj_test.go:53: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0) %!s(float64=1)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp67mepaoj_test.go:53:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp67mepaoj_test.go:53: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0) %!s(float64=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (numbers[len(numbers)-1]\
    \ - largest)/2\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpwnezprzw_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=+Inf) %!s(float64=-Inf)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpwnezprzw_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.16666666666666666)\
    \ %!s(float64=-0.16666666666666666) %!s(float64=1.1666666666666667) %!s(float64=0.5)\
    \ %!s(float64=0.8333333333333334)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpwnezprzw_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.16666666666666666)\
    \ %!s(float64=-0.16666666666666666) %!s(float64=1.1666666666666667) %!s(float64=0.5)\
    \ %!s(float64=0.8333333333333334)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ -= (largest - numbers[0]) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number -= smallest\n        number *= (largest - number)\
    \ / (largest - numbers[0])\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmph_oxi__3_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmph_oxi__3_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmph_oxi__3_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmph_oxi__3_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmph_oxi__3_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * largest + smallest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd148fu06_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:25:13: no new variables on left side of :=

    /tmp/tmpd148fu06_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) + smallest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= (largest - smallest)\n    largest /= (largest - smallest)\n \
    \   for _, number := range numbers {\n        number *= (largest - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpwnzusnmz_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpwnzusnmz_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpwnzusnmz_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpwnzusnmz_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpwnzusnmz_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest + smallest\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhr1ecdk_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpdhr1ecdk_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * largest + smallest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd148fu06_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:25:13: no new variables on left side of :=

    /tmp/tmpd148fu06_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := range numbers\
    \ {\n        numbers[i] /= (largest - smallest)\n        numbers[i] *= (largest\
    \ - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps98dg_31_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmps98dg_31_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmps98dg_31_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjxfathpx_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpjxfathpx_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpjxfathpx_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpjxfathpx_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpjxfathpx_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5n4qu0y_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd5n4qu0y_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd5n4qu0y_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest += largest\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpivdx8lfj_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpivdx8lfj_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpivdx8lfj_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpivdx8lfj_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpivdx8lfj_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        number *= (largest - smallest)\
    \ / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpysydhagy_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpysydhagy_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpysydhagy_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpysydhagy_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpysydhagy_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        numbers[i] *= (largest - smallest) / (len(numbers)\
    \ - i)\n        numbers[i] += smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5wti1uy_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd5wti1uy_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd5wti1uy_test.go:25:13: no new variables on left side of :=

    /tmp/tmpd5wti1uy_test.go:30:23: invalid operation: (largest - smallest) / (len(numbers)
    - i) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += 1\n\
    \    largest += 1\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest += 0.5\n\
    \    largest += 0.5\n    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk6cfmrsv_test.go:114:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1\n    largest -= largest%1\n    smallest /= 1\n   \
    \ largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i := 0;\
    \ i < len(numbers); i++ {\n        rescaled[i] = numbers[i]*(largest-smallest)+smallest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_0gmdvx__test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_0gmdvx__test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.00000000001\n    largest += 0.00000000001\n    smallest /= largest\n  \
    \  largest /= largest\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.00000000001\n    largest += 0.00000000001\n    smallest /= largest\n  \
    \  largest /= largest\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.00000000001\n    largest += 0.00000000001\n    smallest /= largest\n  \
    \  largest /= largest\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpycihso1o_test.go:87:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        if number < minVal {\n            minVal = number\n        }\n      \
    \  if number > maxVal {\n            maxVal = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        numbers[len(numbers)-1] = number\n   \
    \ }\n    for _, number := range numbers {\n        numbers[len(numbers)-1] = number\
    \ * (maxVal - minVal) / (len(numbers)-1)\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp55cb7dzg_test.go:25:35: invalid operation: number * (maxVal - minVal)
    / (len(numbers) - 1) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i] * smallest + largest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9i_mnn55_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp9i_mnn55_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp9i_mnn55_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest += 0.5\n    largest\
    \ += 0.5\n    for _, number := range numbers {\n        number *= (largest - smallest)\
    \ / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp6_0nmmvs_test.go:48: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp6_0nmmvs_test.go:48: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp6_0nmmvs_test.go:48: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp6_0nmmvs_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp6_0nmmvs_test.go:48: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vkr1wmd_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_vkr1wmd_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := 0; i <\
    \ len(numbers); i++ {\n        numbers[i] *= (largest - smallest) / (numbers[i]\
    \ - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoy2qg12j_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpoy2qg12j_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpoy2qg12j_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5n4qu0y_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd5n4qu0y_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd5n4qu0y_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number\n\
    \    }\n    numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n   \
    \ return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp8m4zrdpv_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp8m4zrdpv_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=49.9) %!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp8m4zrdpv_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp8m4zrdpv_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=1) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp8m4zrdpv_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=11) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jecfu1k_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_jecfu1k_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp_jecfu1k_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_jecfu1k_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp_jecfu1k_test.go:27:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_jecfu1k_test.go:28:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    for _, number := range numbers {\n        number *= (max - min)\
    \ / (max - min)\n        number += min\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * (largest - smallest) + smallest\n    }\n    return numbers\n}\n\n\
    func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmjlar352_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpmjlar352_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpmjlar352_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpmjlar352_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpmjlar352_test.go:27:13: no new variables on left side of :=

    /tmp/tmpmjlar352_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers = make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptdd7noa7_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptdd7noa7_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (numbers[0] - numbers[1])\n    largest\
    \ -= (largest - numbers[0]) / (numbers[0] - numbers[1])\n    smallest += numbers[1]\n\
    \    largest += numbers[1]\n    numbers := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        numbers[i] = smallest + (largest - smallest)\
    \ * (float64(i) / float64(len(numbers)))\n    }\n    return numbers\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp59yd9e82_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * largest + smallest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd148fu06_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:25:13: no new variables on left side of :=

    /tmp/tmpd148fu06_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    return []float64{smallest, largest}\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r8qhm0r_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp6r8qhm0r_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp6r8qhm0r_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp6r8qhm0r_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vkr1wmd_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_vkr1wmd_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * smallest + largest\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphe7dy9nj_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmphe7dy9nj_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    min -= 0.5\n    max += 0.5\n    numbers\
    \ = make([]float64, len(numbers))\n    for i, n := range numbers {\n        numbers[i]\
    \ = ((n - min) / (max - min)) * 2.0\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpa9to1kn5_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=-0.06134969325153374) %!s(float64=-0.06134969325153374)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpa9to1kn5_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=-1.933463796477495)\
    \ %!s(float64=-1.933463796477495)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpa9to1kn5_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=-0.2)\
    \ %!s(float64=-0.2) %!s(float64=-0.2) %!s(float64=-0.2) %!s(float64=-0.2)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpa9to1kn5_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=-0.2) %!s(float64=-0.2) %!s(float64=-0.2)\
    \ %!s(float64=-0.2) %!s(float64=-0.2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpa9to1kn5_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=-4.2)\
    \ %!s(float64=-4.2) %!s(float64=-4.2) %!s(float64=-4.2) %!s(float64=-4.2)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i, number := range numbers {\n        rescaled[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpao2f6fin_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpao2f6fin_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i := range numbers {\n        rescaled[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h22z44n_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp7h22z44n_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= 0.000000000000001\n    largest += 0.000000000000001\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2.3177933708249614e-17) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=2.498001805406601e-16)\
    \ %!s(float64=0.2500000000000001) %!s(float64=0.5) %!s(float64=0.7499999999999999)\
    \ %!s(float64=0.9999999999999998)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.2500000000000001)\
    \ %!s(float64=2.498001805406601e-16) %!s(float64=0.9999999999999998) %!s(float64=0.5)\
    \ %!s(float64=0.7499999999999999)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpdbd21z5u_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.2500000000000002)\
    \ %!s(float64=4.440892098500622e-16) %!s(float64=0.9999999999999996) %!s(float64=0.5)\
    \ %!s(float64=0.7499999999999998)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest += largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i, number := range numbers {\n        rescaled[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpao2f6fin_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpao2f6fin_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptm1y0p5e_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptm1y0p5e_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / 2\n    largest += (largest - numbers[0])\
    \ / 2\n    smallest /= 2\n    largest /= 2\n    smallest -= (smallest - numbers[0])\
    \ / 2\n    largest += (largest - numbers[0]) / 2\n    smallest /= 2\n    largest\
    \ /= 2\n    return []float64{smallest, largest}\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp3fb989gc_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.75) %!s(float64=27.193749999999998)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp3fb989gc_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=34.36875) %!s(float64=12.5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp3fb989gc_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.375)\
    \ %!s(float64=2.375)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n\
    \        tmp3fb989gc_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.6875) %!s(float64=1.9375)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n        tmp3fb989gc_test.go:49:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=4.4375) %!s(float64=3.1875)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ min float64\n    var max float64\n    for _, number := range numbers {\n   \
    \     if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        numbers[len(numbers)-1] = number\n    }\n    numbers = numbers[:len(numbers)-1]\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number\n\
    \    }\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = number\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp4kfanyy5_test.go:51: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n\
    \        tmp4kfanyy5_test.go:51: expected '[%!s(float64=1) %!s(float64=0)]', got\
    \ '[%!s(float64=100)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2 (0.00s)\n\
    \        tmp4kfanyy5_test.go:51: expected '[%!s(float64=0) %!s(float64=0.25) %!s(float64=0.5)\
    \ %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2) %!s(float64=3)\
    \ %!s(float64=3)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n  \
    \      tmp4kfanyy5_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1) %!s(float64=5)\
    \ %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4 (0.00s)\n  \
    \      tmp4kfanyy5_test.go:51: expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1)\
    \ %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += (numbers[0] - smallest) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number -= smallest\n        number /= (largest - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        rescaled[i] = (number - smallest) / (largest - smallest)\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobz5a9ha_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpobz5a9ha_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers = make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        numbers[i] = smallest + (numbers[i] - smallest) * (largest\
    \ - smallest) / (largest - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm5nh5r__test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpmm5nh5r__test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpjxfathpx_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpjxfathpx_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpjxfathpx_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpjxfathpx_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpjxfathpx_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074767
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= 0.0000000001\n    largest += 0.0000000001\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpj_5_wrwf_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpj_5_wrwf_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpj_5_wrwf_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpj_5_wrwf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpj_5_wrwf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    min -= (min % 1)\n    max -= (max % 1)\n\
    \    min /= (max - min)\n    max /= (max - min)\n    for _, n := range numbers\
    \ {\n        n *= (max - min)\n        n += min\n    }\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcqpse_m8_test.go:21:13: invalid operation: operator % not defined on min
    (variable of type float64)

    /tmp/tmpcqpse_m8_test.go:22:13: invalid operation: operator % not defined on max
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) + smallest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += (numbers[0] - smallest) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number *= (largest - smallest) / (number - smallest)\n  \
    \  }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptm1y0p5e_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptm1y0p5e_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezgcbbao_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpezgcbbao_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    result := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        result[i] = (numbers[i] - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpnj2j2j9__test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpnj2j2j9__test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpnj2j2j9__test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpnj2j2j9__test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpnj2j2j9__test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i]-smallest)/(largest-smallest))*2\
    \ - 1\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaefhd6tp_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpaefhd6tp_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpaefhd6tp_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest % 1)\n    largest += (largest % 1)\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxjww81ty_test.go:21:18: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpxjww81ty_test.go:22:17: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    return []float64{smallest, largest}\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6r8qhm0r_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp6r8qhm0r_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp6r8qhm0r_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp6r8qhm0r_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest + smallest\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhr1ecdk_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpdhr1ecdk_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / float64(len(numbers))\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_masvg9t_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_masvg9t_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range rescaled {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpclgqq1ls_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpclgqq1ls_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1.0\n    largest -= largest%1.0\n    smallest /= 1.0\n\
    \    largest /= 1.0\n    result := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        result[i] = numbers[i]*((largest-smallest)/(numbers[i]+smallest))+smallest\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx8gnbpzx_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpx8gnbpzx_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        result[i] = (number - smallest) / (largest - smallest)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9le3h5a__test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp9le3h5a__test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * (largest - smallest) + smallest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnjorf8k_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmppnjorf8k_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074765
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa65ehnfg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa65ehnfg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest += largest\n  \
    \  smallest /= largest\n    smallest += largest\n    smallest /= largest\n   \
    \ smallest += largest\n    smallest /= largest\n    smallest += largest\n    smallest\
    \ /= largest\n    smallest += largest\n    smallest /= largest\n    smallest +=\
    \ largest\n    smallest /= largest\n    smallest += largest\n    smallest /= largest\n\
    \    smallest += largest\n    smallest /= largest\n    smallest += largest\n \
    \   smallest /= largest\n    smallest += largest\n    smallest /= largest\n  \
    \  smallest += largest\n    smallest /= largest\n    smallest += largest\n   \
    \ smallest /= largest\n    smallest += largest\n    smallest /= largest\n    smallest\
    \ += largest\n    smallest /= largest\n    smallest += largest\n    smallest /=\
    \ largest\n    smallest += largest\n    smallest /= largest\n    smallest += largest\n\
    \    smallest /= largest\n    smallest += largest\n    smallest /= largest\n \
    \   smallest += largest\n    smallest /= largest\n    smallest += largest\n  \
    \  smallest /= largest\n    smallest += largest\n    smallest /= largest\n   \
    \ smallest += largest\n    smallest /= largest\n    smallest += largest\n    smallest\
    \ /= largest\n    smallest += largest\n    smallest /= largest\n    smallest +=\
    \ largest\n    smallest /= largest\n    smallest += largest\n    smallest /= largest\n\
    \    smallest += largest\n    smallest /= largest\n    smallest += largest\n \
    \   smallest /= largest\n    smallest += largest\n    smallest /= largest\n  \
    \  smallest += largest\n    smallest /= largest\n    smallest += largest\n   \
    \ smallest /= largest\n    smallest += largest\n    smallest /= largest\n    smallest\
    \ += largest\n    smallest /= largest\n    smallest += largest\n    smallest /=\
    \ largest\n    smallest += largest\n    smallest /= largest\n    smallest += largest\n\
    \    smallest /= largest\n    smallest += largest\n    smallest /= largest\n \
    \   smallest += largest\n    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6xn0iuu_test.go:99:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        if number < minVal {\n            minVal = number\n        }\n      \
    \  if number > maxVal {\n            maxVal = number\n        }\n    }\n    for\
    \ _, number := range numbers {\n        numbers[len(numbers)-1] -= minVal\n  \
    \      numbers[0] -= maxVal\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp078vy15m_test.go:21:12: number declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number * largest + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpygzngt8r_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpygzngt8r_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpygzngt8r_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest + smallest\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz_optbya_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpz_optbya_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa65ehnfg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa65ehnfg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) + smallest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp37gxj_nf_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    for _, number := range numbers {\n    \
    \    number *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn801ek9__test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpn801ek9__test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpn801ek9__test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpn801ek9__test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        minVal = math.Min(minVal, number)\n        maxVal = math.Max(maxVal,\
    \ number)\n    }\n    rescaledNumbers := make([]float64, len(numbers))\n    for\
    \ i := 0; i < len(numbers); i++ {\n        rescaledNumbers[i] = ((numbers[i] -\
    \ minVal) / (maxVal - minVal)) * 2 - 1\n    }\n    return rescaledNumbers\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe0tvqdue_test.go:14:18: undefined: math

    /tmp/tmpe0tvqdue_test.go:15:18: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := range numbers\
    \ {\n        numbers[i] /= (largest - smallest)\n        numbers[i] *= (largest\
    \ - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps98dg_31_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmps98dg_31_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmps98dg_31_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = numbers[i] * largest + smallest\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplx3lknj__test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmplx3lknj__test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmplx3lknj__test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i, number :=\
    \ range numbers {\n        rescaled[i] = (number - min) / (max - min)\n    }\n\
    \    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmprmz75_tz_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmprmz75_tz_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmprmz75_tz_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmprmz75_tz_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmprmz75_tz_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptm1y0p5e_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptm1y0p5e_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074766
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * (largest - smallest) + smallest\n    }\n  \
    \  return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmple1dnyo8_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmple1dnyo8_test.go:27:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest + smallest - 1\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaknh6q5_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpaaknh6q5_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vkr1wmd_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_vkr1wmd_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ *= largest\n    largest *= largest\n    return []float64{smallest, largest}\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf7x4j7g__test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpf7x4j7g__test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpf7x4j7g__test.go:23:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpf7x4j7g__test.go:24:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest % 1)\n    largest += (largest % 1)\n    smallest /=\
    \ (largest - smallest)\n    largest /= (largest - smallest)\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest *= (largest - smallest)\n    largest *= (largest\
    \ - smallest)\n    return []float64{smallest, largest}\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps0zhsuwt_test.go:21:18: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmps0zhsuwt_test.go:22:17: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw1t554uz_test.go:98:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        rescaled[i]\
    \ = (n - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpkg6yqe5__test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpkg6yqe5__test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpkg6yqe5__test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpkg6yqe5__test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpkg6yqe5__test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ rescaled_numbers []float64\n    var min_number float64\n    var max_number float64\n\
    \    for _, number := range numbers {\n        if min_number > number {\n    \
    \        min_number = number\n        }\n        if max_number < number {\n  \
    \          max_number = number\n        }\n    }\n    rescaled_numbers = make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled_numbers[i]\
    \ = min_number + (numbers[i] - min_number) * (max_number - min_number) / (max_number\
    \ - min_number)\n    }\n    return rescaled_numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_fykfdyt_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_fykfdyt_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_fykfdyt_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp_fykfdyt_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp_fykfdyt_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    for _, number := range numbers {\n        number *= (max - min)\
    \ / (max - min)\n        number += min\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp0papnmcz_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    smallest -= (smallest - numbers[0])/2\n    largest += (largest - numbers[0])/2\n\
    \    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2uxnyieg_test.go:66:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        rescaled[i]\
    \ = (n - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpkg6yqe5__test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmpkg6yqe5__test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpkg6yqe5__test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpkg6yqe5__test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpkg6yqe5__test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.5\n    largest\
    \ += 0.5\n    for _, number := range numbers {\n        number *= largest\n  \
    \      number /= smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpvsv89smg_test.go:49: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpvsv89smg_test.go:49: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpvsv89smg_test.go:49: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpvsv89smg_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpvsv89smg_test.go:49: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    var\
    \ minVal float64\n    var maxVal float64\n    for _, number := range numbers {\n\
    \        if number < minVal {\n            minVal = number\n        }\n      \
    \  if number > maxVal {\n            maxVal = number\n        }\n    }\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n\
    \        rescaled[i] = (numbers[i] - minVal) / (maxVal - minVal)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp6sngft8w_test.go:45: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp6sngft8w_test.go:45: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp6sngft8w_test.go:45: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp6sngft8w_test.go:45:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp6sngft8w_test.go:45: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    smallest -= largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest -= largest\n    smallest /= 2\n\
    \    largest /= 2\n    smallest += largest\n    smallest -= largest\n    smallest\
    \ /= 2\n    largest /= 2\n    smallest += largest\n    smallest -= largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest -=\
    \ largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest\
    \ -= largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    smallest -= largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest -= largest\n    smallest /= 2\n\
    \    largest /= 2\n    smallest += largest\n    smallest -= largest\n    smallest\
    \ /= 2\n    largest /= 2\n    smallest += largest\n    smallest -= largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest -=\
    \ largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest\
    \ -= largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprggorops_test.go:106:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074770
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1\n    largest += largest%1\n    smallest /= 1\n   \
    \ largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        rescaled[i] = numbers[i]*(largest - smallest) + smallest\n\
    \    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n \
    \ candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5okepzm7_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp5okepzm7_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps4feao_q_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmps4feao_q_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmps4feao_q_test.go:25:13: no new variables on left side of :=

    /tmp/tmps4feao_q_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += 1\n\
    \    largest += 1\n    smallest /= 10\n    largest /= 10\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jsoagbh_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_jsoagbh_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp_jsoagbh_test.go:27:13: no new variables on left side of :=

    /tmp/tmp_jsoagbh_test.go:29:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest / smallest + smallest /\
    \ largest\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiujomw8b_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpiujomw8b_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += (numbers[0] - smallest) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number *= (largest - smallest) / (number - smallest)\n  \
    \  }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpf0gvo87d_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = number * smallest + largest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvo1f8zlu_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpvo1f8zlu_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpvo1f8zlu_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += 1\n\
    \    largest += 1\n    smallest /= 10\n    largest /= 10\n    smallest -= smallest%1\n\
    \    largest -= largest%1\n    smallest /= 10\n    largest /= 10\n    smallest\
    \ -= smallest%1\n    largest -= largest%1\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptjd9fvzy_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptjd9fvzy_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmptjd9fvzy_test.go:27:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptjd9fvzy_test.go:28:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmptjd9fvzy_test.go:31:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmptjd9fvzy_test.go:32:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.5\n    largest\
    \ += 0.5\n    numbers := make([]float64, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = number * largest + smallest\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfnjzhz19_test.go:25:13: no new variables on left side of :=

    /tmp/tmpfnjzhz19_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vkr1wmd_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp_vkr1wmd_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074768
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaled[i]\
    \ = (numbers[i] - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpg4o2hvuj_test.go:44: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number\n\
    \    }\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = number/largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpvohh35df_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=0.000803209625664154)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpvohh35df_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=0.01)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpvohh35df_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=0.16)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpvohh35df_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=0.12)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpvohh35df_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=0.05777777777777778)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = ((numbers[i] - smallest) / (largest -\
    \ smallest))\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9d20c4e8_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp9d20c4e8_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp9d20c4e8_test.go:25:13: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51j4ij_f_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmp51j4ij_f_test.go:25:13: no new variables on left side of :=

    /tmp/tmp51j4ij_f_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074764
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp7rp43m_5_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074763
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= \nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph5agjerf_test.go:98:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074761
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * largest + smallest\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd148fu06_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    /tmp/tmpd148fu06_test.go:25:13: no new variables on left side of :=

    /tmp/tmpd148fu06_test.go:27:22: undefined: number

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= largest\n    largest += smallest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp40wz8nbo_test.go:108:6: expected ''('', found TestRescale_To_Unit

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += (numbers[0] - smallest) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number -= smallest\n        number /= (largest - smallest)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp6avglfb8_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074769
- exit_code: 2
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa65ehnfg_test.go:21:17: invalid operation: operator % not defined on smallest
    (variable of type float64)

    /tmp/tmpa65ehnfg_test.go:22:16: invalid operation: operator % not defined on largest
    (variable of type float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074762
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i := range rescaled\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmphrb_mysf_test.go:47: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.010224948875255624) %!s(float64=0.9897750511247444)]'\n\
    \    --- FAIL: TestRescale_To_Unit/test_num__1 (0.00s)\n        tmphrb_mysf_test.go:47:\
    \ expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0.9902152641878669)\
    \ %!s(float64=0.009784735812133072)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmphrb_mysf_test.go:47: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.1)\
    \ %!s(float64=0.3) %!s(float64=0.5) %!s(float64=0.7) %!s(float64=0.9)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmphrb_mysf_test.go:47:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.3) %!s(float64=0.1) %!s(float64=0.9)\
    \ %!s(float64=0.5) %!s(float64=0.7)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmphrb_mysf_test.go:47: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.3)\
    \ %!s(float64=0.1) %!s(float64=0.9) %!s(float64=0.5) %!s(float64=0.7)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074771
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074771
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) / float64(len(numbers))\n    }\n \
    \   return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpz2bxojkp_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=2) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpz2bxojkp_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=100) %!s(float64=49.9)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpz2bxojkp_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=1) %!s(float64=2)\
    \ %!s(float64=3) %!s(float64=4) %!s(float64=5)]'\n    --- FAIL: TestRescale_To_Unit/test_num__3\
    \ (0.00s)\n        tmpz2bxojkp_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=2) %!s(float64=1)\
    \ %!s(float64=5) %!s(float64=3) %!s(float64=4)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpz2bxojkp_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=12) %!s(float64=11)\
    \ %!s(float64=15) %!s(float64=13) %!s(float64=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074772
