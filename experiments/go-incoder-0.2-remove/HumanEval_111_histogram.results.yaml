language: go_test.go
name: HumanEval_111_histogram
results:
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else\
    \ {\n            histogram[letter]++\n        }\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4kjo4atg_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbigk460m_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpej2lkdgl_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2dqe6jo_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        histogram[letter]++\n\
    \    }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuefrbwnp_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else\
    \ {\n            histogram[letter]++\n        }\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4kjo4atg_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpej2lkdgl_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbigk460m_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ histogram[letter]; !ok {\n            histogram[letter] = 1\n        } else\
    \ {\n            histogram[letter]++\n        }\n    }\n    return histogram\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4kjo4atg_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpej2lkdgl_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; ok {\n            letters[letter]++\n        } else {\n   \
    \         letters[letter] = 1\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2pngm08_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if letters[letter]\
    \ == 0 {\n            letters[letter] = 1\n        } else {\n            letters[letter]++\n\
    \        }\n    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprp9flp66_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := map[string]int{}\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbigk460m_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        letters[letter]++\n\
    \    }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx9b35jj__test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range strings.Split(test, \" \") {\n        if _, ok :=\
    \ letters[letter]; !ok {\n            letters[letter] = 1\n        } else {\n\
    \            letters[letter]++\n        }\n    }\n    return letters\n}\n\nfunc\
    \ TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpezl7diha_test.go:14:28: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
