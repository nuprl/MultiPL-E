language: go_test.go
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * a + b + c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9_81c98_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if a > b {\n        if a > c {\n            return area\
    \ / 2\n        } else {\n            return -1\n        }\n    } else {\n    \
    \    if b > c {\n            return area / 2\n        } else {\n            return\
    \ -1\n        }\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz_az_l1d_test.go:28:20: cannot use area / 2 (value of type int) as type
    float64 in return statement

    /tmp/tmpz_az_l1d_test.go:34:20: cannot use area / 2 (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if area > 0 {\n        return fmt.Sprintf(\"%.2f\", area)\n\
    \    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd304x4so_test.go:27:16: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhazqabk_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    return float64(a * b * c) / float64(a + b\
    \ + c)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkjgmapz2_test.go:51: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkjgmapz2_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkjgmapz2_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkjgmapz2_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkjgmapz2_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wfwbavq_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * a + b + c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n         \
    \   return (a+b+c) / 2\n        } else {\n            return -1\n        }\n \
    \   } else {\n        if c > b {\n            return -1\n        } else {\n  \
    \          return (a+b+c) / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd8yf1rrr_test.go:17:20: cannot use (a + b + c) / 2 (value of type int)
    as type float64 in return statement

    /tmp/tmpd8yf1rrr_test.go:25:20: cannot use (a + b + c) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := a * b * c\n    \n    if area > 0 {\n        return float64(area)\
    \ / float64(a + b + c)\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmph9wrzi1l_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmph9wrzi1l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=1.5384615384615385)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmph9wrzi1l_test.go:50: expected\
    \ '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmph9wrzi1l_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmph9wrzi1l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmph9wrzi1l_test.go:50: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmph9wrzi1l_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmph9wrzi1l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=2.857142857142857)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wfwbavq_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a\
    \ * a + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteh1vkm1_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a\
    \ * a + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteh1vkm1_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = (a * b) / c\n    } else {\n        area = -1\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwej449k0_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9_81c98_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    area := (a + b + c) / 2\n    if area == 0 {\n        return -1\n    }\n \
    \   area /= 2\n    if area > 1 {\n        return area\n    }\n    return -1\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf8ivyr6t_test.go:24:16: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a\
    \ * a + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteh1vkm1_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b {\n        return -1\n    }\n   \
    \ if b > c {\n        return -1\n    }\n    if a + b > c {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp24l9bpne_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp24l9bpne_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=1.5384615384615385)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmp24l9bpne_test.go:48: expected\
    \ '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp24l9bpne_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmp24l9bpne_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp24l9bpne_test.go:48: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmp24l9bpne_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp24l9bpne_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=2.857142857142857)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a > b+c {\n        return -1\n  \
    \  }\n    if b > a+c {\n        return -1\n    }\n    if c > a+b {\n        return\
    \ -1\n    }\n    \n    area := 0\n    \n    area += a * b * c / 2\n    \n    if\
    \ area > 0 {\n        return float64(area)\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpgg232kvn_test.go:57: expected '%!s(float64=6)', got '%!s(float64=30)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpgg232kvn_test.go:57:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=80)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpgg232kvn_test.go:57: expected '%!s(float64=1.73)', got '%!s(float64=4)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpgg232kvn_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpgg232kvn_test.go:57: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=175)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpgg232kvn_test.go:57: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    area := (a + b + c) / 2\n    if area == 0 {\n        return -1\n    }\n \
    \   if area > 0 {\n        return float64(area)\n    }\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2an_ue53_test.go:49: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp2an_ue53_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp2an_ue53_test.go:49: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp2an_ue53_test.go:49:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp2an_ue53_test.go:49: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp2an_ue53_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp2an_ue53_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp2an_ue53_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if area > 0 {\n        return float64(area)\n    }\n  \
    \  \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area_triangle := 0\n    if a + b > c {\n \
    \       area_triangle = a / 2\n    } else {\n        area_triangle = b / 2\n \
    \   }\n    if a + c > b {\n        area_triangle = area_triangle + c / 2\n   \
    \ } else {\n        area_triangle = area_triangle + a / 2\n    }\n    return area_triangle\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb26804yu_test.go:26:12: cannot use area_triangle (variable of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a + (b - c) / 2\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ihl8i6u_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0) \n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpv3hezyk9_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpv3hezyk9_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpv3hezyk9_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpv3hezyk9_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpv3hezyk9_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n \
    \   if b > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n\
    \    }\n    return (a+b+c) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpx66e3c_test.go:24:12: cannot use (a + b + c) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a * b * c / 2\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiyjhzy16_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhazqabk_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    if area == 0 {\n        return -1\n  \
    \  }\n    \n    if a > b {\n        area -= b\n    }\n    if a > c {\n       \
    \ area -= c\n    }\n    if b > c {\n        area -= a\n    }\n    \n    return\
    \ float64(area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpop7f7sfd_test.go:58: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpop7f7sfd_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpop7f7sfd_test.go:58: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpop7f7sfd_test.go:58:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpop7f7sfd_test.go:58: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpop7f7sfd_test.go:58:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpop7f7sfd_test.go:58: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmpop7f7sfd_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(float64=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wfwbavq_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhazqabk_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a+b+c)))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8wfwbavq_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a\
    \ * a + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteh1vkm1_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    area := a * b * c\n    \n    return\
    \ fmt.Sprintf(\"%.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgfeosdr2_test.go:30:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = (a * b) / c\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplzpt4mtm_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n \
    \   if b > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n\
    \    }\n    return float64(a+b+c) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp9gzjord1_test.go:48: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp9gzjord1_test.go:48:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp9gzjord1_test.go:48: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp9gzjord1_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp9gzjord1_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if area > 0 {\n        return float64(area)\n    }\n  \
    \  \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = (a * b) / c\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplzpt4mtm_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a + (b - c) * 0.5\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxayeeb8l_test.go:19:30: 0.5 (untyped float constant) truncated to int

    /tmp/tmpxayeeb8l_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * a + b + c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if area > 0 {\n        return float64(area)\n    }\n  \
    \  \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := 0\n    \n    if a > b {\n        area += a\n    }\n\
    \    \n    if b > c {\n        area += b\n    }\n    \n    if c > a {\n      \
    \  area += c\n    }\n    \n    area /= 2\n    \n    return fmt.Sprintf(\"%.2f\"\
    , area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc0s5r7ze_test.go:36:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b+c {\n        return -1\n    }\n \
    \   if b > a+c {\n        return -1\n    }\n    if c > a+b {\n        return -1\n\
    \    }\n    return (a+b+c) / 2\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphpx66e3c_test.go:24:12: cannot use (a + b + c) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    area := (a + b + c) / 2\n    if area == 0 {\n        return -1\n    }\n \
    \   area /= 2\n    area -= a\n    area -= b\n    area -= c\n    return area\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqzddehpu_test.go:26:12: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area_triangle := 0.0\n    if a + b > c {\n\
    \        area_triangle += (b + c) / 2\n    }\n    if a + c > b {\n        area_triangle\
    \ += (c + b) / 2\n    }\n    if b + c > a {\n        area_triangle += (b + c)\
    \ / 2\n    }\n    return area_triangle\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv5lip6ay_test.go:17:9: invalid operation: area_triangle += (b + c) / 2
    (mismatched types float64 and int)

    /tmp/tmpv5lip6ay_test.go:20:9: invalid operation: area_triangle += (c + b) / 2
    (mismatched types float64 and int)

    /tmp/tmpv5lip6ay_test.go:23:9: invalid operation: area_triangle += (b + c) / 2
    (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := 0\n    \n    if a > b {\n        area += a\n    }\n    \n \
    \   if b > c {\n        area += b\n    }\n    \n    if c > a {\n        area +=\
    \ c\n    }\n    \n    if area > 0 {\n        return float64(area) / float64(3.0)\n\
    \    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmptuhuybo6_test.go:61: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmptuhuybo6_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(float64=3.3333333333333335)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmptuhuybo6_test.go:61: expected\
    \ '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmptuhuybo6_test.go:61: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmptuhuybo6_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmptuhuybo6_test.go:61: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmptuhuybo6_test.go:61: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmptuhuybo6_test.go:61:\
    \ expected '%!s(int=-1)', got '%!s(float64=3.3333333333333335)'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a + (b - c) * 0.5\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxayeeb8l_test.go:19:30: 0.5 (untyped float constant) truncated to int

    /tmp/tmpxayeeb8l_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = (a * b) / c\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplzpt4mtm_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b {\n        return -1\n    }\n   \
    \ if b > c {\n        return -1\n    }\n    if a + b > c {\n        return -1\n\
    \    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp24l9bpne_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp24l9bpne_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=1.5384615384615385)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmp24l9bpne_test.go:48: expected\
    \ '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp24l9bpne_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmp24l9bpne_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmp24l9bpne_test.go:48: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmp24l9bpne_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp24l9bpne_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=2.857142857142857)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a > b {\n        if b > c {\n   \
    \         return (a+b+c) / 2\n        } else {\n            return -1\n      \
    \  }\n    } else {\n        if c > b {\n            return -1\n        } else\
    \ {\n            return (a+b+c) / 2\n        }\n    }\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp91ewcdvh_test.go:18:20: cannot use (a + b + c) / 2 (value of type int)
    as type float64 in return statement

    /tmp/tmp91ewcdvh_test.go:26:20: cannot use (a + b + c) / 2 (value of type int)
    as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a + (b - c) * (a + b + c) / 2\n    }\n  \
    \  return fmt.Sprintf(\"%.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_vo64754_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area > 0 {\n        return\
    \ fmt.Sprintf(\"%.2f\", area)\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zkcxndx_test.go:23:16: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(float64(a\
    \ * a + b * b + c * c)))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteh1vkm1_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    if area == 0 {\n        return -1\n  \
    \  }\n    \n    area /= 2\n    \n    if a > b {\n        area -= b\n    }\n  \
    \  if a > c {\n        area -= c\n    }\n    if b > c {\n        area -= a\n \
    \   }\n    \n    return float64(area)\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpuj3rfy4p_test.go:60: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpuj3rfy4p_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpuj3rfy4p_test.go:60: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpuj3rfy4p_test.go:60:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpuj3rfy4p_test.go:60: expected '%!s(int=-1)', got '%!s(float64=1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpuj3rfy4p_test.go:60:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpuj3rfy4p_test.go:60: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmpuj3rfy4p_test.go:60:\
    \ expected '%!s(int=-1)', got '%!s(float64=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c > a {\n\
    \        return -1\n    }\n    \n    return float64(a * b * c) / float64(4.0 *\
    \ float64(a) + float64(b) + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpa_hfuqog_test.go:51: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpa_hfuqog_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpa_hfuqog_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpa_hfuqog_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpa_hfuqog_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := a * b * c\n    \n    if area > 0 {\n        return float64(area)\
    \ / float64(a + b + c)\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmph9wrzi1l_test.go:50: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmph9wrzi1l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=1.5384615384615385)'\n    --- FAIL:\
    \ TestTriangle_Area/test_num__2 (0.00s)\n        tmph9wrzi1l_test.go:50: expected\
    \ '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmph9wrzi1l_test.go:50: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmph9wrzi1l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=1)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmph9wrzi1l_test.go:50: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmph9wrzi1l_test.go:50: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmph9wrzi1l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(float64=2.857142857142857)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if area > 0 {\n        return float64(area)\n    }\n  \
    \  \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate :=\
    \ triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=6)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(int=-1)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6z0e18vt_test.go:54: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__8 (0.00s)\n        tmp6z0e18vt_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(float64=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * a + b + c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    // Check that the sum of any two sides\
    \ is greater than the third side\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    // Calculate the area of the triangle\n    s := a + b + c\n    area\
    \ := s * (s - a) * (s - b) * (s - c)\n    \n    // Round the area to 2 decimal\
    \ places\n    area := round(area, 2)\n    \n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp10k8ppho_test.go:26:10: no new variables on left side of :=

    /tmp/tmp10k8ppho_test.go:26:13: undefined: round

    /tmp/tmp10k8ppho_test.go:28:12: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    if area == 0 {\n        return -1\n  \
    \  }\n    \n    area /= 2\n    \n    if area > 1 {\n        return fmt.Sprintf(\"\
    %.2f\", area)\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3344w4nj_test.go:27:16: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * a + b + c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhazqabk_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n         \
    \   return a + b + c\n        }\n        return -1\n    }\n    if b > c {\n  \
    \      return -1\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzwdiwqsi_test.go:17:20: cannot use a + b + c (value of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a + (b - c) * (c / 2)\n    }\n    return\
    \ fmt.Sprintf(\"%.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n \
    \ candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp182m1bz2_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return -1\n\
    \    }\n    \n    if area == 1 {\n        return area\n    }\n    \n    if area\
    \ == 2 {\n        return area\n    }\n    \n    if area > 2 {\n        return\
    \ area\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzc438w1s_test.go:26:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpzc438w1s_test.go:30:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpzc438w1s_test.go:34:16: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0.0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a * b * 0.5\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qhyto2g_test.go:19:24: 0.5 (untyped float constant) truncated to int

    /tmp/tmp4qhyto2g_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area := 0\n    if a + b > c {\n        area\
    \ = -1\n    } else {\n        area = a + (b - c) * 0.5\n    }\n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxayeeb8l_test.go:19:30: 0.5 (untyped float constant) truncated to int

    /tmp/tmpxayeeb8l_test.go:21:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * a + b + c)\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp_3i2s1mq_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp_3i2s1mq_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if a > b {\n        if a > c {\n            return -1\n\
    \        }\n        return area\n    }\n    \n    if b > c {\n        if b > a\
    \ {\n            return -1\n        }\n        return area\n    }\n    \n    if\
    \ c > a {\n        if c > b {\n            return -1\n        }\n        return\
    \ area\n    }\n    \n    return area\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvxqq6m4_test.go:30:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpvvxqq6m4_test.go:37:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpvvxqq6m4_test.go:44:16: cannot use area (variable of type int) as type
    float64 in return statement

    /tmp/tmpvvxqq6m4_test.go:47:12: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075384
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area_triangle := 0.0\n    if a + b > c {\n\
    \        area_triangle = a + b - c\n    } else {\n        area_triangle = a +\
    \ b + c\n    }\n    return area_triangle\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqvrll7w1_test.go:17:25: cannot use a + b - c (value of type int) as type
    float64 in assignment

    /tmp/tmpqvrll7w1_test.go:19:25: cannot use a + b + c (value of type int) as type
    float64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return -1\n\
    \    }\n    \n    area /= 2\n    \n    if area > 1 {\n        return fmt.Sprintf(\"\
    %.2f\", area)\n    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu218sz3x_test.go:28:16: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    if a + c > b {\n        return -1\n    }\n    \n    if b + c\
    \ > a {\n        return -1\n    }\n    \n    return float64(a * b * c) / float64(2\
    \ * a * b + 2 * b * c + c * a)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmph3_1x8qs_test.go:52: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmph3_1x8qs_test.go:52:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmph3_1x8qs_test.go:52: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmph3_1x8qs_test.go:52:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmph3_1x8qs_test.go:52: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075385
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    if area > 0 {\n        return fmt.Sprintf(\"%.2f\", area)\n\
    \    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd304x4so_test.go:27:16: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n   \
    \     return -1\n    }\n    \n    area := a * b * c\n    \n    return fmt.Sprintf(\"\
    %.2f\", area)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppg1rv32a_test.go:28:12: cannot use fmt.Sprintf("%.2f", area) (value of
    type string) as type float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(2.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhazqabk_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a + b + c))\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp93rfntg7_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp93rfntg7_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a+b+c))\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpg4q6gx_t_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpg4q6gx_t_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * math.Sqrt(math.Pow(a,\
    \ 2) + math.Pow(b, 2) + math.Pow(c, 2)))\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm9_81c98_test.go:24:47: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075382
- exit_code: 2
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    \n    if a + b > c {\n        return -1\n\
    \    }\n    \n    area := (a + b + c) / 2\n    \n    if area == 0 {\n        return\
    \ -1\n    }\n    \n    area /= 2\n    \n    if area > 1 {\n        return area\n\
    \    }\n    \n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0f6tup6_test.go:29:16: cannot use area (variable of type int) as type
    float64 in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    area_sum := a + b + c\n    if area_sum > c\
    \ {\n        return -1\n    }\n    if area_sum < a {\n        return -1\n    }\n\
    \    if area_sum < b {\n        return -1\n    }\n    return float64(area_sum)\
    \ / float64(2) * float64(3.14159)\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n\
    \  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6f3955hh_test.go:49: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6f3955hh_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6f3955hh_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6f3955hh_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6f3955hh_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075385
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(a + b + c)\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp84e_943v_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp84e_943v_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075382
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\nfunc triangle_area(a\
    \ int, b int, c int) float64 {\n    if a + b > c {\n        return -1\n    }\n\
    \    if a + c > b {\n        return -1\n    }\n    if b + c > a {\n        return\
    \ -1\n    }\n    return float64(a * b * c) / float64(4.0 * float64(a) + float64(b)\
    \ + float64(c))\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpn0smblah_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpn0smblah_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075384
