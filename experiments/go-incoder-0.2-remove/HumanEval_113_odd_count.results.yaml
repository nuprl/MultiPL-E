language: go_test.go
name: HumanEval_113_odd_count
results:
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i :=\
    \ range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i],\
    \ \"0\")))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa9obvt0p_test.go:15:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        output += fmt.Sprintf(\"%d\", count_odd_digits(s))\n    }\n    return\
    \ output\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwlsil44t_test.go:15:9: invalid operation: output += fmt.Sprintf("%d",
    count_odd_digits(s)) (mismatched types []string and string)

    /tmp/tmpwlsil44t_test.go:15:37: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_u3_fdn_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_wezbo1_test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_u3_fdn_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{fmt.Sprintf(\"%d\", len(strings.Split(s, \"0\")))}\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38h269j0_test.go:15:9: result declared but not used

    /tmp/tmp38h269j0_test.go:15:50: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        output := append(output, fmt.Sprintf(\"%d\", count_odd_digits(s)))\n\
    \    }\n    return output\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6dfsrcw_test.go:15:9: output declared but not used

    /tmp/tmpi6dfsrcw_test.go:15:52: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{fmt.Sprintf(\"%d\", len(strings.Split(s, \"0\")))}\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38h269j0_test.go:15:9: result declared but not used

    /tmp/tmp38h269j0_test.go:15:50: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt60g5qet_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i],\
    \ \"0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcxupauj_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i],\
    \ \"0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjt3x_6_n_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the %s\
    \ of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpcdm_blv6_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the 1234567\
    \ of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpcdm_blv6_test.go:35:\
    \ expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements\
    \ in the 3 of the input. the number of odd elements in the 11111111 of the input.]'\n\
    \    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpcdm_blv6_test.go:35:\
    \ expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number\
    \ of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.]', got '[the number of odd elements in the 271 of\
    \ the input. the number of odd elements in the 137 of the input. the number of\
    \ odd elements in the 314 of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i :=\
    \ range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i],\
    \ \"0\"))-1)\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcmwhs32q_test.go:15:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i :=\
    \ range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i],\
    \ \"0\"))-1)\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcmwhs32q_test.go:15:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{fmt.Sprintf(\"%d\", len(strings.Split(s, \"\")))}\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwq2y8ixd_test.go:15:9: result declared but not used

    /tmp/tmpwq2y8ixd_test.go:15:50: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt60g5qet_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{}\n        for _, r := range s {\n            count\
    \ := 0\n            for _, c := range r {\n                if c == '1' {\n   \
    \                 count++\n                }\n            }\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", count))\n        }\n        result = append(result,\
    \ \"\")\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n \
    \ candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp156maqsw_test.go:18:31: cannot range over r (variable of type rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len(strings.Split(s,\
    \ \"0\")))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp__3dcrwx_test.go:15:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", count_odd_digits(s))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4due2rb_test.go:15:42: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt60g5qet_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(s, \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpscyf26d0_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt60g5qet_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{fmt.Sprintf(\"%d\", len(strings.Split(s, \"0\")))}\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38h269j0_test.go:15:9: result declared but not used

    /tmp/tmp38h269j0_test.go:15:50: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", countOdd(s))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nciy6aq_test.go:15:42: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"%d\", len([...]int{len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7u0dq48_test.go:15:1258: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i :=\
    \ range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2q42x0a1_test.go:15:42: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", len(strutil.CountOddDigits(lst[i])))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbf6t88b6_test.go:15:43: undefined: strutil

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        output := append(output, fmt.Sprintf(\"%d\", count_odd_digits(s)))\n\
    \    }\n    return output\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6dfsrcw_test.go:15:9: output declared but not used

    /tmp/tmpi6dfsrcw_test.go:15:52: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"%d\", len([...]int{len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2,\
    \ len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)/2, len(s)\n\
    func TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7u0dq48_test.go:15:1258: missing '','' before newline in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in\
    \ the string %s of the input.\", s)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp3dx74jrb_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp3dx74jrb_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp3dx74jrb_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var output []string\n    for _, s := range lst {\n\
    \        output := append(output, fmt.Sprintf(\"%d\", count_odd_digits(s)))\n\
    \    }\n    return output\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6dfsrcw_test.go:15:9: output declared but not used

    /tmp/tmpi6dfsrcw_test.go:15:52: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := make([]string, len(lst))\n        for i, r := range s {\n \
    \           if r%2 == 1 {\n                result[i] = fmt.Sprintf(\"%d\", len(s)-i)\n\
    \            } else {\n                result[i] = fmt.Sprintf(\"%d\", len(s)-i)\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"%d\"\
    , len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n   \
    \     result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", len(s)))\n        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n\
    \        result = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result\
    \ = append(result, fmt.Sprintf(\"%d\", len(s)))\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", len(s)))\n        result = append(result, fmt.Sprintf(\"\
    %d\", \nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"1234567\"}), expected: []string{\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual:\
    \ candidate([]string{\"3\", \"11111111\"}), expected: []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"271\"\
    , \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n the str2ng\
    \ 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"\
    , \"the number of odd elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv2eh3bxb_test.go:68:6: expected ''('', found TestOdd_Count

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", countOdd(s))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4nciy6aq_test.go:15:42: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{\"The number of odd elements in the string \" + s\
    \ + \" of the input.\"}\n        for _, r := range s {\n            if r%2 ==\
    \ 1 {\n                result := append(result, fmt.Sprintf(\"%d\", len(s)-r))\n\
    \            }\n        }\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\n        result = append(result, \"\")\n        result\
    \ = append(result, \"\")\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeqdmtcy9_test.go:111:6: expected ''('', found TestOdd_Count

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(s))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudbr6ni9_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", count_odd_digits(s))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4due2rb_test.go:15:42: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt60g5qet_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strconv.ParseInt(lst[i],\
    \ 10, 64)))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvlmtg8v1_test.go:15:43: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6se42ius_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len([...]int{len(s)%2,\
    \ len(s)%2, len(s)%2, len(s)%2}))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp2zbcy944_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[4]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp2zbcy944_test.go:35: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[4 4]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp2zbcy944_test.go:35: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[4 4 4]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i :=\
    \ range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcms5oezc_test.go:15:42: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{\"the number of odd elements in the string \" + s\
    \ + \" of the input.\"}\n        for _, c := range s {\n            if c == '0'\
    \ {\n                continue\n            }\n            odd_count := 0\n   \
    \         for i := 0; i < len(s); i++ {\n                if s[i] == '0' {\n  \
    \                  continue\n                }\n                if s[i] == '1'\
    \ {\n                    odd_count++\n                }\n            }\n     \
    \       result := append(result, fmt.Sprintf(\"%d\", odd_count))\n        }\n\
    \        result = append(result, \"\")\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4u5h0rgg_test.go:29:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len(strings.Split(s,\
    \ \"0\")))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp__3dcrwx_test.go:15:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"the number of odd elements\
    \ in the string %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpcps8bttv_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmpcps8bttv_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpcps8bttv_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4z2mbvkd_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", len(strings.Split(s,\
    \ \"0\")))\n    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp__3dcrwx_test.go:15:46: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpue_o1bj__test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        result := []string{fmt.Sprintf(\"%d\", len(strings.Split(s, \"0\")))}\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp38h269j0_test.go:15:9: result declared but not used

    /tmp/tmp38h269j0_test.go:15:50: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in\
    \ the %s of the input.\", s)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpsyjz6won_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the 1234567\
    \ of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpsyjz6won_test.go:35:\
    \ expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements\
    \ in the 3 of the input. the number of odd elements in the 11111111 of the input.]'\n\
    \    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpsyjz6won_test.go:35:\
    \ expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number\
    \ of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.]', got '[the number of odd elements in the 271 of\
    \ the input. the number of odd elements in the 137 of the input. the number of\
    \ odd elements in the 314 of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i,\
    \ s := range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", count_odd_digits(s))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq4due2rb_test.go:15:42: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt60g5qet_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", len([...]int{\n\
    \            len(lst[i]) - len(lst[i][:len(lst[i])-1]),\n        }))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpwq24g3u4_test.go:37: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[1]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmpwq24g3u4_test.go:37: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[1 1]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmpwq24g3u4_test.go:37: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[1 1 1]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i], \"\
    0\")))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpswzrkpzp_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := 0;\
    \ i < len(lst); i++ {\n        result[i] = fmt.Sprintf(\"%d\", len(strings.Split(lst[i],\
    \ \"0\"))-1)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplcxupauj_test.go:15:43: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %s of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp8qafmf39_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp8qafmf39_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOddDigits(lst[i]))\n   \
    \ }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2kq3jx4a_test.go:15:39: undefined: countOddDigits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n    }\n  \
    \  return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4eyxja2i_test.go:15:39: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i, s :=\
    \ range lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in\
    \ the %s of the input.\", s)\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpsyjz6won_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the 1234567\
    \ of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n        tmpsyjz6won_test.go:35:\
    \ expected '[the number of odd elements 1n the str1ng 1 of the 1nput. the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.]', got '[the number of odd elements\
    \ in the 3 of the input. the number of odd elements in the 11111111 of the input.]'\n\
    \    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n        tmpsyjz6won_test.go:35:\
    \ expected '[the number of odd elements 2n the str2ng 2 of the 2nput. the number\
    \ of odd elements 3n the str3ng 3 of the 3nput. the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.]', got '[the number of odd elements in the 271 of\
    \ the input. the number of odd elements in the 137 of the input. the number of\
    \ odd elements in the 314 of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        odd_count := 0\n        for _, r := range s {\n            if r == '0'\
    \ {\n                odd_count++\n            }\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp0vdvnfxq_test.go:41: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[0]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp0vdvnfxq_test.go:41: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[0 0]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp0vdvnfxq_test.go:41: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[0 0 0]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074158
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the string\
    \ %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements in the string\
    \ 1234567 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n \
    \       tmp5si_g1x8_test.go:35: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements in the string 3 of the input. the number of\
    \ odd elements in the string 11111111 of the input.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp5si_g1x8_test.go:35: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements in the string 271 of the input. the number of odd elements\
    \ in the string 137 of the input. the number of odd elements in the string 314\
    \ of the input.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074157
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"the number of odd elements in the\n\
    \        string %v of the input.\", lst[i])\n    }\n    return result\n}\n\nfunc\
    \ TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"1234567\"}), expected: []string{\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"\
    3\", \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_wezbo1_test.go:15:33: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074155
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    result := make([]string, len(lst))\n    for i := range\
    \ lst {\n        result[i] = fmt.Sprintf(\"%d\", count_odd_digits(lst[i]))\n \
    \   }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzxta_8y_test.go:15:39: undefined: count_odd_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074156
- exit_code: 2
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\nfunc odd_count(lst\
    \ []string) []string {\n    odd_count := make([]string, len(lst))\n    for i :=\
    \ range lst {\n        odd_count[i] = fmt.Sprintf(\"%d\", countOdd(lst[i]))\n\
    \    }\n    return odd_count\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcms5oezc_test.go:15:42: undefined: countOdd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074158
