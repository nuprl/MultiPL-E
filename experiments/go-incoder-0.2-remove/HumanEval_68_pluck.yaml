name: HumanEval_68_pluck
language: go_test.go
prompt: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\
  Given an array representing a branch of a tree that has non-negative integer nodes\n\
  // your task is to pluck one of the nodes and return it.\n// The plucked node should\
  \ be the node with the smallest even value.\n// If multiple nodes with the same\
  \ smallest even value are found return the node that has smallest index.\n// The\
  \ plucked node should be returned in a list, [ smalest_value, its index ],\n// If\
  \ there are no even values or the given array is empty, return [].\n// Example 1:\n\
  // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n//\
  \ Example 2:\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// Example 4:\n// Explanation: 0 is the smallest value,\
  \ but  there are two zeros,\n// so we will choose the first zero, which has the\
  \ smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\n\
  func pluck(arr []int) []int {\n"
tests: "func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
  \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
  \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0,\
  \ 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
  \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
  \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n \
    \   for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        } else {\n            if value == smalest_value\
    \ {\n                index = index + 1\n            }\n        }\n    }\n    return\
    \ []int{smalest_value, index}\n}\n", "    // write your code here\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    sort.Ints(arr)\n    var result []int\n  \
    \  var index int\n    var smalest_value int\n    for _, v := range arr {\n   \
    \     if v%2 == 0 {\n            smalest_value = v\n            index = -1\n \
    \       } else {\n            if smalest_value < v {\n                smalest_value\
    \ = v\n                index = -1\n            } else {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == -1 {\n       \
    \ result = append(result, smalest_value)\n    } else {\n        result = append(result,\
    \ smalest_value, index)\n    }\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    var smalest_value int\n    for _,\
    \ v := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n   \
    \         index = -1\n        } else {\n            if smalest_value < v {\n \
    \               smalest_value = v\n                index = -1\n            }\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ if index == -1 {\n        index = sort.Search(len(arr), func(i int) bool {\n\
    \            return arr[i] < smalest_value\n        })\n    }\n    result = append(result,\
    \ smalest_value)\n    result = append(result, index)\n    return result\n}\n",
  "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    \n    \n    \n    return arr\n}\n", " \
    \   sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = sort.SearchIntSlice(arr[:], value)\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    var result []int\n    var minIndex int\n    var minValue int\n    for\
    \ _, value := range arr {\n        if minValue == 0 || value < minValue {\n  \
    \          minValue = value\n            minIndex = -1\n        }\n        if\
    \ value == minValue {\n            minIndex++\n        }\n    }\n    if minIndex\
    \ == -1 {\n        return nil\n    }\n    for _, value := range arr {\n      \
    \  if value == minValue {\n            result = append(result, value)\n      \
    \  }\n    }\n    return append(result, [minValue, minIndex])\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    index := 0\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            result = append(result, v)\n            index = index\
    \ + 1\n        }\n    }\n    if index == 0 {\n        return nil\n    }\n    if\
    \ index == 1 {\n        return append(result, arr[0])\n    }\n    if index > 1\
    \ {\n        return append(result, arr[index-1])\n    }\n    return nil\n}\n",
  "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = sort.Search(len(arr), func(i int) bool\
    \ { return arr[i] >= value })\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    sort.Ints(arr)\n    index := 0\n    smalest_value\
    \ := arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n            if\
    \ v < smalest_value {\n                smalest_value = v\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == 0 {\n        return\
    \ []\n    }\n    return []int{smalest_value, index}\n}\n", "    // write your\
    \ code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ index}\n}\n", "    result := make([]int, 0)\n    index := 0\n    smallest :=\
    \ arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n            if smallest\
    \ > v {\n                smallest = v\n                index = index + 1\n   \
    \         }\n        } else {\n            if smallest == v {\n              \
    \  index = index + 1\n            }\n        }\n    }\n    if index == 0 {\n \
    \       return nil\n    }\n    result = append(result, smallest, index)\n    return\
    \ result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = index\n            }\n        }\n \
    \   }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - i\n    \
    \        }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    var result []int\n    var index int\n    var smalest_value\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            smalest_value\
    \ = v\n            index = -1\n        } else {\n            if index == -1 ||\
    \ smalest_value < v {\n                smalest_value = v\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == -1 {\n       \
    \ return nil\n    }\n    result = append(result, smalest_value, index)\n    return\
    \ result\n}\n", "    var result []int\n    var index int\n    var smalest_value\
    \ int\n    for _, value := range arr {\n        if value%2 == 0 {\n          \
    \  smalest_value = value\n            index = -1\n        } else {\n         \
    \   if index == -1 || smalest_value < value {\n                smalest_value =\
    \ value\n                index = -1\n            } else {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == -1 {\n       \
    \ return []\n    }\n    if smalest_value == 0 {\n        return []\n    }\n  \
    \  result = append(result, smalest_value, index)\n    return result\n}\n", " \
    \   sort.Ints(arr)\n    var index int\n    var smalest_value int\n    for _, v\
    \ := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n     \
    \       index = v\n        }\n    }\n    if smalest_value == 0 {\n        return\
    \ []\n    }\n    arr2 := make([]int, 0)\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            arr2 = append(arr2, v)\n        }\n    }\n    return\
    \ arr2\n}\n", "    var result []int\n    result := make([]int, 0)\n    min :=\
    \ arr[0]\n    min := 0\n    index := 0\n    for _, value := range arr {\n    \
    \    if value%2 == 0 {\n            if min > value {\n                min = value\n\
    \                index = index\n            }\n        } else {\n            if\
    \ min > value {\n                min = value\n                index = index\n\
    \            }\n        }\n    }\n    result := append(result, min)\n    result\
    \ := append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n   \
    \ smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range arr\
    \ {\n        if value%2 == 0 {\n            if value < smalest_value {\n     \
    \           smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                smalest_index\
    \ = sort.Search(len(arr), func(i int) bool { return arr[i] < value })\n      \
    \      }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    var result []int\n    var minVal int\n    var minIndex int\n    for _, val\
    \ := range arr {\n        if val%2 == 0 {\n            if minVal == 0 || val <\
    \ minVal {\n                minVal = val\n                minIndex = arr\n   \
    \         }\n        } else {\n            if minVal == 0 || val < minVal {\n\
    \                minVal = val\n                minIndex = arr\n            }\n\
    \        }\n    }\n    if minVal == 0 {\n        return []\n    }\n    result\
    \ = append(result, minVal)\n    result = append(result, minIndex)\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            if v <\
    \ smalest_value {\n                smalest_value = v\n                smalest_index\
    \ = sort.Search(len(arr), func(i int) bool {\n                    return arr[i]\
    \ < v\n                })\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    m := make(map[int]int)\n    for _, v := range arr\
    \ {\n        m[v] = m[v] + 1\n    }\n    result := make([]int, 0)\n    for _,\
    \ v := range m {\n        if v%2 == 0 {\n            result = append(result, v)\n\
    \        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n    if\
    \ len(result) == 1 {\n        return result[0]\n    }\n    smallestValue := result[0]\n\
    \    smallestIndex := 0\n    for i := 1; i < len(result); i++ {\n        if result[i]\
    \ < smallestValue {\n            smallestValue = result[i]\n            smallestIndex\
    \ = i\n        }\n    }\n    return []int{smallestValue, smallestIndex}\n}\n",
  "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    var result []int\n    var\
    \ index int\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n            index = len(result)-1\n        }\n    }\n \
    \   if index == -1 {\n        return []\n    }\n    return result\n}\n", "   \
    \ sort.Ints(arr)\n    index := 0\n    smalest := arr[0]\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if smalest == v {\n              \
    \  index = index + 1\n            } else {\n                smalest = v\n    \
    \            index = index\n            }\n        }\n    }\n    return []int{smalest,\
    \ index}\n}\n", "    sort.Ints(arr)\n    var result []int\n    var minIndex int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            result = append(result,\
    \ v)\n            if minIndex == 0 || v < result[minIndex] {\n               \
    \ minIndex = v\n            }\n        }\n    }\n    if minIndex == 0 {\n    \
    \    return []\n    }\n    return append([]int{minIndex, minIndex}, result...)\n\
    }\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    result := []int{}\n    index := 0\n    smalest_value := arr[0]\n    for _,\
    \ value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                index = index\n  \
    \          }\n        } else {\n            if value == smalest_value {\n    \
    \            index = index + 1\n            }\n        }\n    }\n    result =\
    \ append(result, smalest_value, index)\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    \n    return nil\n}\n", "    var result\
    \ []int\n    var smallestValue int\n    var smallestIndex int\n    for _, value\
    \ := range arr {\n        if smallestValue == 0 || value < smallestValue {\n \
    \           smallestValue = value\n            smallestIndex = 0\n        }\n\
    \        if smallestValue == value {\n            smallestIndex++\n        }\n\
    \    }\n    if smallestValue == 0 {\n        return []\n    }\n    result = append(result,\
    \ smallestValue, smallestIndex)\n    return result\n}\n", "    var result []int\n\
    \    var smallestValue int\n    var smallestIndex int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smallestValue == 0 {\n            \
    \    smallestValue = v\n                smallestIndex = v\n            } else\
    \ {\n                if smallestValue > v {\n                    smallestValue\
    \ = v\n                    smallestIndex = v\n                }\n            }\n\
    \        } else {\n            if smallestValue > 0 {\n                smallestValue\
    \ = 0\n                smallestIndex = 0\n            }\n        }\n    }\n  \
    \  if smallestValue > 0 {\n        result = append(result, smallestValue, smallestIndex)\n\
    \    }\n    return result\n}\n", "    sort.Ints(arr)\n    var result []int\n \
    \   var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n      \
    \      result = append(result, v)\n            index = len(result)-1\n       \
    \ }\n    }\n    if index == -1 {\n        return nil\n    }\n    return append(result,\
    \ arr[index])\n}\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr", "    // write your code here\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n        if\
    \ value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = sort.SearchInts(arr, value)\n     \
    \       }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  // write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  result := []int{}\n    index := 0\n    smalest_value := arr[0]\n    for _,\
    \ value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                index = index\n  \
    \          }\n        } else {\n            if value == smalest_value {\n    \
    \            index = index\n            }\n        }\n    }\n    result = append(result,\
    \ smalest_value, index)\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest := arr[0]\n    smalest_index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smalest == v {\n        \
    \        smalest_index = index\n            }\n            smalest = v\n     \
    \       smalest_index = index\n        }\n        index++\n    }\n    if smalest_index\
    \ == 0 {\n        return []\n    }\n    return []int{smalest, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                smalest_index\
    \ = len(arr) - 1 - sort.SearchInts(arr[:len(arr)-1], value)\n            }\n \
    \       }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var minVal int\n    var minIndex\
    \ int\n    var minVal int\n    var minIndex int\n    var min", "    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - i\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < smalest_value {\n            smalest_value = arr[i]\n\
    \            smalest_index = i\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n   \
    \ var result []int\n    var index int\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            result = append(result, v)\n            index = len(result)-1\n\
    \        }\n    }\n    if index == -1 {\n        return []\n    }\n    return\
    \ append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    if len(arr) == 0 {\n        return []\n    }\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n        if\
    \ value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = len(arr) - 1 - i\n            }\n \
    \       }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < min {\n           \
    \     min = value\n                index = index\n            }\n        } else\
    \ {\n            if min > value {\n                min = value\n             \
    \   index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n\
    \    var smalest_value int\n    var smalest_index int\n    var smalest_index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest_value\
    \ == 0 {\n                smalest_value = v\n                smalest_index = v\n\
    \            } else {\n                if v < smalest_value {\n              \
    \      smalest_value = v\n                    smalest_index = v\n            \
    \    }\n            }\n        }\n    }\n    if smalest_value == 0 {\n       \
    \ return []\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "  \
    \  sort.Ints(arr)\n    var result []int\n    var index int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            result = append(result, v)\n     \
    \       index = len(result)-1\n        }\n    }\n    if index == -1 {\n      \
    \  return []\n    }\n    return append([]int{result[0], index}, pluck(arr[index+1:]))\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                smalest_index\
    \ = sort.Search(len(arr), func(i int) bool {\n                    return arr[i]\
    \ < value\n                })\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    if len(arr) == 0 {\n        return []\n    }\n  \
    \  smalest_value := arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] < smalest_value {\n            smalest_value = arr[i]\n\
    \            smalest_index = i\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    sort.Ints(arr)\n    var result []int\n    var smallestEven\
    \ int\n    var smallestIndex int\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if smallestEven == 0 {\n                smallestEven = v\n\
    \                smallestIndex = v\n            } else {\n                if smallestEven\
    \ == v {\n                    smallestEven = v\n                    smallestIndex\
    \ = v\n                } else {\n                    if smallestEven == v {\n\
    \                        smallestEven = v\n                        smallestIndex\
    \ = v\n                    }\n                }\n            }\n        }\n  \
    \  }\n    if smallestEven == 0 {\n        return nil\n    }\n    result = append(result,\
    \ smallestEven)\n    result = append(result, smallestIndex)\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []\n    }\n    min := arr[0]\n \
    \   index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if min > v {\n                min = v\n                index = index\n   \
    \         }\n        } else {\n            if min > v {\n                min =\
    \ v\n            }\n        }\n    }\n    return []int{min, index}\n}\n", "  \
    \  // write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  sort.Ints(arr)\n    var index int\n    var smalest_value int\n    for _, v\
    \ := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n     \
    \       index = v\n        }\n    }\n    if smalest_value == 0 {\n        return\
    \ []\n    }\n    smalest_value -= 1\n    return []int{smalest_value, index}\n\
    }\n", "    if len(arr) == 0 {\n        return []\n    }\n    min := arr[0]\n \
    \   index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if min > v {\n                min = v\n                index = index\n   \
    \         }\n        } else {\n            if min > v {\n                min =\
    \ v\n            }\n        }\n    }\n    return []int{min, index}\n}\n", "  \
    \  sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    sort.Ints(arr)\n    index := 0\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = index\n            }\n            index++\n\
    \        }\n    }\n    if smalest_index == 0 {\n        return []\n    }\n   \
    \ return []int{smalest_value, smalest_index}\n}\n", "    // write your code here\n\
    \    \n    \n    return arr\n}\n", "    var result []int\n    var minVal int\n\
    \    var minIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n  \
    \          if minVal == 0 || v < minVal {\n                minVal = v\n      \
    \          minIndex = v\n            }\n        } else {\n            if minVal\
    \ == 0 || v > minVal {\n                minVal = v\n                minIndex =\
    \ v\n            }\n        }\n    }\n    if minVal == 0 {\n        return []\n\
    \    }\n    result = append(result, minVal)\n    result = append(result, minIndex)\n\
    \    return result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n \
    \   smalest_index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n \
    \           if v < smalest_value {\n                smalest_value = v\n      \
    \          smalest_index = len(arr) - 1 - sort.Search(len(arr), func(i int) bool\
    \ {\n                    return arr[i] < v\n                })\n            }\n\
    \        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "   \
    \ sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    sort.Ints(arr)\n    var result []int\n    index := 0\n    smallest := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if smallest\
    \ > value {\n                smallest = value\n                index = index +\
    \ 1\n            }\n        } else {\n            if smallest == value {\n   \
    \             index = index + 1\n            }\n        }\n    }\n    if smallest\
    \ == arr[0] {\n        result = append(result, smallest, index)\n    }\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool { return arr[i]\
    \ > value })\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n   \
    \ smalest_index := 0\n    for _, value := range arr {\n        if value % 2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = sort.Search(len(arr), func(i int) bool\
    \ {\n                    return arr[i] < value\n                })\n         \
    \   }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    m := make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] +\
    \ 1\n    }\n    smalest_value := 0\n    smalest_index := 0\n    for v, count :=\
    \ range m {\n        if count > smalest_value {\n            smalest_value = count\n\
    \            smalest_index = v\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    // write your code here\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    var result []int\n    var smallestValue int\n    var\
    \ smallestIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n    \
    \        if smallestValue == 0 {\n                smallestValue = v\n        \
    \        smallestIndex = 0\n            } else {\n                if smallestValue\
    \ > v {\n                    smallestValue = v\n                    smallestIndex\
    \ = 0\n                } else {\n                    smallestIndex++\n       \
    \         }\n            }\n        } else {\n            if smallestValue ==\
    \ 0 {\n                smallestValue = v\n                smallestIndex = 0\n\
    \            } else {\n                if smallestValue > v {\n              \
    \      smallestValue = v\n                    smallestIndex = 0\n            \
    \    } else {\n                    smallestIndex++\n                }\n      \
    \      }\n        }\n    }\n    if smallestValue == 0 {\n        return nil\n\
    \    }\n    result = make([]int, smallestIndex+1)\n    for _, v := range arr {\n\
    \        if v%2 == 0 {\n            result[smallestIndex] = v\n        } else\
    \ {\n            result[smallestIndex] = v\n        }\n        smallestIndex++\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []\n\
    \    }\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n     \
    \   if v%2 == 0 {\n            if v < min {\n                min = v\n       \
    \         index = index\n            }\n        } else {\n            if v ==\
    \ min {\n                index = index + 1\n            }\n        }\n    }\n\
    \    return []int{min, index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    if len(arr) == 0 {\n        return []\n    }\n    min := arr[0]\n \
    \   index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n         \
    \   if v < min {\n                min = v\n                index = index\n   \
    \         }\n        } else {\n            if v == min {\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n",
  "    sort.Ints(arr)\n    var result []int\n    var index int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            result = append(result, v)\n     \
    \       index = v\n        }\n    }\n    if len(result) == 0 {\n        return\
    \ []\n    }\n    if index == 0 {\n        return nil\n    }\n    if index == len(arr)\
    \ {\n        return append(result, arr[index])\n    }\n    if result[0]%2 == 0\
    \ {\n        return append(result, arr[index])\n    }\n    return nil\n}\n", " \
    \   // write your code here\n    \n    \n    return []int{arr[0], 0}\n}\n", " \
    \   n := len(arr)\n    if n == 0 {\n        return []\n    }\n    min := arr[0]\n\
    \    index := 0\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n   \
    \         min = arr[i]\n            index = i\n        }\n    }\n    return []int{min,\
    \ index}\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.SearchInts(arr, value)\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    // write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return []\n    }\n\
    \    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n \
    \   smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.SearchIntSlice(arr[:],\
    \ value)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    n := len(arr)\n    if n == 0 {\n        return []\n    }\n    min :=\
    \ arr[0]\n    index := 0\n    for i := 1; i < n; i++ {\n        if arr[i] < min\
    \ {\n            min = arr[i]\n            index = i\n        }\n    }\n    return\
    \ []int{min, index}\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    i := 0\n    j := len(arr) - 1\n    k := 0\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for i < j {\n        if arr[i] % 2 == 0 {\n     \
    \       if arr[i] < smalest_value {\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            }\n            i++\n        }\
    \ else {\n            i++\n        }\n    }\n    if smalest_value == 0 {\n   \
    \     return []\n    }\n    if smalest_index == 0 {\n        return []\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n \
    \   var result []int\n    var smallestEven int\n    var smallestIndex int\n  \
    \  for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   } else {\n                    if smallestIndex < v {\n                   \
    \     smallestEven = v\n                        smallestIndex = v\n          \
    \          }\n                }\n            }\n        } else {\n           \
    \ if smallestEven == 0 {\n                smallestEven = v\n                smallestIndex\
    \ = v\n            }\n        }\n    }\n    if smallestEven == 0 {\n        return\
    \ []\n    }\n    result = append(result, smallestEven, smallestIndex)\n    return\
    \ result\n}\n", "    // write your code here\n    arr2 := make([]int, len(arr))\n\
    \    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5\
    \ := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int,\
    \ len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n\
    \    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12\
    \ := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int,\
    \ len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n\
    \    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19\
    \ := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int,\
    \ len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n\
    \    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26\
    \ := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int,\
    \ len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n\
    \    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33\
    \ := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int,\
    \ len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n\
    \    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40\
    \ := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int,\
    \ len(arr))\n    arr43 := make([]int, len(", "    m := make(map[int]int)\n   \
    \ for _, v := range arr {\n        m[v] = m[v] + 1\n    }\n    sort.Ints(arr)\n\
    \    for _, v := range arr {\n        if m[v] % 2 == 0 {\n            return []int{v,\
    \ m[v]}\n        }\n    }\n    return []int{}\n}\n", "    var result []int\n \
    \   var minVal int\n    var minIndex int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n               \
    \ minVal = v\n                minIndex = v\n            }\n        } else {\n\
    \            if minVal == 0 || v > minVal {\n                minVal = v\n    \
    \            minIndex = v\n            }\n        }\n    }\n    if minVal == 0\
    \ {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n", "    // Your code here\n\
    \    \n    return arr\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    for _, value := range arr {\n\
    \        if value%2 == 0 {\n            if value < smalest_value {\n         \
    \       smalest_value = value\n                index = index + 1\n           \
    \ }\n        } else {\n            if value == smalest_value {\n             \
    \   index = index + 1\n            }\n        }\n    }\n    return []int{smalest_value,\
    \ index}\n}\n", "    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                index\
    \ = index + 1\n            }\n        } else {\n            if value == smalest_value\
    \ {\n                index = index + 1\n            }\n        }\n    }\n    if\
    \ index == 0 {\n        return []\n    }\n    return []int{smalest_value, index}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if v < smalest_value {\n                smalest_value = v\n     \
    \           smalest_index = len(arr) - 1 - v\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    if len(arr) == 0 {\n\
    \        return []\n    }\n    min := arr[0]\n    index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if v < min {\n             \
    \   min = v\n                index = index\n            }\n        } else {\n\
    \            if v == min {\n                index = index + 1\n            }\n\
    \        }\n    }\n    return []int{min, index}\n}\n", "    // write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    n := len(arr)\n \
    \   smalest_value := arr[0]\n    smalest_index := 0\n    even_index := 0\n   \
    \ for i := 1; i < n; i++ {\n        if arr[i] % 2 == 0 {\n            if arr[i]\
    \ < smalest_value {\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            }\n        } else {\n            if arr[i] < smalest_value\
    \ {\n                even_index = i\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            }\n        }\n    }\n    if smalest_value\
    \ == 0 {\n        return []\n    }\n    if even_index == 0 {\n        return make([]int,\
    \ 1, 2)\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    var\
    \ result []int\n    var minIndex int\n    var minVal int\n    var index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            minVal = v\n\
    \            minIndex = index\n        }\n        index++\n    }\n    if minIndex\
    \ == 0 {\n        return []\n    }\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < minVal {\n                minVal = v\n          \
    \      minIndex = index\n            }\n            index++\n        }\n    }\n\
    \    if minIndex == 0 {\n        return []\n    }\n    result = []int{minVal,\
    \ minIndex}\n    return result\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if smalest == 0 {\n                smalest = v\n   \
    \             index = index + 1\n            } else {\n                if v <\
    \ smalest {\n                    smalest = v\n                    index = index\
    \ + 1\n                }\n            }\n        }\n    }\n    if smalest == 0\
    \ {\n        return []\n    }\n    return []int{smalest, index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest := arr[0]\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            if smalest == v {\n                index = index + 1\n\
    \            } else {\n                smalest = v\n                index = index\n\
    \            }\n        }\n    }\n    return []int{smalest, index}\n}\n", "  \
    \  sort.Ints(arr)\n    var result []int\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            result = append(result, v)\n     \
    \       index = index + 1\n        }\n    }\n    if index == 0 {\n        return\
    \ []\n    }\n    if index > 0 {\n        result = append(result, arr[index-1])\n\
    \    }\n    return result\n}\n", "    // write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    sort.Ints(arr)\n    var result []int\n  \
    \  var index int\n    var smalest_value int\n    for _, v := range arr {\n   \
    \     if v%2 == 0 {\n            smalest_value = v\n            index = -1\n \
    \       } else {\n            if smalest_value < v {\n                smalest_value\
    \ = v\n                index = -1\n            } else {\n                index\
    \ = index + 1\n            }\n        }\n    }\n    if index == -1 {\n       \
    \ result = make([]int, 0)\n    } else {\n        result = append(result, smalest_value,\
    \ index)\n    }\n    return result\n}\n", "    // write your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(arr) == 0 {\n        return\
    \ []\n    }\n    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value\
    \ := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = len(arr)-1\n\
    \            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if v < smalest_value\
    \ {\n                smalest_value = v\n                smalest_index = sort.SearchInts(arr,\
    \ v)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    if len(arr) == 0 {\n        return []\n    }\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for i := 1; i < len(arr); i++ {\n      \
    \  if arr[i] < smalest_value {\n            smalest_value = arr[i]\n         \
    \   smalest_index = i\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    arr2 := make([]int, len(arr))\n    arr3 := make([]int, len(arr))\n\
    \    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n    arr6\
    \ := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8 := make([]int,\
    \ len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int, len(arr))\n\
    \    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n    arr13\
    \ := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15 := make([]int,\
    \ len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int, len(arr))\n\
    \    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n    arr20\
    \ := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22 := make([]int,\
    \ len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int, len(arr))\n\
    \    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n    arr27\
    \ := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29 := make([]int,\
    \ len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int, len(arr))\n\
    \    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n    arr34\
    \ := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36 := make([]int,\
    \ len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int, len(arr))\n\
    \    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n    arr41\
    \ := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43 := make([]int,\
    \ len(arr))\n    arr", "    sort.Ints(arr)\n    var result []int\n    var index\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n            index = len(result)-1\n        }\n    }\n \
    \   if index == -1 {\n        return []\n    }\n    return append([]int{result[0],\
    \ index}, pluck(arr[index+1:]))\n}\n", "    sort.Ints(arr)\n    var result []int\n\
    \    var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n     \
    \       result = append(result, v)\n            index = len(result)\n        }\n\
    \    }\n    if index == 0 {\n        return nil\n    }\n    return append([]int{result[0],\
    \ index}, pluck(arr[index:])...)\n}\n", "    sort.Ints(arr)\n    var smalest_value\
    \ int\n    var smalest_index int\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if smalest_value == 0 {\n                smalest_value =\
    \ v\n                smalest_index = v\n            } else {\n               \
    \ if v < smalest_value {\n                    smalest_value = v\n            \
    \        smalest_index = v\n                }\n            }\n        }\n    }\n\
    \    if smalest_value == 0 {\n        return []\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    // write your code here\n    sort.Ints(arr)\n   \
    \ index := 0\n    smalest_value := arr[0]\n    for _, value := range arr {\n \
    \       if value%2 == 0 {\n            if value < smalest_value {\n          \
    \      smalest_value = value\n                index = index + 1\n            }\n\
    \        }\n    }\n    if index == 0 {\n        return []\n    }\n    return []int{smalest_value,\
    \ index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    index :=\
    \ 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value :=\
    \ range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n            index++\n        }\n    }\n    if smalest_index ==\
    \ 0 {\n        return []\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    n := len(arr)\n    result := make([]int, n)\n    min := arr[0]\n  \
    \  index := 0\n    for i := 0; i < n; i++ {\n        if arr[i] < min {\n     \
    \       min = arr[i]\n            index = i\n        }\n    }\n    result[index]\
    \ = min\n    return result\n}\n", "    // write your code here\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    // write your code here\n    arr2 := make([]int,\
    \ 0)\n    arr3 := make([]int, 0)\n    arr4 := make([]int, 0)\n    arr5 := make([]int,\
    \ 0)\n    arr6 := make([]int, 0)\n    arr7 := make([]int, 0)\n    arr8 := make([]int,\
    \ 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int, 0)\n    arr11 := make([]int,\
    \ 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int, 0)\n    arr14 := make([]int,\
    \ 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int, 0)\n    arr17 := make([]int,\
    \ 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int, 0)\n    arr20 := make([]int,\
    \ 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int, 0)\n    arr23 := make([]int,\
    \ 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int, 0)\n    arr26 := make([]int,\
    \ 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int, 0)\n    arr29 := make([]int,\
    \ 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int, 0)\n    arr32 := make([]int,\
    \ 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int, 0)\n    arr35 := make([]int,\
    \ 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int, 0)\n    arr38 := make([]int,\
    \ 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int, 0)\n    arr41 := make([]int,\
    \ 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int, 0)\n    arr44 := make([]int,\
    \ 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int, 0)\n    arr47 := make([]int,\
    \ 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int, 0)\n    arr50 := make([]int,\
    \ 0)\n    arr51 := make(", "    // write your code here\n    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            if v < smalest_value {\n                smalest_value\
    \ = v\n                index = -1\n            }\n        } else {\n         \
    \   if v < smalest_value {\n                smalest_value = v\n              \
    \  index = index + 1\n            }\n        }\n    }\n    if index == -1 {\n\
    \        return []\n    }\n    return []int{smalest_value, index}\n}\n", "   \
    \ arr2 := make([]int, 0)\n    arr3 := make([]int, 0)\n    arr4 := make([]int,\
    \ 0)\n    arr5 := make([]int, 0)\n    arr6 := make([]int, 0)\n    arr7 := make([]int,\
    \ 0)\n    arr8 := make([]int, 0)\n    arr9 := make([]int, 0)\n    arr10 := make([]int,\
    \ 0)\n    arr11 := make([]int, 0)\n    arr12 := make([]int, 0)\n    arr13 := make([]int,\
    \ 0)\n    arr14 := make([]int, 0)\n    arr15 := make([]int, 0)\n    arr16 := make([]int,\
    \ 0)\n    arr17 := make([]int, 0)\n    arr18 := make([]int, 0)\n    arr19 := make([]int,\
    \ 0)\n    arr20 := make([]int, 0)\n    arr21 := make([]int, 0)\n    arr22 := make([]int,\
    \ 0)\n    arr23 := make([]int, 0)\n    arr24 := make([]int, 0)\n    arr25 := make([]int,\
    \ 0)\n    arr26 := make([]int, 0)\n    arr27 := make([]int, 0)\n    arr28 := make([]int,\
    \ 0)\n    arr29 := make([]int, 0)\n    arr30 := make([]int, 0)\n    arr31 := make([]int,\
    \ 0)\n    arr32 := make([]int, 0)\n    arr33 := make([]int, 0)\n    arr34 := make([]int,\
    \ 0)\n    arr35 := make([]int, 0)\n    arr36 := make([]int, 0)\n    arr37 := make([]int,\
    \ 0)\n    arr38 := make([]int, 0)\n    arr39 := make([]int, 0)\n    arr40 := make([]int,\
    \ 0)\n    arr41 := make([]int, 0)\n    arr42 := make([]int, 0)\n    arr43 := make([]int,\
    \ 0)\n    arr44 := make([]int, 0)\n    arr45 := make([]int, 0)\n    arr46 := make([]int,\
    \ 0)\n    arr47 := make([]int, 0)\n    arr48 := make([]int, 0)\n    arr49 := make([]int,\
    \ 0)\n    arr50 := make([]int, 0)\n    arr51 := make([]int, 0)\n    ", "    sort.Ints(arr)\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    sort.Ints(arr)\n    var result []int\n    var smallestEven int\n    var smallestIndex\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven == v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   } else {\n                    if smallestIndex < v {\n                   \
    \     smallestEven = v\n                        smallestIndex = v\n          \
    \          }\n                }\n            }\n        } else {\n           \
    \ if smallestEven == 0 {\n                smallestEven = v\n                smallestIndex\
    \ = v\n            }\n        }\n    }\n    if smallestEven == 0 {\n        return\
    \ nil\n    }\n    result = append(result, smallestEven)\n    result = append(result,\
    \ smallestIndex)\n    return result\n}\n", "    result := make([]int, 0)\n   \
    \ min := arr[0]\n    index := 0\n    for _, val := range arr {\n        if val\
    \ < min {\n            min = val\n            index = -1\n        }\n        if\
    \ val == min {\n            index = index + 1\n        }\n    }\n    if index\
    \ == -1 {\n        return []\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    sort.Ints(arr)\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < smalest_value {\n                smalest_value =\
    \ v\n                smalest_index = sort.SearchInts(arr, v)\n            }\n\
    \        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "   \
    \ sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    index := 0\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value % 2 == 0 {\n            if value < smalest_value {\n              \
    \  smalest_value = value\n                smalest_index = index\n            }\n\
    \            index++\n        }\n    }\n    if smalest_index == 0 {\n        return\
    \ []\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n        }\n        index++\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n   \
    \ smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range arr\
    \ {\n        if value%2 == 0 {\n            if value < smalest_value {\n     \
    \           smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if value\
    \ < smalest_value {\n                smalest_value = value\n                smalest_index\
    \ = sort.Search(len(arr), func(i int) bool { return arr[i] < value })\n      \
    \      }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    index := 0\n    smalest :=\
    \ arr[0]\n    smalest_index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if smalest == v {\n                smalest_index = index\n\
    \            }\n            smalest = v\n            index = index + 1\n     \
    \   }\n    }\n    if smalest_index == 0 {\n        return []\n    }\n    return\
    \ []int{smalest, smalest_index}\n}\n", "    sort.Ints(arr)\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < smalest_value {\n                smalest_value =\
    \ v\n                smalest_index = len(arr) - 1 - v\n            }\n       \
    \ }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)\n        }\n    }\n    if index == 0 {\n        return []\n    }\n\
    \    return result\n}\n", "    sort.Ints(arr)\n    var result []int\n    var index\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            result\
    \ = append(result, v)\n            index = len(result)-1\n        }\n    }\n \
    \   if index == -1 {\n        return []\n    }\n    return append([]int{result[0],\
    \ index}, pluck(arr[index+1:]))\n}\n", "    var result []int\n    var minIndex\
    \ int\n    var minValue int\n    for _, v := range arr {\n        if v%2 == 0\
    \ {\n            if minValue == 0 || v < minValue {\n                minValue\
    \ = v\n                minIndex = v\n            }\n        } else {\n       \
    \     if minValue == 0 || v > minValue {\n                minValue = v\n     \
    \           minIndex = v\n            }\n        }\n    }\n    if minValue ==\
    \ 0 {\n        return []\n    }\n    result = append(result, minValue)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n", "    sort.Ints(arr)\n \
    \   smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = len(arr) - 1 - sort.SearchInts(arr[:len(arr)-1],\
    \ v)\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    var result []int\n    var minIndex int\n    var minValue int\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if minValue == 0 ||\
    \ v < minValue {\n                minValue = v\n                minIndex = v\n\
    \            }\n        } else {\n            if minValue == 0 || v > minValue\
    \ {\n                minValue = v\n                minIndex = v\n            }\n\
    \        }\n    }\n    result = append(result, minValue)\n    result = append(result,\
    \ minIndex)\n    return result\n}\n", "    // write your code here\n    sort.Ints(arr)\n\
    \    var smalest_value int\n    var smalest_index int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smalest_value == 0 {\n            \
    \    smalest_value = v\n                smalest_index = v\n            } else\
    \ {\n                if v < smalest_value {\n                    smalest_value\
    \ = v\n                    smalest_index = v\n                }\n            }\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ return []int{smalest_value, smalest_index}\n}\n", "    var result []int\n  \
    \  var minIndex int\n    var minValue int\n    for _, v := range arr {\n     \
    \   if v%2 == 0 {\n            if minValue == 0 || v < minValue {\n          \
    \      minValue = v\n                minIndex = v\n            }\n        } else\
    \ {\n            if minValue == 0 || v > minValue {\n                minValue\
    \ = v\n                minIndex = v\n            }\n        }\n    }\n    result\
    \ = append(result, minValue)\n    result = append(result, minIndex)\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = index\n            }\n            index++\n\
    \        }\n    }\n    if smalest_index > 0 {\n        return []int{smalest_value,\
    \ smalest_index}\n    }\n    return []int{0, 0}\n}\n", "    var result []int\n\
    \    var minVal int\n    var minIndex int\n    for _, v := range arr {\n     \
    \   if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n              \
    \  minVal = v\n                minIndex = v\n            }\n        } else {\n\
    \            if minVal == 0 || v > minVal {\n                minVal = v\n    \
    \            minIndex = v\n            }\n        }\n    }\n    if minVal == 0\
    \ {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n", "    var result []int\n\
    \    var minIndex int\n    var minVal int\n    var i int\n    for i = 0; i < len(arr);\
    \ i++ {\n        if arr[i] % 2 == 0 {\n            if minVal == 0 || arr[i] <\
    \ minVal {\n                minVal = arr[i]\n                minIndex = i\n  \
    \          }\n        } else {\n            if minVal != 0 {\n               \
    \ minVal = 0\n                minIndex = 0\n            }\n        }\n    }\n\
    \    if minVal == 0 {\n        return []\n    }\n    result = append(result, minVal)\n\
    \    result = append(result, minIndex)\n    return result\n}\n", "    // write\
    \ your code here\n    arr2 := make([]int, 0)\n    min := arr[0]\n    index :=\
    \ 0\n    for _, v := range arr {\n        if v%2 == 0 {\n            arr2 = append(arr2,\
    \ v)\n            if v < min {\n                min = v\n                index\
    \ = arr2\n            }\n        }\n    }\n    if min == 0 {\n        return []\n\
    \    }\n    return []int{min, index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    var result []int\n    var index int\n    for _, v := range arr {\n      \
    \  if v%2 == 0 {\n            result = append(result, v)\n            index =\
    \ len(result)-1\n        }\n    }\n    if index == -1 {\n        return []\n \
    \   }\n    return result\n}\n", "    sort.Ints(arr)\n    var result []int\n  \
    \  var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n       \
    \     result = append(result, v)\n            index = v\n        }\n    }\n  \
    \  if index == 0 {\n        return nil\n    }\n    return append([]int{index,\
    \ arr[0]}, result...)\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0)\n    index := 0\n    for _, v := range arr {\n  \
    \      if v%2 == 0 {\n            evens = append(evens, v)\n            index\
    \ = index + 1\n        }\n    }\n    if len(evens) == 0 {\n        return []\n\
    \    }\n    if len(evens) == 1 {\n        return evens\n    }\n    smallest :=\
    \ evens[0]\n    smallest := index\n    for _, v := range evens {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n    }\n    return []int{smallest,\
    \ index}\n}\n", "    if len(arr) == 0 {\n        return []\n    }\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = len(arr) - 1 - i\n            }\n \
    \       }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    //\
    \ write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n",
  "    // write your code here\n    \n    \n    return nil\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    result := []int{}\n    index := 0\n    for _, v := range arr {\n        if\
    \ v%2 == 0 {\n            result = append(result, v)\n            index = index\
    \ + 1\n        }\n    }\n    if index == 0 {\n        return []\n    }\n    return\
    \ append(result[:index], result[index:]...)\n}\n", "    sort.Ints(arr)\n    var\
    \ result []int\n    var index int\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            result = append(result, v)\n            index = len(result)-1\n\
    \        }\n    }\n    if index == 0 {\n        return nil\n    }\n    return\
    \ append([]int{result[0], index}, pluck(result[1:]))\n}\n", "    // write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(arr) == 0\
    \ {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - value\n            }\n        }\n  \
    \  }\n    return []int{smalest_value, smalest_index}\n}\n", "    var result []int\n\
    \    var minVal int\n    var minIndex int\n    var index int\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if minVal == 0 || minVal > v\
    \ {\n                minVal = v\n                minIndex = index\n          \
    \  }\n            index = index + 1\n        }\n    }\n    if minVal == 0 {\n\
    \        return []\n    }\n    result = append(result, minVal)\n    result = append(result,\
    \ minIndex)\n    return result\n}\n", "    sort.Ints(arr)\n    var index int\n\
    \    var smalest_value int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            smalest_value = v\n            index = v\n        }\n    }\n    if\
    \ index == 0 {\n        return []\n    }\n    if smalest_value == 0 {\n      \
    \  return []\n    }\n    return []int{smalest_value, index}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = len(arr) - 1 - i\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n \
    \   smalest_value := arr[0]\n    smalest_index := 0\n    for _, value := range\
    \ arr {\n        if value%2 == 0 {\n            if value < smalest_value {\n \
    \               smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Ints(arr)\n    var result []int\n    var smallestEven int\n  \
    \  var smallestIndex int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if smallestEven == 0 {\n                smallestEven = v\n      \
    \          smallestIndex = v\n            } else {\n                if smallestEven\
    \ == v {\n                    smallestEven = v\n                    smallestIndex\
    \ = v\n                } else {\n                    if smallestEven == v {\n\
    \                        smallestEven = v\n                        smallestIndex\
    \ = v\n                    }\n                }\n            }\n        }\n  \
    \  }\n    if smallestEven == 0 {\n        return []\n    }\n    result = append(result,\
    \ smallestEven)\n    result = append(result, smallestIndex)\n    return result\n\
    }\n", "    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = index\n            }\n        }\n        index++\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n", "    result := []int{}\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < min {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min == v {\n      \
    \          index = index\n            }\n        }\n    }\n    result = append(result,\
    \ min)\n    result = append(result, index)\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            if min > v {\n                min\
    \ = v\n                index = index\n            }\n        } else {\n      \
    \      if min == v {\n                index = index\n            }\n        }\n\
    \    }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n \
    \   smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = len(arr) - 1 - i\n            }\n   \
    \     }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    if\
    \ len(arr) == 0 {\n        return []\n    }\n    sort.Ints(arr)\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for index, value := range arr {\n   \
    \     if value%2 == 0 {\n            if value < smalest_value {\n            \
    \    smalest_value = value\n                smalest_index = index\n          \
    \  }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    sort.Ints(arr)\n    var index int\n    var smalest_value int\n    for _, v\
    \ := range arr {\n        if v%2 == 0 {\n            smalest_value = v\n     \
    \       index = -1\n            break\n        }\n    }\n    if index == -1 {\n\
    \        return []\n    }\n    if smalest_value == 0 {\n        return []\n  \
    \  }\n    arr2 := make([]int, 0)\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            arr2 = append(arr2, v)\n        }\n    }\n    sort.Ints(arr2)\n\
    \    arr2 = append(arr2, smalest_value)\n    return arr2\n}\n", "    if len(arr)\
    \ == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    var result\
    \ []int\n    var index int\n    var smallestValue int\n    var smallestIndex int\n\
    \    for _, value := range arr {\n        if value%2 == 0 {\n            if smallestValue\
    \ == 0 || value < smallestValue {\n                smallestValue = value\n   \
    \             smallestIndex = index\n            }\n        }\n        index++\n\
    \    }\n    if smallestValue == 0 {\n        return nil\n    }\n    result = append(result,\
    \ smallestValue, smallestIndex)\n    return result\n}\n", "    // write your code\
    \ here\n    sort.Ints(arr)\n    i := 0\n    j := len(arr) - 1\n    k := 0\n  \
    \  result := []int{}\n    for i < j {\n        if arr[i] % 2 == 0 {\n        \
    \    result = append(result, arr[i])\n            i++\n        } else {\n    \
    \        if arr[j] % 2 == 0 {\n                result = append(result, arr[j])\n\
    \                j--\n            } else {\n                if arr[k] % 2 == 0\
    \ {\n                    result = append(result, arr[k])\n                   \
    \ k++\n                } else {\n                    if arr[i] < arr[j] {\n  \
    \                      result = append(result, arr[i])\n                     \
    \   i++\n                    } else {\n                        result = append(result,\
    \ arr[j])\n                        j--\n                    }\n              \
    \  }\n            }\n        }\n    }\n    if i == j {\n        if arr[i] % 2\
    \ == 0 {\n            result = append(result, arr[i])\n        }\n    }\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    var smalest_value int\n    var smalest_index int\n    var smalest_index int\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            if smalest_value\
    \ == 0 {\n                smalest_value = v\n                smalest_index = v\n\
    \            } else {\n                if v < smalest_value {\n              \
    \      smalest_value = v\n                    smalest_index = v\n            \
    \    }\n            }\n        }\n    }\n    if smalest_value == 0 {\n       \
    \ return []\n    }\n    result := []int{smalest_value, smalest_index}\n    return\
    \ result\n}\n", "    sort.Ints(arr)\n    index := 0\n    smalest := arr[0]\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smalest ==\
    \ 0 {\n                smalest = v\n                index = index + 1\n      \
    \      } else {\n                if v < smalest {\n                    smalest\
    \ = v\n                    index = index + 1\n                }\n            }\n\
    \        }\n    }\n    if smalest == 0 {\n        return []\n    }\n    return\
    \ []int{smalest, index}\n}\n", "    var minVal int\n    var minIndex int\n   \
    \ for _, v := range arr {\n        if v%2 == 0 {\n            if minVal == 0 ||\
    \ v < minVal {\n                minVal = v\n                minIndex = v\n   \
    \         }\n        }\n    }\n    if minVal == 0 {\n        return []\n    }\n\
    \    return []int{minVal, minIndex}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = v\n            }\n    \
    \    }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    // write\
    \ your code here\n    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = sort.Search(len(arr), func(i int) bool {\n        \
    \            return arr[i] < value\n                })\n            }\n      \
    \  }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    evens := make([]int, 0, len(arr))\n    index := 0\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            evens = append(evens, v)\n       \
    \     index = index + 1\n        }\n    }\n    if len(evens) == 0 {\n        return\
    \ []\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens[:1]\n\
    }\n", "    // write your code here\n    sort.Ints(arr)\n    index := 0\n    smalest\
    \ := arr[0]\n    for _, v := range arr {\n        if v%2 == 0 {\n            if\
    \ smalest == 0 {\n                smalest = v\n                index = index +\
    \ 1\n            } else {\n                if v < smalest {\n                \
    \    smalest = v\n                    index = index + 1\n                }\n \
    \           }\n        }\n    }\n    return []int{smalest, index}\n}\n", "   \
    \ // write your code here\n    sort.Ints(arr)\n    smalest_value := arr[0]\n \
    \   smalest_index := 0\n    for _, v := range arr {\n        if v%2 == 0 {\n \
    \           if v < smalest_value {\n                smalest_value = v\n      \
    \          smalest_index = len(arr)\n            }\n        }\n    }\n    return\
    \ []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n    var result\
    \ []int\n    var index int\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            result = append(result, v)\n            index = len(result)\n   \
    \     }\n    }\n    if index == 0 {\n        return []\n    }\n    return result\n\
    }\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    var result []int\n    var index int\n    var smalest_value int\n    var smalest_index\
    \ int\n    for _, node := range arr {\n        if node % 2 == 0 {\n          \
    \  smalest_value = node\n            smalest_index = index\n        }\n      \
    \  index++\n    }\n    if smalest_value == 0 {\n        return nil\n    }\n  \
    \  for _, node := range arr {\n        if node == smalest_value {\n          \
    \  result = append(result, node)\n        }\n    }\n    if smalest_index == 0\
    \ {\n        return nil\n    }\n    return append(result, [smalest_value, smalest_index])\n\
    }\n", "    sort.Ints(arr)\n    index := 0\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for _, value := range arr {\n        if value%2 == 0 {\n         \
    \   if value < smalest_value {\n                smalest_value = value\n      \
    \          smalest_index = index\n            }\n            index++\n       \
    \ }\n    }\n    if smalest_index > 0 {\n        return append([]int{smalest_value,\
    \ smalest_index}, arr[index:]...)\n    }\n    return []int{}\n}\n", "    sort.Ints(arr)\n\
    \    var result []int\n    var smallestEven int\n    var smallestIndex int\n \
    \   for _, v := range arr {\n        if v%2 == 0 {\n            if smallestEven\
    \ == 0 {\n                smallestEven = v\n                smallestIndex = v\n\
    \            } else {\n                if smallestEven != v {\n              \
    \      smallestEven = v\n                    smallestIndex = v\n             \
    \   }\n            }\n        } else {\n            if smallestEven == 0 {\n \
    \               smallestEven = v\n                smallestIndex = v\n        \
    \    } else {\n                if smallestEven != v {\n                    smallestEven\
    \ = v\n                    smallestIndex = v\n                }\n            }\n\
    \        }\n    }\n    if smallestEven == 0 {\n        return nil\n    }\n   \
    \ result = append(result, smallestEven)\n    result = append(result, smallestIndex)\n\
    \    return result\n}\n", "    // write your code here\n    sort.Ints(arr)\n \
    \   index := 0\n    smallest := arr[0]\n    smallest := arr[0]\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if smallest > v {\n        \
    \        smallest = v\n                index = v\n            }\n        }\n \
    \   }\n    return []int{smallest, index}\n}\n", "    sort.Ints(arr)\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = len(arr) - 1 - i\n            }\n \
    \       }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    smalest_value := arr[0]\n    smalest_index := 0\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if v < smalest_value {\n             \
    \   smalest_value = v\n                smalest_index = sort.Search(len(arr), func(i\
    \ int) bool {\n                    return arr[i] < v\n                })\n   \
    \         }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    var result []int\n    var minVal int\n    var minIndex int\n    var\
    \ i int\n    for i = 0; i < len(arr); i++ {\n        if arr[i] < minVal {\n  \
    \          minVal = arr[i]\n            minIndex = i\n        }\n    }\n    for\
    \ i = 0; i < len(arr); i++ {\n        if arr[i] == minVal {\n            result\
    \ = append(result, arr[i])\n        }\n    }\n    if minIndex == len(arr) {\n\
    \        return nil\n    }\n    return append(result, minVal, minIndex)\n}\n",
  "    // write your code here\n    \n    \n    \n    return arr\n}\n", "    // write\
    \ your code here\n    \n    \n    return []int{arr[0], 0}\n}\n", "    var result\
    \ []int\n    var minVal int\n    var minIndex int\n    var i int\n    for i =\
    \ 0; i < len(arr); i++ {\n        if arr[i] < minVal {\n            minVal = arr[i]\n\
    \            minIndex = i\n        }\n    }\n    result = append(result, minVal)\n\
    \    result = append(result, minIndex)\n    return result\n}\n", "    if len(arr)\
    \ == 0 {\n        return []\n    }\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if min > v {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    return []int{min, index}\n}\n",
  "    // write your code here\n    sort.Ints(arr)\n    var index int\n    var smalest_value\
    \ int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n   \
    \         smalest_value = arr[i]\n            index = i\n        }\n    }\n  \
    \  if index == 0 {\n        return []\n    }\n    if smalest_value == 0 {\n  \
    \      return []\n    }\n    if index == len(arr) {\n        return []\n    }\n\
    \    if smalest_value < arr[index] {\n        return []\n    }\n    return []int{smalest_value,\
    \ index}\n}\n", "    var result []int\n    var index int\n    var smallestValue\
    \ int\n    var smallestIndex int\n    for _, value := range arr {\n        if\
    \ value % 2 == 0 {\n            if smallestValue < value {\n                smallestValue\
    \ = value\n                smallestIndex = index\n            }\n        } else\
    \ {\n            if smallestValue == value {\n                smallestIndex =\
    \ index\n            }\n        }\n        index++\n    }\n    if smallestIndex\
    \ == 0 {\n        return nil\n    }\n    result = append(result, smallestValue,\
    \ smallestIndex)\n    return result\n}\n", "    var result []int\n    var index\
    \ int\n    var smalest_value int\n    var smalest_index int\n    for _, v := range\
    \ arr {\n        if v%2 == 0 {\n            smalest_value = v\n            smalest_index\
    \ = index\n        }\n        index++\n    }\n    if smalest_index == 0 {\n  \
    \      return nil\n    }\n    for _, v := range arr {\n        if v%2 == 0 {\n\
    \            if v < smalest_value {\n                smalest_value = v\n     \
    \           smalest_index = index\n            }\n            index++\n      \
    \  }\n    }\n    result = make([]int, 2)\n    result[0] = smalest_value\n    result[1]\
    \ = smalest_index\n    return result\n}\n", "    sort.Ints(arr)\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = sort.SearchInts(arr, value)\n     \
    \       }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    if len(arr) == 0 {\n        return []\n    }\n    smalest_value :=\
    \ arr[0]\n    smalest_index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if v < smalest_value {\n                smalest_value =\
    \ v\n                smalest_index = len(arr)\n            }\n        }\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    var result []int\n\
    \    var minVal int\n    var minIndex int\n    for _, v := range arr {\n     \
    \   if v%2 == 0 {\n            if minVal == 0 || v < minVal {\n              \
    \  minVal = v\n                minIndex = v\n            }\n        } else {\n\
    \            if minVal == 0 || v < minVal {\n                minVal = v\n    \
    \            minIndex = v\n            }\n        }\n    }\n    if minVal == 0\
    \ {\n        return []\n    }\n    result = append(result, minVal)\n    result\
    \ = append(result, minIndex)\n    return result\n}\n", "    sort.Ints(arr)\n \
    \   var result []int\n    var index int\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            result = append(result, v)\n            index = len(result)-1\n\
    \        }\n    }\n    if index == -1 {\n        return []\n    }\n    return\
    \ append([]int{result[0], index}, pluck(arr[index+1:]))\n}\n", "    sort.Ints(arr)\n\
    \    var smalest_value int\n    var smalest_index int\n    for _, v := range arr\
    \ {\n        if v%2 == 0 {\n            if smalest_value == 0 {\n            \
    \    smalest_value = v\n                smalest_index = v\n            } else\
    \ {\n                if v < smalest_value {\n                    smalest_value\
    \ = v\n                    smalest_index = v\n                }\n            }\n\
    \        }\n    }\n    if smalest_value == 0 {\n        return []\n    }\n   \
    \ return []int{smalest_value, smalest_index}\n}\n", "    n := len(arr)\n    result\
    \ := make([]int, n)\n    min := arr[0]\n    index := 0\n    for i := 0; i < n;\
    \ i++ {\n        if arr[i] < min {\n            min = arr[i]\n            index\
    \ = i\n        }\n    }\n    result[index] = min\n    return result\n}\n", " \
    \   m := make(map[int]int)\n    for _, v := range arr {\n        m[v] = m[v] +\
    \ 1\n    }\n    smalest_value := -1\n    smalest_index := -1\n    for k, v :=\
    \ range m {\n        if v < smalest_value {\n            smalest_value = v\n \
    \           smalest_index = k\n        }\n    }\n    if smalest_value == -1 {\n\
    \        return []\n    }\n    return []int{smalest_value, smalest_index}\n}\n",
  "    if len(arr) == 0 {\n        return []\n    }\n    smalest_value := arr[0]\n\
    \    smalest_index := 0\n    for _, value := range arr {\n        if value%2 ==\
    \ 0 {\n            if value < smalest_value {\n                smalest_value =\
    \ value\n                smalest_index = len(arr) - 1 - value\n            }\n\
    \        }\n    }\n    return []int{smalest_value, smalest_index}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
