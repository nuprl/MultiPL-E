name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\nfunc select_words(s\
  \ string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Your code here\n    return []string{}\n}\n", "    // Write your\
    \ code here\n    \n    return []string{}\n}\n", "    words := []string{}\n   \
    \ for _, word := range words {\n        if select_words_test.select_words_test.select_words(s,\
    \ n, word) {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    // Your code here\n    return []string{}\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n    \n    return nil\n}\n", "    //\
    \ Your code here\n    return nil\n}\n", "    \n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // TODO: implement this function\n  \
    \  return []string{}\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    \n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Write your code here\n    \n    \n    return []string{}\n}\n", " \
    \   // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n    \n    return nil\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n}\n", "    \n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // TODO:\
    \ implement this function\n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    \n}\n", "    // TODO: implement this function\n    return nil\n}\n",
  "    // Your code here\n}\n", "    // Your code here\n}\n", "    \n}\n", "    \n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n\
    \    return []string{}\n}\n", "    \n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    return nil\n}\n", "    // Your code here\n    \n   \
    \ return []string{}\n}\n", "    \n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    // Write your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n    return []string{}\n}\n", "    // Your code here\n    words :=\
    \ []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if strings.Contains(word,\
    \ \"a\") {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "  \
    \  // Write your code here\n    \n    return []string{}\n}\n", "    // Your code\
    \ here\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "   \
    \ // Your code here\n    return []string{}\n}\n", "    // Your code here\n}\n",
  "    // Write your code here\n    \n    return []string{}\n}\n", "    // Your code\
    \ here\n    return nil\n}\n", "    // Write your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    words :=\
    \ []string{}\n    for _, word := range words {\n        if select_words_test.ContainsNConsonants(s,\
    \ n, word) {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "  \
    \  // Your code here\n    return []string{}\n}\n", "    \n}\n", "    result :=\
    \ []string{}\n    \n    // TODO: implement this function\n    \n    return result\n\
    }\n", "    // Your code here\n    return []string{}\n}\n", "    \n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    \n}\n", "    result := []string{}\n \
    \   for _, word := range select_words_test.select_words(s, n) {\n        result\
    \ = append(result, word)\n    }\n    return result\n}\n", "    \n}\n", "    //\
    \ Your code here\n}\n", "    // Write your code here\n    \n    return nil\n}\n",
  "    // Your code here\n}\n", "    // Your code here\n    return []string{}\n}\n",
  "    // Your code here\n    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, []rune{'a', 'e', 'i', 'o', 'u'})\
    \ {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    // Your code here\n}\n", "    // Write your code here\n    \n    return\
    \ nil\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "    //\
    \ TODO: implement this function\n    return nil\n}\n", "    // Your code here\n\
    \    \n    return nil\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    words := []string{}\n    for _, word := range\
    \ strings.Split(s, \" \") {\n        if strings.ContainsAny(word, []rune{'a',\
    \ 'e', 'i', 'o', 'u'}) {\n            words = append(words, word)\n        }\n\
    \    }\n    return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Write your code here\n    words := []string{}\n    for _, word :=\
    \ range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, []rune(\"\
    bcdfghjklmnpqrstvwxyz\")) {\n            words = append(words, word)\n       \
    \ }\n    }\n    return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    return []string{}\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    \n}\n",
  "    // TODO: implement this function\n    return nil\n}\n", "    // Write your\
    \ code here\n    \n    return []string{}\n}\n", "    \n}\n", "    \n}\n", "  \
    \  \n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    return []string{}\n}\n", "    // Your code here\n    \n    return\
    \ nil\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "    words\
    \ := []string{}\n    \n    if s == \"\" {\n        return words\n    }\n    \n\
    \    for _, letter := range s {\n        if n-- == 0 {\n            words = append(words,\
    \ letter)\n        }\n    }\n    \n    return words\n}\n", "    // Your code here\n\
    }\n", "    // Write your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    words := []string{}\n    for _, word := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    \n}\n", "    // Your code here\n}\n", "    \n}\n", "    // Your code\
    \ here\n    \n    return []string{}\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n}\n",
  "    // Your code here\n    \n    return nil\n}\n", "    // Write your code here\n\
    \    \n    return []string{}\n}\n", "    // Write your code here\n    return []string{}\n\
    }\n", "    // TODO: Write your code here\n    return []string{}\n}\n", "    //\
    \ Your code here\n    words := []string{}\n    \n    if len(s) == 0 {\n      \
    \  return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n     \
    \       continue\n        }\n        \n        for j := 0; j < len(s); j++ {\n\
    \            if s[i] == s[j] {\n                continue\n            }\n    \
    \        \n            if s[i] == 'y' && s[j] == 'a' && s[j+1] == 'a' {\n    \
    \            continue\n            }\n            \n            if s[i] == 'y'\
    \ && s[j] == 'a' && s[j+1] == 'e' {\n                continue\n            }\n\
    \            \n            if s[i] == 'y' && s[j] == 'a' && s[j+1] == 'i' {\n\
    \                continue\n            }\n            \n            if s[i] ==\
    \ 'y' && s[j] == 'a' && s[j+1] == 'o' {\n                continue\n          \
    \  }\n            \n            if s[i] == 'y' && s[j] == 'a' && s[j+1] == 'u'\
    \ {\n                continue\n            }\n            \n            if s[i]\
    \ == 'y' && s[j] == 'e' && s[j+1] == 'a' {\n                continue\n       \
    \     }\n            \n            if s[i] == 'y' && s[j] == 'e' && s[j+1] ==\
    \ 'e' {\n                continue\n            }\n            \n            if\
    \ s[i] == 'y' && s[j] == 'e' && s[j+1] == 'i' {\n                continue\n  \
    \          }\n            \n            if s[i] == 'y' && s[j] == 'e' && s[j+1]\
    \ == 'o' {\n                continue\n            }\n            \n          \
    \  if s[i] == 'y' && s[j] == 'e' && s[j+1] == 'u' {\n                continue\n\
    \            }\n            \n            if s[i] == 'y' && s[j] == 'i' && s[j+1]\
    \ == 'a' {\n                continue\n            }\n            \n          \
    \  if s[i] == 'y' && s[j] == 'i' && s[j+1] == 'e' {\n                continue\n\
    \            }\n            \n            if s[i] == 'y' && s[j] == 'i' && s[j+1]\
    \ == 'i' {\n                continue\n            }\n            \n          \
    \  if s[i] == 'y' && s[j] == 'i' && s[j+1] == 'o' {\n                continue\n\
    \            }\n            \n            if s[i] == 'y' && s[j] == 'i' && s[j+1]\
    \ == 'u' {\n                continue\n            }\n            \n          \
    \  if s[i] == 'y' && s[j] == 'o' && s[j+1] == 'a' {\n                continue\n\
    \            }\n            \n            if s[i] == 'y' && s[j] == 'o' && s[j+1]\
    \ == 'e' {\n                continue\n            }\n            \n          \
    \  if s[i] == 'y' && s[j] == 'o' && s[j+1] == 'i' {\n                continue\n\
    \            }\n            \n            if s[i] == 'y' && s[j] == 'o' && s[j+1]\
    \ == 'o' {\n                continue\n            }\n            \n          \
    \  if s[i] == 'y' && ", "    \n}\n", "    // Your code here\n    words := []string{}\n\
    \    for _, word := range strings.Split(s, \" \") {\n        if strings.Contains(word,\
    \ \"a\") {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    // Your code here\n    words := []string{}\n    for _, word\
    \ := range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, []rune(\"\
    bcdfghjklmnpqrstvwxyz\")) {\n            words = append(words, word)\n       \
    \ }\n    }\n    return words\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n    words := []string{}\n\
    \    words := strings.Split(s, \" \")\n    words := strings.Split(s, \" \")\n\
    \    for _, word := range words {\n        if strings.Contains(word, \"a\") {\n\
    \            fmt.Println(word)\n        }\n    }\n    return words\n}\n", "  \
    \  // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    words := []string{}\n\
    \    \n    if s == \"\" {\n        return words\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    return words\n}\n", "    // Your code here\n    \n\
    \    return []string{}\n}\n", "    // Your code here\n    \n    return nil\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return nil\n}\n", "    // Your code here\n    words := []string{}\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' {\n            i++\n        } else if s[i]\
    \ == 'y' || s[i] == 'o' || s[i] == 'u' {\n            i++\n        } else if s[i]\
    \ == 'y' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' {\n            i++\n        } else if s[i] == 'y' || s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' {\n     \
    \       i++\n        } else if s[i] == 'y' || s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {\n            i++\n      \
    \  } else if s[i] == 'y' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' ||\
    \ s[i] == 'u' || s[i] == 'y' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y' || s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y' || s[i]", "    \n}\n", "    words := []string{}\n    \n    if\
    \ len(s) == 0 {\n        return words\n    }\n    \n    vowels := []rune{'a',\
    \ 'e', 'i', 'o', 'u'}\n    \n    for _, letter := range s {\n        if !contains(vowels,\
    \ letter) {\n            words = append(words, letter)\n        }\n    }\n   \
    \ \n    return words\n}\n", "    \n}\n", "    // Your code here\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n\
    \        if len(word) == 0 {\n            continue\n        }\n        count :=\
    \ 0\n        for _, letter := range word {\n            if letter == 'a' || letter\
    \ == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n              \
    \  count++\n            }\n        }\n        if count == n {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n", "    // TODO:\
    \ implement this function\n    return nil\n}\n", "    // Your code here\n    \n\
    \    return []string{}\n}\n", "    words := []string{}\n    if len(s) == 0 {\n\
    \        return words\n    }\n    \n    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    \n    for _, letter := range s {\n        if letter == 'a'\
    \ || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n    \
    \        words = append(words, letter)\n        }\n    }\n    \n    for _, letter\
    \ := range s {\n        if letter == 'a' || letter == 'e' || letter == 'i' ||\
    \ letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _,\
    \ letter := range s {\n        if letter == 'a' || letter == 'e' || letter ==\
    \ 'i' || letter == 'o' || letter == 'u' {\n            words = append(words, letter)\n\
    \        }\n    }\n    \n    for _, letter := range s {\n        if letter ==\
    \ 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n\
    \            words = append(words, letter)\n        }\n    }\n    \n    for _, ",
  "    \n}\n", "    // Your code here\n    \n    return nil\n}\n", "    // Your code\
    \ here\n    words := []string{}\n    for _, word := range strings.Split(s, \"\
    \ \") {\n        if strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    // Your code here\n    words := []string{}\n    for _, w := range strings.Split(s,\
    \ \" \") {\n        if strings.ContainsAny(w, []rune(\"bcdfghjklmnpqrstvwxyz\"\
    )) {\n            words = append(words, w)\n        }\n    }\n    return words\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n    return []string{}\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // Your\
    \ code here\n}\n", "    \n}\n", "    \n}\n", "    // Your code here\n    words\
    \ := []string{}\n    for _, word := range strings.Split(s, \" \") {\n        if\
    \ strings.ContainsAny(word, []rune(\"bcdfghjklmnpqrstvwxyz\")) {\n           \
    \ words = append(words, word)\n        }\n    }\n    return words\n}\n", "   \
    \ \n}\n", "    // Your code here\n    words := []string{}\n    for _, word :=\
    \ range strings.Split(s, \" \") {\n        if strings.ContainsAny(word, []rune(\"\
    bcdfghjklmnpqrstvwxyz\")) {\n            words = append(words, word)\n       \
    \ }\n    }\n    return words\n}\n", "    // TODO: implement this function\n  \
    \  return []string{}\n}\n", "    // Your code here\n    return []string{}\n}\n",
  "    // Your code here\n    return []string{}\n}\n", "    // Your code here\n  \
    \  return []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return nil\n}\n", "    \n}\n", "    \n}\n", "    // Write\
    \ your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    \n}\n", "    // Your code here\n    \n\
    \    return nil\n}\n", "    \n}\n", "    // Your code here\n    return nil\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n}\n", "    // Your code here\n   \
    \ return []string{}\n}\n", "    result := []string{}\n    \n    if len(s) == 0\
    \ {\n        return result\n    }\n    \n    result := select_words_test.select_words(s,\
    \ n, result)\n    \n    return result\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    // Your code here\n}\n", "    // Your code here\n    return\
    \ nil\n}\n", "    // Your code here\n    \n    return []string{}\n}\n", "    //\
    \ Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    return []string{}\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return []string{}\n}\n",
  "    // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // Your code here\n \
    \   \n    return nil\n}\n", "    \n}\n", "    // Your code here\n    \n    return\
    \ []string{}\n}\n", "    // Your code here\n    return []string{}\n}\n", "   \
    \ // Your code here\n    \n    return []string{}\n}\n", "    // Your code here\n\
    \    \n    return []string{}\n}\n", "    // Your code here\n    \n    return []string{}\n\
    }\n", "    // Your code here\n    \n    return []string{}\n}\n", "    // Your\
    \ code here\n    \n    return []string{}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
