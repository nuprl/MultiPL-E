name: HumanEval_21_rescale_to_unit
language: go_test.go
prompt: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n// such that the smallest number will become 0 and the largest\
  \ will become 1\nfunc rescale_to_unit(numbers []float64) []float64 {\n"
tests: "func TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
  \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
  \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
  \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
  \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n    \
  \ { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
  \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var minVal float64\n    var maxVal float64\n    for _, v := range\
    \ numbers {\n        if v < minVal {\n            minVal = v\n        }\n    \
    \    if v > maxVal {\n            maxVal = v\n        }\n    }\n    rescaledNumbers\
    \ := make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n\
    \        rescaledNumbers[i] = ((numbers[i] - minVal) / (maxVal - minVal)) * 2\
    \ - 1\n    }\n    return rescaledNumbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= (smallest\
    \ - numbers[0]) / (largest - numbers[0])\n    largest += 1 - smallest\n    for\
    \ _, number := range numbers {\n        number *= (largest - smallest) / float64(len(numbers))\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    for _, number := range numbers {\n        number *=\
    \ largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest%1\n\
    \    largest -= largest%1\n    smallest /= 1\n    largest /= 1\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = numbers[i]*(largest - smallest) + smallest\n    }\n    return rescaled\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i := range rescaled {\n        rescaled[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * largest + smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i] * largest +\
    \ smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n   \
    \ largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ = make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * (largest - smallest) + smallest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    for\
    \ _, number := range numbers {\n        number *= (largest - smallest) / (number\
    \ - smallest)\n    }\n    return numbers\n}\n", "    var minVal float64\n    var\
    \ maxVal float64\n    for _, number := range numbers {\n        if number < minVal\
    \ {\n            minVal = number\n        }\n        if number > maxVal {\n  \
    \          maxVal = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        numbers[len(numbers)-1] = number\n    }\n    numbers[0] = minVal\n\
    \    numbers[len(numbers)-1] = maxVal\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n   \
    \ for i, number := range numbers {\n        rescaled[i] = (number - smallest)\
    \ / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = ((numbers[i] - smallest) / (largest - smallest)) * (largest - smallest) +\
    \ smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n   \
    \ largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest%1.0\n\
    \    largest -= largest%1.0\n    smallest /= 1.0\n    largest /= 1.0\n    result\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = numbers[i]*largest + smallest\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest%1\n    largest += largest%1\n    smallest /= 1\n   \
    \ largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        numbers[i] = number*(largest-smallest)+smallest\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * largest\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= largest\n\
    \    smallest /= 2\n    largest /= 2\n    smallest += largest\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest%1.0\n    largest -= largest%1.0\n    smallest\
    \ /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        result[i] = numbers[i]*((largest - smallest)/float64(len(numbers)))\
    \ + smallest\n    }\n    return result\n}\n", "    smallest := numbers[0]\n  \
    \  largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = numbers[i] * largest / smallest + smallest / largest\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        numbers[len(numbers)-1] = number/largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) + smallest\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    for _, number := range numbers {\n\
    \        numbers[len(numbers)-1] = number/largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    smallest -= smallest\n    smallest += 1\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    smallest -= 1\n    smallest += largest\n\
    \    smallest -= 1\n    smallest += largest\n    smallest -= 1\n    smallest +=\
    \ largest\n    smallest -= 1\n    smallest += largest\n    smallest -= 1\n   \
    \ smallest += largest\n    smallest -= 1\n    smallest += largest\n    smallest\
    \ -= 1\n    smallest += largest\n    ", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= ", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= (smallest - largest) /\
    \ 2\n    largest += (largest - smallest) / 2\n    numbers := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        numbers[i] = smallest + (numbers[i]\
    \ - largest) * ((largest - smallest) / (numbers[i] - smallest))\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n\
    \    smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = number\n    }\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i] * smallest + largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= 0.000000000000001\n    largest += 0.000000000000001\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return rescaled\n}\n",
  "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < min {\n            min = number\n        }\n        if\
    \ number > max {\n            max = number\n        }\n    }\n    min -= 0.5\n\
    \    max += 0.5\n    numbers := make([]float64, len(numbers))\n    for i, number\
    \ := range numbers {\n        numbers[i] = ((number - min) / (max - min)) * 2.0\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * largest + smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * (largest - smallest) + smallest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i := 0; i < len(numbers); i++ {\n  \
    \      numbers[i] *= (largest - smallest) / (numbers[i] - smallest)\n    }\n \
    \   return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return rescaled\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    numbers := make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = numbers[i] * smallest + largest\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n\
    \    smallest /= 1\n    largest /= 1\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest + smallest\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] = numbers[i]\
    \ * largest + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    for _, number := range numbers {\n    \
    \    number *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        rescaled[i] = number*(largest-smallest)+smallest\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n\
    \    for index, number := range numbers {\n        numbers[index] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n", "    var minVal float64\n\
    \    var maxVal float64\n    for _, number := range numbers {\n        if number\
    \ < minVal {\n            minVal = number\n        }\n        if number > maxVal\
    \ {\n            maxVal = number\n        }\n    }\n    for _, number := range\
    \ numbers {\n        numbers[len(numbers)-1] = numbers[len(numbers)-1] * (maxVal-minVal)\
    \ / (numbers[len(numbers)-1]-minVal)\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest / smallest + smallest /\
    \ largest\n    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest += largest % 1\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= (smallest % 1)\n    largest += 1 - largest\n   \
    \ smallest /= (largest - smallest + 1) * 0.5\n    largest /= (largest - smallest\
    \ + 1) * 0.5\n    smallest += 0.5\n    largest += 0.5\n    return []float64{smallest,\
    \ largest}\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, n\
    \ := range numbers {\n        if n < min {\n            min = n\n        }\n \
    \       if n > max {\n            max = n\n        }\n    }\n    min -= 0.5\n\
    \    max += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i := range\
    \ rescaled {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    for _, number := range numbers {\n        number *= largest\n \
    \   }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    for _, number := range numbers {\n\
    \        numbers[len(numbers)-1] = number/largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    for\
    \ _, number := range numbers {\n        number *= (largest - smallest) / (number\
    \ - smallest)\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    result\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     result[i] = number * largest / smallest + smallest / largest\n    }\n  \
    \  return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * (largest - smallest) + smallest\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    for _, number := range numbers\
    \ {\n        numbers[len(numbers)-1] = number\n    }\n    numbers[0] = min\n \
    \   numbers[len(numbers)-1] = max\n    return numbers\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = smallest + (numbers[i] - smallest) * (largest\
    \ - smallest) / (largest - smallest)\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for index,\
    \ number := range numbers {\n        numbers[index] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= (largest\
    \ - smallest)\n    largest /= (largest - smallest)\n    for _, number := range\
    \ numbers {\n        number *= (largest - smallest)\n        number += smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / float64(len(numbers))\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number\n    }\n    for i\
    \ := range numbers {\n        numbers[i] /= (largest - smallest)\n        numbers[i]\
    \ *= (largest - smallest)\n        numbers[i] += smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number\n    }\n    for i := range numbers {\n        numbers[i] *= (largest\
    \ - smallest) / (numbers[i] - smallest)\n    }\n    return numbers\n}\n", "  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n \
    \   smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    for\
    \ _, number := range numbers {\n        number *= (largest - smallest) / (number\
    \ - smallest)\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * (largest - smallest) + smallest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ += 1\n    largest += 1\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= 0.5\n\
    \    largest += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i\
    \ := range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        numbers[len(numbers)-1] = number/largest\n    }\n\
    \    return numbers\n}\n", "    var minVal float64\n    var maxVal float64\n \
    \   for _, number := range numbers {\n        if number < minVal {\n         \
    \   minVal = number\n        }\n        if number > maxVal {\n            maxVal\
    \ = number\n        }\n    }\n\n    // If all numbers are the same, return it\n\
    \    if minVal == maxVal {\n        return numbers\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if minVal == 0 {\n        return make([]float64,\
    \ len(numbers))\n    }\n\n    // If all numbers are the same, return it\n    if\
    \ maxVal == 1 {\n        return make([]float64, len(numbers))\n    }\n\n    //\
    \ If all numbers are the same, return it\n    if maxVal == 0 {\n        return\
    \ make([]float64, len(numbers))\n    }\n\n    // If all numbers are the same,\
    \ return it\n    if minVal == 1 {\n        return make([]float64, len(numbers))\n\
    \    }\n\n    // If all numbers are the same, return it\n    if maxVal == 1 {\n\
    \        return make([]float64, len(numbers))\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if minVal == maxVal {\n        return make([]float64,\
    \ len(numbers))\n    }\n\n    // If all numbers are the same, return it\n    if\
    \ minVal == 0 {\n        return make([]float64, len(numbers))\n    }\n\n    //\
    \ If all numbers are the same, return it\n    if maxVal == 1 {\n        return\
    \ make([]float64, len(numbers))\n    }\n\n    // If all numbers are the same,\
    \ return it\n    if minVal == 1 {\n        return make([]float64, len(numbers))\n\
    \    }\n\n    // If all numbers are the same, return it\n    if maxVal == 1 {\n\
    \        return make([]float64, len(numbers))\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if minVal == maxVal {\n        return make([]float64,\
    \ len(numbers))\n    }\n\n    // If all numbers are the same, return it\n    if\
    \ minVal == 0 {\n        return make([]float64, len(numbers))\n    }\n\n    //\
    \ If all numbers are the same, return it\n    if maxVal == 1 {\n        return\
    \ make([]float64, len(numbers))\n    }\n\n    // If all numbers are the same,\
    \ return it\n    if minVal == 1 {\n        return make([]float64, len(numbers))\n\
    \    }\n\n    // If all numbers are the same, return it\n    if maxVal == 1 {\n\
    \        return make([]float64, len(numbers))\n    }\n\n    // If all numbers\
    \ are the same, return it\n    if minVal == maxVal ", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    smallest -= smallest*largest\n    largest -= smallest*largest\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= smallest*largest\n\
    \    largest -= smallest*largest\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= smallest*largest\n    largest -= smallest*largest\n    return\
    \ []float64{smallest, largest}\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (numbers[len(numbers)-1] - largest)/2\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ -= (largest - numbers[0]) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number -= smallest\n        number *= (largest - number)\
    \ / (largest - numbers[0])\n    }\n    return numbers\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        numbers[i] = number * largest + smallest\n    }\n \
    \   return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    for _, number := range numbers {\n        number *= (largest -\
    \ smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    for _, number := range numbers {\n        number\
    \ *= largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    for _, number := range numbers {\n        number\
    \ *= largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= (largest\
    \ - smallest)\n    largest /= (largest - smallest)\n    for _, number := range\
    \ numbers {\n        number *= (largest - smallest)\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    result := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        result[i] = numbers[i] * largest + smallest\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * largest\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     numbers[i] = number\n    }\n    for i := range numbers {\n        numbers[i]\
    \ /= (largest - smallest)\n        numbers[i] *= (largest - smallest)\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    for _, number := range numbers {\n        number *= largest\n \
    \   }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * largest + smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n\
    \    smallest += largest\n    smallest -= largest\n    smallest += largest\n \
    \   return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    for _, number := range numbers {\n\
    \        number *= (largest - smallest) / (number - smallest)\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n\
    \    smallest /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  for i := 0; i < len(numbers); i++ {\n        numbers[i] *= (largest - smallest)\
    \ / (len(numbers) - i)\n        numbers[i] += smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ += 1\n    largest += 1\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ 0.5\n    largest += 0.5\n    ", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest%1\n\
    \    largest -= largest%1\n    smallest /= 1\n    largest /= 1\n    rescaled :=\
    \ make([]float64, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n   \
    \     rescaled[i] = numbers[i]*(largest-smallest)+smallest\n    }\n    return\
    \ rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.00000000001\n    largest += 0.00000000001\n    smallest /= largest\n  \
    \  largest /= largest\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.00000000001\n    largest += 0.00000000001\n    smallest /= largest\n  \
    \  largest /= largest\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001\n    smallest /= largest\n    largest /= largest\n\
    \    smallest -= 0.00000000001\n    largest += 0.00000000001\n    smallest /=\
    \ largest\n    largest /= largest\n    smallest -= 0.00000000001\n    largest\
    \ += 0.00000000001\n    smallest /= largest\n    largest /= largest\n    smallest\
    \ -= 0.00000000001\n    largest += 0.00000000001\n    smallest /= largest\n  \
    \  largest /= largest\n    smallest -= 0.00000000001\n    largest += 0.00000000001\n\
    \    smallest /= largest\n    largest /= largest\n    smallest -= 0.00000000001\n\
    \    largest += 0.00000000001", "    var minVal float64\n    var maxVal float64\n\
    \    for _, number := range numbers {\n        if number < minVal {\n        \
    \    minVal = number\n        }\n        if number > maxVal {\n            maxVal\
    \ = number\n        }\n    }\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = number\n    }\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = number * (maxVal - minVal) / (len(numbers)-1)\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number\n    }\n    for i\
    \ := range numbers {\n        numbers[i] = numbers[i] * smallest + largest\n \
    \   }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    smallest += 0.5\n    largest += 0.5\n    for _, number := range\
    \ numbers {\n        number *= (largest - smallest) / (number - smallest)\n  \
    \  }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return rescaled\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number\n    }\n    for i\
    \ := 0; i < len(numbers); i++ {\n        numbers[i] *= (largest - smallest) /\
    \ (numbers[i] - smallest)\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * largest + smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = number\n    }\n    numbers[0] = smallest\n    numbers[len(numbers)-1] = largest\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest += smallest % 1\n    largest +=\
    \ largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest %\
    \ 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    return\
    \ numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    min -= 0.5\n    max += 0.5\n    for _, number := range numbers {\n  \
    \      number *= (max - min) / (max - min)\n        number += min\n    }\n   \
    \ return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest += smallest % 1\n    largest += largest % 1\n \
    \   smallest /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = number * (largest - smallest)\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ = make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * (largest - smallest) + smallest\n    }\n  \
    \  return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= (smallest - numbers[0])\
    \ / (numbers[0] - numbers[1])\n    largest -= (largest - numbers[0]) / (numbers[0]\
    \ - numbers[1])\n    smallest += numbers[1]\n    largest += numbers[1]\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = smallest + (largest - smallest) * (float64(i) / float64(len(numbers)))\n \
    \   }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest /= largest\n    largest /=\
    \ largest\n    for _, number := range numbers {\n        number *= largest\n \
    \   }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * largest\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest += smallest % 1\n    largest +=\
    \ largest % 1\n    return []float64{smallest, largest}\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    result\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = numbers[i] * smallest + largest\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= largest\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    for _, number := range numbers {\n        numbers[len(numbers)-1] = number/largest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    for _, number := range numbers {\n        number *=\
    \ largest\n    }\n    return numbers\n}\n", "    min := numbers[0]\n    max :=\
    \ numbers[0]\n    for _, n := range numbers {\n        if n < min {\n        \
    \    min = n\n        }\n        if n > max {\n            max = n\n        }\n\
    \    }\n    min -= 0.5\n    max += 0.5\n    numbers = make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        numbers[i] = ((n - min) / (max - min))\
    \ * 2.0\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n\
    \    largest += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i, number := range numbers {\n   \
    \     rescaled[i] = (number - smallest) / (largest - smallest)\n    }\n    return\
    \ rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest\
    \ % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * largest / smallest + smallest / largest\n    }\n    return rescaled\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= largest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= 0.000000000000001\n    largest += 0.000000000000001\n\
    \    rescaled := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        rescaled[i] = (numbers[i] - smallest) / (largest - smallest)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest\
    \ += largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        rescaled[i] = (number\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest -\
    \ smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= (smallest\
    \ - numbers[0]) / 2\n    largest += (largest - numbers[0]) / 2\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest -= (smallest - numbers[0]) / 2\n    largest\
    \ += (largest - numbers[0]) / 2\n    smallest /= 2\n    largest /= 2\n    return\
    \ []float64{smallest, largest}\n}\n", "    var min float64\n    var max float64\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    for _, number := range numbers {\n        numbers[len(numbers)-1]\
    \ = number\n    }\n    numbers = numbers[:len(numbers)-1]\n    for _, number :=\
    \ range numbers {\n        numbers[len(numbers)-1] = number\n    }\n    for _,\
    \ number := range numbers {\n        numbers[len(numbers)-1] = number\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= (smallest - numbers[0])\
    \ / (largest - numbers[0])\n    largest += (numbers[0] - smallest) / (largest\
    \ - numbers[0])\n    for _, number := range numbers {\n        number -= smallest\n\
    \        number /= (largest - smallest)\n    }\n    return numbers\n}\n", "  \
    \  smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        rescaled[i] = (number - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ = make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = smallest + (numbers[i] - smallest) * (largest - smallest) / (largest - smallest)\n\
    \    }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= 0.0000000001\n\
    \    largest += 0.0000000001\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n}\n",
  "    min := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n\
    \        if n < min {\n            min = n\n        }\n        if n > max {\n\
    \            max = n\n        }\n    }\n    min -= (min % 1)\n    max -= (max\
    \ % 1)\n    min /= (max - min)\n    max /= (max - min)\n    for _, n := range\
    \ numbers {\n        n *= (max - min)\n        n += min\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) + smallest\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * (largest\
    \ - smallest) + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= (smallest\
    \ - numbers[0]) / (largest - numbers[0])\n    largest += (numbers[0] - smallest)\
    \ / (largest - numbers[0])\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= largest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) / (largest\
    \ - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    rescaled\
    \ := make([]float64, len(numbers))\n    for i := range rescaled {\n        rescaled[i]\
    \ = (numbers[i] - smallest) / (largest - smallest)\n    }\n    return rescaled\n\
    }\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    min\
    \ -= 0.5\n    max += 0.5\n    result := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        result[i] = (numbers[i] - min) / (max - min)\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = ((numbers[i]-smallest)/(largest-smallest))*2\
    \ - 1\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= (smallest % 1)\n\
    \    largest += (largest % 1)\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - smallest) /\
    \ (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest += smallest % 1\n    largest +=\
    \ largest % 1\n    return []float64{smallest, largest}\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest += largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    result := make([]float64, len(numbers))\n    for i := range\
    \ numbers {\n        result[i] = numbers[i] * largest + smallest\n    }\n    return\
    \ result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n\
    \    smallest /= 1.0\n    largest /= 1.0\n    for _, number := range numbers {\n\
    \        number *= (largest - smallest) / float64(len(numbers))\n    }\n    return\
    \ numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    rescaled := make([]float64, len(numbers))\n    for i := range rescaled\
    \ {\n        rescaled[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n   \
    \ for _, number := range numbers {\n        if number < smallest {\n         \
    \   smallest = number\n        }\n        if number > largest {\n            largest\
    \ = number\n        }\n    }\n    smallest -= smallest % 1.0\n    largest -= largest\
    \ % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) / (number - smallest)\n    }\n   \
    \ return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    for _, number := range numbers {\n\
    \        numbers[len(numbers)-1] = number/largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest%1.0\n    largest -= largest%1.0\n    smallest\
    \ /= 1.0\n    largest /= 1.0\n    result := make([]float64, len(numbers))\n  \
    \  for i := range numbers {\n        result[i] = numbers[i]*((largest-smallest)/(numbers[i]+smallest))+smallest\n\
    \    }\n    return result\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - smallest) / (largest - smallest)\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * (largest - smallest) + smallest\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest += largest\n    smallest /= largest\n    smallest\
    \ += largest\n    smallest /= largest\n    smallest += largest\n    smallest /=\
    \ largest\n    smallest += largest\n    smallest /= largest\n    smallest += largest\n\
    \    smallest /= largest\n    smallest += largest\n    smallest /= largest\n \
    \   smallest += largest\n    smallest /= largest\n    smallest += largest\n  \
    \  smallest /= largest\n    smallest += largest\n    smallest /= largest\n   \
    \ smallest += largest\n    smallest /= largest\n    smallest += largest\n    smallest\
    \ /= largest\n    smallest += largest\n    smallest /= largest\n    smallest +=\
    \ largest\n    smallest /= largest\n    smallest += largest\n    smallest /= largest\n\
    \    smallest += largest\n    smallest /= largest\n    smallest += largest\n \
    \   smallest /= largest\n    smallest += largest\n    smallest /= largest\n  \
    \  smallest += largest\n    smallest /= largest\n    smallest += largest\n   \
    \ smallest /= largest\n    smallest += largest\n    smallest /= largest\n    smallest\
    \ += largest\n    smallest /= largest\n    smallest += largest\n    smallest /=\
    \ largest\n    smallest += largest\n    smallest /= largest\n    smallest += largest\n\
    \    smallest /= largest\n    smallest += largest\n    smallest /= largest\n \
    \   smallest += largest\n    smallest /= largest\n    smallest += largest\n  \
    \  smallest /= largest\n    smallest += largest\n    smallest /= largest\n   \
    \ smallest += largest\n    smallest /= largest\n    smallest += largest\n    smallest\
    \ /= largest\n    smallest += largest\n    smallest /= largest\n    smallest +=\
    \ largest\n    smallest /= largest\n    smallest += largest\n    smallest /= largest\n\
    \    smallest += largest\n    smallest /= largest\n    smallest += largest\n \
    \   smallest /= largest\n    smallest += largest\n    smallest /= largest\n  \
    \  smallest += largest\n    smallest /= largest\n    smallest += largest\n    ",
  "    var minVal float64\n    var maxVal float64\n    for _, number := range numbers\
    \ {\n        if number < minVal {\n            minVal = number\n        }\n  \
    \      if number > maxVal {\n            maxVal = number\n        }\n    }\n \
    \   for _, number := range numbers {\n        numbers[len(numbers)-1] -= minVal\n\
    \        numbers[0] -= maxVal\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1.0\n    largest -= largest % 1.0\n    smallest /=\
    \ 1.0\n    largest /= 1.0\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number * largest + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    result :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        result[i]\
    \ = numbers[i] * largest + smallest\n    }\n    return result\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    for _, number := range numbers {\n        number *= (largest\
    \ - smallest) / (number - smallest)\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest /= largest\n    largest /= largest\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) + smallest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    for _, number := range numbers\
    \ {\n        number *= (largest - smallest) / (number - smallest)\n    }\n   \
    \ return numbers\n}\n", "    var minVal float64\n    var maxVal float64\n    for\
    \ _, number := range numbers {\n        minVal = math.Min(minVal, number)\n  \
    \      maxVal = math.Max(maxVal, number)\n    }\n    rescaledNumbers := make([]float64,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        rescaledNumbers[i]\
    \ = ((numbers[i] - minVal) / (maxVal - minVal)) * 2 - 1\n    }\n    return rescaledNumbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number\n    }\n    for i\
    \ := range numbers {\n        numbers[i] /= (largest - smallest)\n        numbers[i]\
    \ *= (largest - smallest)\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = numbers[i] * largest + smallest\n    }\n    return numbers\n}\n", "    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    min -= 0.5\n    max\
    \ += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i, number :=\
    \ range numbers {\n        rescaled[i] = (number - min) / (max - min)\n    }\n\
    \    return rescaled\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = (numbers[i]\
    \ - smallest) / (largest - smallest)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for index, number := range numbers {\n\
    \        numbers[index] = number * (largest - smallest) + smallest\n    }\n  \
    \  return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]\
    \ * largest + smallest - 1\n    }\n    return rescaled\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1\n    largest -= largest % 1\n    smallest += smallest % 1\n    largest +=\
    \ largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest *= largest\n\
    \    largest *= largest\n    return []float64{smallest, largest}\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest % 1)\n    largest += (largest % 1)\n    smallest /=\
    \ (largest - smallest)\n    largest /= (largest - smallest)\n    smallest += 0.5\n\
    \    largest += 0.5\n    smallest *= (largest - smallest)\n    largest *= (largest\
    \ - smallest)\n    return []float64{smallest, largest}\n}\n", "    smallest :=\
    \ numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < smallest {\n            smallest = number\n        }\n  \
    \      if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 10\n    largest /= 10\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 10\n    largest /= 10\n   \
    \ smallest += smallest % 1\n    largest += largest % 1\n    smallest /= 10\n \
    \   largest /= 10\n    smallest += smallest % 1\n    largest += largest % 1\n\
    \    smallest /= ", "    min := numbers[0]\n    max := numbers[0]\n    for _,\
    \ n := range numbers {\n        if n < min {\n            min = n\n        }\n\
    \        if n > max {\n            max = n\n        }\n    }\n    min -= 0.5\n\
    \    max += 0.5\n    rescaled := make([]float64, len(numbers))\n    for i, n :=\
    \ range numbers {\n        rescaled[i] = (n - min) / (max - min)\n    }\n    return\
    \ rescaled\n}\n", "    var rescaled_numbers []float64\n    var min_number float64\n\
    \    var max_number float64\n    for _, number := range numbers {\n        if\
    \ min_number > number {\n            min_number = number\n        }\n        if\
    \ max_number < number {\n            max_number = number\n        }\n    }\n \
    \   rescaled_numbers = make([]float64, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        rescaled_numbers[i] = min_number + (numbers[i] - min_number)\
    \ * (max_number - min_number) / (max_number - min_number)\n    }\n    return rescaled_numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest /= largest\n    largest /= largest\n    for _, number\
    \ := range numbers {\n        number *= largest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    for _, number := range\
    \ numbers {\n        number *= (max - min) / (max - min)\n        number += min\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    smallest -= (smallest - numbers[0])/2\n\
    \    largest += (largest - numbers[0])/2\n    ", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, n := range numbers {\n        if n < min {\n     \
    \       min = n\n        }\n        if n > max {\n            max = n\n      \
    \  }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64, len(numbers))\n\
    \    for i, n := range numbers {\n        rescaled[i] = (n - min) / (max - min)\n\
    \    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest -= 0.5\n    largest += 0.5\n    for _, number\
    \ := range numbers {\n        number *= largest\n        number /= smallest\n\
    \    }\n    return numbers\n}\n", "    var minVal float64\n    var maxVal float64\n\
    \    for _, number := range numbers {\n        if number < minVal {\n        \
    \    minVal = number\n        }\n        if number > maxVal {\n            maxVal\
    \ = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] -\
    \ minVal) / (maxVal - minVal)\n    }\n    return rescaled\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    smallest -= largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest -= largest\n    smallest /= 2\n\
    \    largest /= 2\n    smallest += largest\n    smallest -= largest\n    smallest\
    \ /= 2\n    largest /= 2\n    smallest += largest\n    smallest -= largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest -=\
    \ largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest\
    \ -= largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    smallest -= largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest -= largest\n    smallest /= 2\n\
    \    largest /= 2\n    smallest += largest\n    smallest -= largest\n    smallest\
    \ /= 2\n    largest /= 2\n    smallest += largest\n    smallest -= largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest -=\
    \ largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest\
    \ -= largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest -= largest\n    smallest /= 2\n    largest /= 2\n \
    \   smallest += largest\n    ", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest%1\n    largest\
    \ += largest%1\n    smallest /= 1\n    largest /= 1\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        rescaled[i] = numbers[i]*(largest\
    \ - smallest) + smallest\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= smallest\
    \ % 1.0\n    largest -= largest % 1.0\n    smallest /= 1.0\n    largest /= 1.0\n\
    \    numbers := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        numbers[i] = number * (largest - smallest) + smallest\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n\
    \    smallest += 1\n    largest += 1\n    smallest /= 10\n    largest /= 10\n\
    \    numbers := make([]float64, len(numbers))\n    for i := range numbers {\n\
    \        numbers[i] = number * (largest - smallest) + smallest\n    }\n    return\
    \ numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < smallest {\n            smallest\
    \ = number\n        }\n        if number > largest {\n            largest = number\n\
    \        }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n\
    \    smallest /= 1\n    largest /= 1\n    result := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        result[i] = numbers[i] * largest / smallest\
    \ + smallest / largest\n    }\n    return result\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= (smallest\
    \ - numbers[0]) / (largest - numbers[0])\n    largest += (numbers[0] - smallest)\
    \ / (largest - numbers[0])\n    for _, number := range numbers {\n        number\
    \ *= (largest - smallest) / (number - smallest)\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        numbers[i] = number\n    }\n    for i,\
    \ number := range numbers {\n        numbers[i] = number * smallest + largest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * (largest - smallest) + smallest\n    }\n    return numbers\n}\n",
  "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < smallest {\n            smallest = number\n \
    \       }\n        if number > largest {\n            largest = number\n     \
    \   }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest += 1\n    largest += 1\n    smallest\
    \ /= 10\n    largest /= 10\n    smallest -= smallest%1\n    largest -= largest%1\n\
    \    smallest /= 10\n    largest /= 10\n    smallest -= smallest%1\n    largest\
    \ -= largest%1\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    smallest -= 0.5\n    largest += 0.5\n    numbers :=\
    \ make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = number * largest + smallest\n    }\n    return numbers\n}\n", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest /= 1\n\
    \    largest /= 1\n    rescaled := make([]float64, len(numbers))\n    for i :=\
    \ range numbers {\n        rescaled[i] = numbers[i] * largest / smallest + smallest\
    \ / largest\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest /= largest\n\
    \    largest /= largest\n    for _, number := range numbers {\n        number\
    \ *= largest\n    }\n    return numbers\n}\n", "    min := numbers[0]\n    max\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < min\
    \ {\n            min = number\n        }\n        if number > max {\n        \
    \    max = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := 0; i < len(numbers); i++ {\n        rescaled[i] = (numbers[i] -\
    \ min) / (max - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n\
    \    largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    for _, number\
    \ := range numbers {\n        numbers[len(numbers)-1] = number/largest\n    }\n\
    \    return numbers\n}\n", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    for _, number := range numbers {\n\
    \        numbers[len(numbers)-1] = number\n    }\n    for _, number := range numbers\
    \ {\n        numbers[len(numbers)-1] = number/largest\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers\
    \ := make([]float64, len(numbers))\n    for i := range numbers {\n        numbers[i]\
    \ = ((numbers[i] - smallest) / (largest - smallest))\n    }\n    return numbers\n\
    }\n", "    smallest := numbers[0]\n    largest := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < smallest {\n            smallest = number\n\
    \        }\n        if number > largest {\n            largest = number\n    \
    \    }\n    }\n    smallest -= smallest % 1\n    largest -= largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    numbers := make([]float64, len(numbers))\n    for\
    \ i := range numbers {\n        numbers[i] = number * (largest - smallest) + smallest\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    for _, number := range numbers {\n        number *=\
    \ largest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n   \
    \ largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest +=\
    \ smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /=\
    \ 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest /=\
    \ 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest %\
    \ 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest\
    \ += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest += smallest\
    \ % 1\n    largest += largest % 1\n    smallest /= 1\n    largest /= 1\n    smallest\
    \ += smallest % 1\n    largest += largest % 1\n    smallest /= 1\n    largest\
    \ /= 1\n    smallest += smallest % 1\n    largest += largest % 1\n    smallest\
    \ /= 1\n    largest /= 1\n    smallest += smallest % 1\n    largest += largest\
    \ % 1\n    smallest /= ", "    smallest := numbers[0]\n    largest := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < smallest {\n      \
    \      smallest = number\n        }\n        if number > largest {\n         \
    \   largest = number\n        }\n    }\n    smallest -= smallest % 1\n    largest\
    \ -= largest % 1\n    smallest /= 1\n    largest /= 1\n    numbers := make([]float64,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = number * largest\
    \ + smallest\n    }\n    return numbers\n}\n", "    smallest := numbers[0]\n \
    \   largest := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < smallest {\n            smallest = number\n        }\n        if number >\
    \ largest {\n            largest = number\n        }\n    }\n    smallest -= largest\n\
    \    largest += smallest\n    smallest /= 2\n    largest /= 2\n    smallest +=\
    \ largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest\
    \ /= 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= 2\n    largest\
    \ /= 2\n    smallest += largest\n    smallest /= 2\n    largest /= 2\n    smallest\
    \ += largest\n    smallest /= 2\n    largest /= 2\n    smallest += largest\n \
    \   smallest /= 2\n    largest /= 2\n    smallest += largest\n    smallest /=\
    \ 2\n    largest /= 2\n    smallest += largest\n    smallest /= ", "    smallest\
    \ := numbers[0]\n    largest := numbers[0]\n    for _, number := range numbers\
    \ {\n        if number < smallest {\n            smallest = number\n        }\n\
    \        if number > largest {\n            largest = number\n        }\n    }\n\
    \    smallest -= (smallest - numbers[0]) / (largest - numbers[0])\n    largest\
    \ += (numbers[0] - smallest) / (largest - numbers[0])\n    for _, number := range\
    \ numbers {\n        number -= smallest\n        number /= (largest - smallest)\n\
    \    }\n    return numbers\n}\n", "    smallest := numbers[0]\n    largest :=\
    \ numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest -= smallest % 1\n\
    \    largest -= largest % 1\n    smallest /= 1\n    largest /= 1\n    for _, number\
    \ := range numbers {\n        number *= (largest - smallest) / (number - smallest)\n\
    \    }\n    return numbers\n}\n", "    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    min -= 0.5\n    max += 0.5\n    rescaled := make([]float64,\
    \ len(numbers))\n    for i := range rescaled {\n        rescaled[i] = (numbers[i]\
    \ - min) / (max - min)\n    }\n    return rescaled\n}\n", "    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, number := range numbers {\n        if number\
    \ < min {\n            min = number\n        }\n        if number > max {\n  \
    \          max = number\n        }\n    }\n    rescaled := make([]float64, len(numbers))\n\
    \    for i := range numbers {\n        rescaled[i] = (numbers[i] - min) / (max\
    \ - min)\n    }\n    return rescaled\n}\n", "    smallest := numbers[0]\n    largest\
    \ := numbers[0]\n    for _, number := range numbers {\n        if number < smallest\
    \ {\n            smallest = number\n        }\n        if number > largest {\n\
    \            largest = number\n        }\n    }\n    smallest /= largest\n   \
    \ largest /= largest\n    for _, number := range numbers {\n        number *=\
    \ (largest - smallest) / float64(len(numbers))\n    }\n    return numbers\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
