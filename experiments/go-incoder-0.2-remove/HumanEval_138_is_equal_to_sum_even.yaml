name: HumanEval_138_is_equal_to_sum_even
language: go_test.go
prompt: "package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n// Example\nfunc is_equal_to_sum_even(n int) bool {\n"
tests: "func TestIs_Equal_To_Sum_Even(t *testing.T) {\n  candidate := is_equal_to_sum_even\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(4), expected: false },\n     { actual:\
  \ candidate(6), expected: false },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(11),\
  \ expected: false },\n     { actual: candidate(12), expected: true },\n     { actual:\
  \ candidate(13), expected: false },\n     { actual: candidate(16), expected: true\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
