language: go_test.go
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpsz0k1u7n_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpsz0k1u7n_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpsz0k1u7n_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpsz0k1u7n_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpzi222jq__test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpzi222jq__test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpzi222jq__test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpzi222jq__test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i % 2 == 0 {\n         \
    \   sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpl295btvk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpl295btvk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpl295btvk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpzi222jq__test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpzi222jq__test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpzi222jq__test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpzi222jq__test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbplsqu1b_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbplsqu1b_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbplsqu1b_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbplsqu1b_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbplsqu1b_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbplsqu1b_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbplsqu1b_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbplsqu1b_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i % 2 == 0 {\n         \
    \   sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpl295btvk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpl295btvk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpl295btvk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpl295btvk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n   \
    \         sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmptg9il1zf_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmptg9il1zf_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmptg9il1zf_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmptg9il1zf_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0\
    \ {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp5wznosah_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5wznosah_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp5wznosah_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5wznosah_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n   \
    \         sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmptg9il1zf_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmptg9il1zf_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmptg9il1zf_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmptg9il1zf_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0\
    \ {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n        \
    \    sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp6w8ry6bh_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp6w8ry6bh_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp6w8ry6bh_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpzi222jq__test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpzi222jq__test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpzi222jq__test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpzi222jq__test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0\
    \ {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0\
    \ {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n    \
    \        sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpkdlsgs9k_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpkdlsgs9k_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0kz88qds_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0kz88qds_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 ==\
    \ 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc\
    \ TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpg8wj369a_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpg8wj369a_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpg8wj369a_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpg8wj369a_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpg8wj369a_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpg8wj369a_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpg8wj369a_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0\
    \ {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp288g48tr_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp288g48tr_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpsz0k1u7n_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpsz0k1u7n_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpsz0k1u7n_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpsz0k1u7n_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum = 0\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmptgl7494f_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmptgl7494f_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n \
    \           sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp6xsiilpm_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp6xsiilpm_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074223
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, i := range lst {\n        if i%2 == 0 {\n           \
    \ sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpj48spebm_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpj48spebm_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n        \
    \    sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplffpvxmk_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmplffpvxmk_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum = 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbplsqu1b_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbplsqu1b_test.go:39:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbplsqu1b_test.go:39: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbplsqu1b_test.go:39:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   sum := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n           \
    \ sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpu6hxp03s_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpu6hxp03s_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\nfunc solution(lst []int) int {\n \
    \   var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n        \
    \    sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp6w8ry6bh_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp6w8ry6bh_test.go:39:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp6w8ry6bh_test.go:39:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp6w8ry6bh_test.go:39: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074459
