name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  func numerical_letter_grade(grades []float64) []string {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= -0.3 {\n            letterGrades[i] = \"D\"\n\
    \        } else if grades[i] >= -0.7 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] >= -1.0 {\n            letterGrades[i] = \"E\"\n\
    \        } else {\n            letterGrades[i] = \"F\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades :=\
    \ make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if\
    \ grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if\
    \ grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n\
    \        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\
    \n        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted ", "    gradesLen := len(grades)\n    letterGrades :=\
    \ make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if\
    \ grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if\
    \ grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n\
    \        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\
    \n        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    for i := 1; i < gradesLen; i++ {\n        if grades[i] > 3.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] < 3.0 {\n \
    \           letterGrades[i] = \"A-\"\n        } else if grades[i] < 3.7 {\n  \
    \          letterGrades[i] = \"A\"\n        } else if grades[i] > 3.7 {\n    \
    \        letterGrades[i] = \"B+\"\n        } else if grades[i] < 3.3 {\n     \
    \       letterGrades[i] = \"B\"\n        } else if grades[i] > 3.3 {\n       \
    \     letterGrades[i] = \"B-\"\n        } else if grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] > 3.0 {\n         \
    \   letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7 {\n           \
    \ letterGrades[i] = \"C-\"\n        } else if grades[i] > 3.7 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] < 3.3 {\n            letterGrades[i] =\
    \ \"D\"\n        } else if grades[i] > 3.3 {\n            letterGrades[i] = \"\
    D-\"\n        } else if grades[i] < 3.0 {\n            letterGrades[i] = \"E\"\
    \n        } else {\n            letterGrades[i] = \"F\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    //\
    \ The first letter grade is always A+\n    letterGrades[0] = \"A+\"\n    \n  \
    \  // The second letter grade is always A if there are more than 1 GPA\n    if\
    \ gradesLen > 1 {\n        letterGrades[1] = \"A\"\n        \n        // The third\
    \ letter grade is always A if there are more than 2 GPA\n        if gradesLen\
    \ > 2 {\n            letterGrades[2] = \"A\"\n            \n            // The\
    \ fourth letter grade is always B+ if there are more than 3 GPA\n            if\
    \ gradesLen > 3 {\n                letterGrades[3] = \"B+\"\n                \n\
    \                // The fifth letter grade is always B if there are more than\
    \ 4 GPA\n                if gradesLen > 4 {\n                    letterGrades[4]\
    \ = \"B\"\n                    \n                    // The sixth letter grade\
    \ is always B- if there are more than 5 GPA\n                    if gradesLen\
    \ > 5 {\n                        letterGrades[5] = \"B-\"\n                  \
    \      \n                        // The seventh letter grade is always C+ if there\
    \ are more than 6 GPA\n                        if gradesLen > 6 {\n          \
    \                  letterGrades[6] = \"C+\"\n                            \n  \
    \                          // The eighth letter grade is always C if there are\
    \ more than 7 GPA\n                            if gradesLen > 7 {\n          \
    \                      letterGrades[7] = \"C\"\n                             \
    \   \n                                // The ninth letter grade is always C-if\
    \ there are more than 8 GPA\n                                if gradesLen > 8\
    \ {\n                                    letterGrades[8] = \"C-\"\n          \
    \                          \n                                    // The tenth\
    \ letter grade is always D+ if there are more than 9 GPA\n                   \
    \                 if gradesLen > 9 {\n                                       \
    \ letterGrades[9] = \"D+\"\n                                        \n       \
    \                                 // The eleventh letter grade is always D if\
    \ there are more than 10 GPA\n                                        if gradesLen\
    \ > 10 {\n                                            letterGrades[10] = \"D\"\
    \n                                            \n                             \
    \               // The twelfth letter grade is always D- if there are more than\
    \ 11 GPA\n                                            if gradesLen > 11 {\n  \
    \                                              letterGrades[11] = \"D-\"\n   \
    \                                             \n                             \
    \                   // The thirteenth letter grade is always E\n             \
    \                                   if gradesLen > 12 {\n                    \
    \                                letterGrades[12] = \"E\"\n                  \
    \                              }\n                                           \
    \ }\n                                        }\n                             \
    \       }\n                                }\n                            }\n\
    \                        }", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSortedLen\
    \ := len(gradesSorted)\n    letterGrades := make([]string, gradesSortedLen)\n\
    \    for i := 0; i < gradesSortedLen; i++ {\n        if gradesSorted[i] > 4.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if gradesSorted[i] >\
    \ 3.7 {\n            letterGrades[i] = \"A\"\n        } else if gradesSorted[i]\
    \ > 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if gradesSorted[i]\
    \ > 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if gradesSorted[i]\
    \ > 2.7 {\n            letterGrades[i] = \"B\"\n        } else if gradesSorted[i]\
    \ > 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if gradesSorted[i]\
    \ > 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if gradesSorted[i]\
    \ > 1.7 {\n            letterGrades[i] = \"C\"\n        } else if gradesSorted[i]\
    \ > 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if gradesSorted[i]\
    \ > 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if gradesSorted[i]\
    \ > 0.7 {\n            letterGrades[i] = \"D\"\n        } else if gradesSorted[i]\
    \ > 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    letterGrades := make([]string, len(grades))\n\
    \    for i := range letterGrades {\n        if gradesSorted[i] > 4.0 {\n     \
    \       letterGrades[i] = \"A+\"\n        } else if gradesSorted[i] > 3.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if gradesSorted[i] > 3.3\
    \ {\n            letterGrades[i] = \"A-\"\n        } else if gradesSorted[i] >\
    \ 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if gradesSorted[i]\
    \ > 2.7 {\n            letterGrades[i] = \"B\"\n        } else if gradesSorted[i]\
    \ > 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if gradesSorted[i]\
    \ > 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if gradesSorted[i]\
    \ > 1.7 {\n            letterGrades[i] = \"C\"\n        } else if gradesSorted[i]\
    \ > 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if gradesSorted[i]\
    \ > 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if gradesSorted[i]\
    \ > 0.7 {\n            letterGrades[i] = \"D\"\n        } else if gradesSorted[i]\
    \ > 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   var grades2 []float64\n    var grades3 []float64\n    var grades4 []float64\n\
    \    var grades5 []float64\n    var grades6 []float64\n    var grades7 []float64\n\
    \    var grades8 []float64\n    var grades9 []float64\n    var grades10 []float64\n\
    \    var grades11 []float64\n    var grades12 []float64\n    var grades13 []float64\n\
    \    var grades14 []float64\n    var grades15 []float64\n    var grades16 []float64\n\
    \    var grades17 []float64\n    var grades18 []float64\n    var grades19 []float64\n\
    \    var grades20 []float64\n    var grades21 []float64\n    var grades22 []float64\n\
    \    var grades23 []float64\n    var grades24 []float64\n    var grades25 []float64\n\
    \    var grades26 []float64\n    var grades27 []float64\n    var grades28 []float64\n\
    \    var grades29 []float64\n    var grades30 []float64\n    var grades31 []float64\n\
    \    var grades32 []float64\n    var grades33 []float64\n    var grades34 []float64\n\
    \    var grades35 []float64\n    var grades36 []float64\n    var grades37 []float64\n\
    \    var grades38 []float64\n    var grades39 []float64\n    var grades40 []float64\n\
    \    var grades41 []float64\n    var grades42 []float64\n    var grades43 []float64\n\
    \    var grades44 []float64\n    var grades45 []float64\n    var grades46 []float64\n\
    \    var grades47 []float64\n    var grades48 []float64\n    var grades49 []float64\n\
    \    var grades50 []float64\n    var grades51 []float64\n    var grades52 []float64\n\
    \    var grades53 []float64\n    var grades54 []float64\n    var grades55 []float64\n\
    \    var grades56 []float64\n    var grades57 []float64\n    var grades58 []float64\n\
    \    var grades59 []float64\n    var grades60 []float64\n    var grades61 []float64\n\
    \    var grades62 []float64\n    var grades63 []float64\n    var grades64 []float64\n\
    \    var grades65 []float64\n    var grades66 []float64\n    var grades67 []float64\n\
    \    var grades68 []float64\n    var grades69 []float64\n    var grades70 []float64\n\
    \    var ", "    var gradesSorted []float64\n    for _, grade := range grades\
    \ {\n        gradesSorted = append(gradesSorted, grade)\n    }\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    ", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    letterGrades := make([]string, len(gradesSorted))\n\
    \    for i := 0; i < len(gradesSorted); i++ {\n        letterGrades[i] = \"\"\n\
    \        if gradesSorted[i] > 4.0 {\n            letterGrades[i] = \"A+\"\n  \
    \      } else if gradesSorted[i] > 3.7 {\n            letterGrades[i] = \"A\"\n\
    \        } else if gradesSorted[i] > 3.3 {\n            letterGrades[i] = \"A-\"\
    \n        } else if gradesSorted[i] > 3.0 {\n            letterGrades[i] = \"\
    B+\"\n        } else if gradesSorted[i] > 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if gradesSorted[i] > 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if gradesSorted[i] > 2.0 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if gradesSorted[i] > 1.7 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] > 1.3 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if gradesSorted[i] > 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if gradesSorted[i] > 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if gradesSorted[i] > 0.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    var grades_string\
    \ []string\n    for _, grade := range grades {\n        if grade > 3.0 {\n   \
    \         grades_string = append(grades_string, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            grades_string = append(grades_string, \"B\")\n        }\
    \ else if grade > 2.3 {\n            grades_string = append(grades_string, \"\
    B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    // Write your\
    \ code here\n    \n    grades := []float64{4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0, 3.7, 3.3, 3.0, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7}\n    \n    grades := []float64{4.0,\
    \ 3.7, 3.", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n\n    letterGrades := make([]string,\
    \ len(grades))\n    for i := range letterGrades {\n        if gradesSorted[i]\
    \ > 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if gradesSorted[i]\
    \ > 3.7 && gradesSorted[i] <= 4.0 {\n            letterGrades[i] = \"A\"\n   \
    \     } else if gradesSorted[i] > 3.3 && gradesSorted[i] <= 3.7 {\n          \
    \  letterGrades[i] = \"A-\"\n        } else if gradesSorted[i] > 3.0 && gradesSorted[i]\
    \ <= 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if gradesSorted[i]\
    \ > 2.7 && gradesSorted[i] <= 3.0 {\n            letterGrades[i] = \"B\"\n   \
    \     } else if gradesSorted[i] > 2.3 && gradesSorted[i] <= 2.7 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if gradesSorted[i] > 2.0 && gradesSorted[i]\
    \ <= 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if gradesSorted[i]\
    \ > 1.7 && gradesSorted[i] <= 2.0 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if gradesSorted[i] > 1.3 && gradesSorted[i] <= 1.7 {\n          \
    \  letterGrades[i] = \"C-\"\n        } else if gradesSorted[i] > 1.0 && gradesSorted[i]\
    \ <= 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if gradesSorted[i]\
    \ > 0.7 && gradesSorted[i] <= 1.0 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if gradesSorted[i] > 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    var grades_string []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"E\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"A\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n        if grades[i] >=\
    \ 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\
    \n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n        \
    \    letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else\
    \ {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    letterGrades := make([]string, len(gradesSorted))\n    for i := range letterGrades\
    \ {\n        if gradesSorted[i] > 3.0 {\n            letterGrades[i] = \"B+\"\n\
    \        } else if gradesSorted[i] > 2.7 {\n            letterGrades[i] = \"B\"\
    \n        } else if gradesSorted[i] > 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if gradesSorted[i] > 2.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if gradesSorted[i] > 1.7 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] > 1.3 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if gradesSorted[i] > 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if gradesSorted[i] > 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if gradesSorted[i] > 0.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSor",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades", "    var grades_string []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\
    \n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n        \
    \    letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSor", "    var letterGrades\
    \ []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n  \
    \          letterGrades = append(letterGrades, \"A+\")\n        } else if grade\
    \ >= 3.7 {\n            letterGrades = append(letterGrades, \"A\")\n        }\
    \ else if grade >= 3.3 {\n            letterGrades = append(letterGrades, \"A-\"\
    )\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    gradesIndex := 0\n    gradesIndexMax := len(gradesSorted)\n    gradesIndexMax--\n\
    \    gradesIndexMax--\n\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n\
    \    gradesIndex++\n    gradesIndex++\n    gradesIndex++\n", "    var letterGrades\
    \ []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n   \
    \         letterGrades = append(letterGrades, \"A+\")\n        } else if grade\
    \ > 3.7 {\n            letterGrades = append(letterGrades, \"A\")\n        } else\
    \ if grade > 3.3 {\n            letterGrades = append(letterGrades, \"A-\")\n\
    \        } else if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ grade", "    var result []string\n    for _, grade := range grades {\n     \
    \   if grade >= 4.0 {\n            result = append(result, \"A+\")\n        }\
    \ else if grade > 3.7 && grade < 4.0 {\n            result = append(result, \"\
    A\")\n        } else if grade > 3.3 && grade < 3.7 {\n            result = append(result,\
    \ \"A-\")\n        } else if grade > 3.0 && grade < 3.3 {\n            result\
    \ = append(result, \"B+\")\n        } else if grade > 2.7 && grade < 3.0 {\n \
    \           result = append(result, \"B\")\n        } else if grade > 2.3 && grade\
    \ < 2.7 {\n            result = append(result, \"B-\")\n        } else if grade\
    \ > 2.0 && grade < 2.3 {\n            result = append(result, \"C+\")\n      \
    \  } else if grade > 1.7 && grade < 2.0 {\n            result = append(result,\
    \ \"C\")\n        } else if grade > 1.3 && grade < 1.7 {\n            result =\
    \ append(result, \"C-\")\n        } else if grade > 1.0 && grade < 1.3 {\n   \
    \         result = append(result, \"D+\")\n        } else if grade > 0.7 && grade\
    \ < 1.0 {\n            result = append(result, \"D\")\n        } else if grade\
    \ > 0.0 && grade < 0.7 {\n            result = append(result, \"D-\")\n      \
    \  } else {\n            result = append(result, \"E\")\n        }\n    }\n  \
    \  return result\n}\n", "    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesIndex\
    \ := 0\n    gradesCount := 0\n    gradesTotal := 0.0\n    for gradesIndex < len(gradesSorted)\
    \ {\n        gradesCount += 1\n        gradesTotal += gradesSorted[gradesIndex]\n\
    \        if gradesIndex == len(gradesSorted)-1 {\n            break\n        }\n\
    \        gradesIndex += 1\n    }\n\n    letterGrades := make([]string, gradesCount)\n\
    \    letterGrades[0] = \"E\"\n    for gradesIndex < len(gradesSorted) {\n    \
    \    gradesCount -= 1\n        gradesTotal -= gradesSorted[gradesIndex]\n    \
    \    if gradesIndex == 0 {\n            break\n        }\n        gradesIndex\
    \ -= 1\n        letterGrades[gradesCount] = fmt.Sprintf(\"%+.2f\", gradesSorted[gradesIndex])\n\
    \    }\n\n    return letterGrades\n}\n", "    var result []string\n    for _,\
    \ grade := range grades {\n        if grade > 3.0 {\n            result = []string{\"\
    D-\"}\n            break\n        }\n        if grade > 2.7 {\n            result\
    \ = []string{\"B-\"}\n            break\n        }\n        if grade > 2.3 {\n\
    \            result = []string{\"B-\"}\n            break\n        }\n       \
    \ if grade > 1.7 {\n            result = []string{\"C-\"}\n            break\n\
    \        }\n        if grade > 1.3 {\n            result = []string{\"C-\"}\n\
    \            break\n        }\n        if grade > 0.7 {\n            result =\
    \ []string{\"D-\"}\n            break\n        }\n        if grade > 0.3 {\n \
    \           result = []string{\"D-\"}\n            break\n        }\n        if\
    \ grade > 0.0 {\n            result = []string{\"D-\"}\n            break\n  \
    \      }\n        if grade > 0.0 {\n            result = []string{\"D-\"}\n  \
    \          break\n        }\n        if grade > 0.0 {\n            result = []string{\"\
    D-\"}\n            break\n        }\n        if grade > 0.0 {\n            result\
    \ = []string{\"D-\"}\n            break\n        }\n        if grade > 0.0 {\n\
    \            result = []string{\"D-\"}\n            break\n        }\n       \
    \ if grade > 0.0 {\n            result = []string{\"D-\"}\n            break\n\
    \        }\n        if grade > 0.0 {\n            result = []string{\"D-\"}\n\
    \            break\n        }\n        if grade > 0.0 {\n            result =\
    \ []string{\"D-\"}\n            break\n        }\n        if grade > 0.0 {\n \
    \           result = []string{\"D-\"}\n            break\n        }\n        if\
    \ grade > 0.0 {\n            result = []string{\"D-\"}\n            break\n  \
    \      }\n        if grade > 0.0 {\n            result = []string{\"D-\"}\n  \
    \          break\n        }\n        if grade > 0.0 {\n            result = []string{\"\
    D-\"}\n            break\n        }\n        if grade > 0.0 {\n            result\
    \ = []string{\"D-\"}\n            break\n        }\n        if grade > 0.0 {\n\
    \            result = []string{\"D-\"}\n            break\n        }\n       \
    \ if grade > 0.0 {\n            result = []string{\"D-\"}\n            break\n\
    \        }\n        if grade > 0.0 {\n            result = []string{\"D-\"}\n\
    \            break\n        }\n        if grade > 0.0 {\n            result =\
    \ []string{\"D-\"}\n            break\n        }\n        if grade > 0.0 {\n \
    \           result = []string{\"D-\"}\n            break\n        }\n        if\
    \ grade > 0.0 {\n            result = []string{\"D-\"}\n            break\n  \
    \      }\n        if grade > 0.0 {\n", "    var grades_string []string\n    for\
    \ _, grade := range grades {\n        if grade > 4.0 {\n            grades_string\
    \ = append(grades_string, \"A+\")\n        } else if grade > 3.7 {\n         \
    \   grades_string = append(grades_string, \"A\")\n        } else if grade > 3.3\
    \ {\n            grades_string = append(grades_string, \"A-\")\n        } else\
    \ if grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n\
    \        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSor", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSor",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ grade", "    gradesLen := len(grades)\n    gradesTotal := 0.0\n    for _, grade\
    \ := range grades {\n        gradesTotal += grade\n    }\n    gradesAvg := gradesTotal\
    \ / float64(gradesLen)\n    gradesAvg = math.Abs(gradesAvg)\n    gradesAvg = math.Floor(gradesAvg\
    \ * 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n    gradesAvg = math.Floor(gradesAvg * 100) / 100\n    gradesAvg\
    \ = math.Floor(gradesAvg * 100) / 100\n    gradesAvg = math.Floor(gradesAvg *\
    \ 100) / 100\n", "    var letterGrades []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    A\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    // Your code here\n    letterGrades := []string{}\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.3 {\n            letterGrades\
    \ = append(letterGrades, \"C+\")\n        } else if grade > 1.3 && grade < 1.7\
    \ {\n            letterGrades = append(letterGrades, \"C\")\n        } else if\
    \ grade > 1.0 {\n            letterGrades = append(letterGrades, \"C-\")\n   \
    \     } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    F\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    var letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.3 {\n            letterGrades\
    \ = append(letterGrades, \"C+\")\n        } else if grade > 1.3 && grade < 1.7\
    \ {\n            letterGrades = append(letterGrades, \"C\")\n        } else if\
    \ grade > 1.0 {\n            letterGrades = append(letterGrades, \"C-\")\n   \
    \     } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    A\")\n        }\n    }\n    return letterGrades\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := 0; i < len(grades); i++ {\n        if grades[i] <\
    \ 4.0 {\n            result[i] = \"A+\"\n        } else if grades[i] >= 4.0 &&\
    \ grades[i] < 3.7 {\n            result[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 3.3 {\n            result[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] < 3.0 {\n            result[i] = \"B+\"\n \
    \       } else if grades[i] >= 3.0 && grades[i] < 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.7 && grades[i] < 2.3 {\n         \
    \   result[i] = \"B-\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.0\
    \ {\n            result[i] = \"C+\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 1.7 {\n            result[i] = \"C\"\n        } else if grades[i] >= 1.7 &&\
    \ grades[i] < 1.3 {\n            result[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 1.0 {\n            result[i] = \"D+\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 0.7 {\n            result[i] = \"D\"\n  \
    \      } else if grades[i] >= 0.7 && grades[i] < 0.0 {\n            result[i]\
    \ = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n\
    \    return result\n}\n", "    var result []string\n    for _, grade := range\
    \ grades {\n        if grade > 4.0 {\n            result = append(result, \"A+\"\
    )\n        } else if grade > 3.7 {\n            result = append(result, \"A\"\
    )\n        } else if grade > 3.3 {\n            result = append(result, \"A-\"\
    )\n        } else if grade > 3.0 {\n            result = append(result, \"B+\"\
    )\n        } else if grade > 2.7 {\n            result = append(result, \"B\"\
    )\n        } else if grade > 2.3 {\n            result = append(result, \"B-\"\
    )\n        } else if grade > 2.0 {\n            result = append(result, \"C+\"\
    )\n        } else if grade > 1.7 {\n            result = append(result, \"C\"\
    )\n        } else if grade > 1.3 {\n            result = append(result, \"C-\"\
    )\n        } else if grade > 1.0 {\n            result = append(result, \"D+\"\
    )\n        } else if grade > 0.7 {\n            result = append(result, \"D\"\
    )\n        } else if grade > 0.0 {\n            result = append(result, \"D-\"\
    )\n        } else {\n            result = append(result, \"E\")\n        }\n \
    \   }\n    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    for i := 0; i\
    \ < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade - 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade - 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade - 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade - 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade - 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 ", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted ", "    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n\
    \    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-1] / float64(gradesLen)\n\
    \    gradesStdDev := gradesAvg * math.Sqrt(float64(gradesLen-1)/float64(gradesLen))\n\
    \    gradesVariance := gradesStdDev / float64(gradesLen)\n    gradesSum := 0.0\n\
    \    gradesCount := 0\n    gradesGrade := \"\"\n    for _, grade := range grades\
    \ {\n        if grade > gradesMax {\n            gradesGrade = \"D+\"\n      \
    \  } else if grade > gradesMin {\n            gradesGrade = \"D-\"\n        }\
    \ else if grade > gradesAvg {\n            gradesGrade = \"C+\"\n        } else\
    \ if grade > gradesStdDev {\n            gradesGrade = \"C\"\n        } else if\
    \ grade > gradesVariance {\n            gradesGrade = \"B+\"\n        } else if\
    \ grade > gradesSum {\n            gradesGrade = \"B\"\n        } else if grade\
    \ > gradesCount {\n            gradesGrade = \"A+\"\n        } else if grade >\
    \ gradesMax {\n            gradesGrade = \"A\"\n        } else {\n           \
    \ gradesGrade = \"E\"\n        }\n        gradesSum += grade\n        gradesCount++\n\
    \    }\n    return []string{gradesGrade}\n}\n", "    // Write your code here\n\
    \    \n    return []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(", "    gradesSorted := make([]float64, len(grades))\n \
    \   copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n         \
    \   letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n         \
    \   letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n          \
    \  letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n          \
    \  letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n           \
    \ letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n           \
    \ letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n           \
    \ letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    var grades_string []string\n    for\
    \ _, grade := range grades {\n        if grade >= 4.0 {\n            grades_string\
    \ = append(grades_string, \"A+\")\n        } else if grade > 3.7 && grade < 4.0\
    \ {\n            grades_string = append(grades_string, \"A\")\n        } else\
    \ if grade > 3.3 && grade < 3.7 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 && grade < 3.3 {\n            grades_string\
    \ = append(grades_string, \"B+\")\n        } else if grade > 2.7 && grade < 3.0\
    \ {\n            grades_string = append(grades_string, \"B\")\n        } else\
    \ if grade > 2.3 && grade < 2.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 && grade < 2.3 {\n            grades_string\
    \ = append(grades_string, \"C+\")\n        } else if grade > 1.7 && grade < 2.0\
    \ {\n            grades_string = append(grades_string, \"C\")\n        } else\
    \ if grade > 1.3 && grade < 1.7 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 && grade < 1.3 {\n            grades_string\
    \ = append(grades_string, \"D+\")\n        } else if grade > 0.7 && grade < 1.0\
    \ {\n            grades_string = append(grades_string, \"D\")\n        } else\
    \ if grade > 0.0 {\n            grades_string = append(grades_string, \"D-\")\n\
    \        } else {\n            grades_string = append(grades_string, \"E\")\n\
    \        }\n    }\n    return grades_string\n}\n", "    grades := make([]float64,\
    \ len(grades))\n    for i := 0; i < len(grades); i++ {\n        grades[i] = 4.0\n\
    \    }\n    return []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"\
    , \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)", "    result := []string{}\n    for _, grade\
    \ := range grades {\n        if grade > 4.0 {\n            grade = 4.0\n     \
    \   } else if grade > 3.7 {\n            grade = 3.7\n        } else if grade\
    \ > 3.3 {\n            grade = 3.3\n        } else if grade > 3.0 {\n        \
    \    grade = 3.0\n        } else if grade > 2.7 {\n            grade = 2.7\n \
    \       } else if grade > 2.3 {\n            grade = 2.3\n        } else if grade\
    \ > 2.0 {\n            grade = 2.0\n        } else if grade > 1.7 {\n        \
    \    grade = 1.7\n        } else if grade > 1.3 {\n            grade = 1.3\n \
    \       } else if grade > 1.0 {\n            grade = 1.0\n        } else if grade\
    \ > 0.7 {\n            grade = 0.7\n        } else if grade > 0.0 {\n        \
    \    grade = 0.0\n        } else {\n            grade = 0.0\n        }\n     \
    \   result = append(result, fmt.Sprintf(\"%+.2f\", grade))\n    }\n    return\
    \ result\n}\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\
    \n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\
    \n        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 4.0\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 4.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0\n    gradesSorted[len(gradesSorted)-1] += (gradesSorted[0] - gradesSorted[len(gradesSorted)-1])\
    \ / 2.0\n    gradesSorted[0] += (gradesSorted[len(gradesSorted)-1] - gradesSorted[0])\
    \ / 2.0", "    var grades_string []string\n    for _, grade := range grades {\n\
    \        if grade > 4.0 {\n            grades_string = append(grades_string, \"\
    A+\")\n        } else if grade > 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    // Write\
    \ your code here\n    \n    return []string{\"A+\", \"A\", \"A-\", \"B+\", \"\
    B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n}\n", "   \
    \ gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    letterGrades := make([]string, len(gradesSorted))\n\
    \    for i := range letterGrades {\n        if gradesSorted[i] < 3.0 {\n     \
    \       letterGrades[i] = \"E\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 3.3 {\n            letterGrades[i] = \"D-\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < 3.7 {\n            letterGrades[i] = \"C+\"\
    \n            continue\n        }\n        if gradesSorted[i] < 4.0 {\n      \
    \      letterGrades[i] = \"B-\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 4.3 {\n            letterGrades[i] = \"B+\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < 4.7 {\n            letterGrades[i] = \"B+\"\
    \n            continue\n        }\n        if gradesSorted[i] < 5.0 {\n      \
    \      letterGrades[i] = \"A-\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 5.3 {\n            letterGrades[i] = \"A+\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < 5.7 {\n            letterGrades[i] = \"A+\"\
    \n            continue\n        }\n        if gradesSorted[i] < 6.0 {\n      \
    \      letterGrades[i] = \"A+\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 6.3 {\n            letterGrades[i] = \"A+\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < 6.7 {\n            letterGrades[i] = \"A+\"\
    \n            continue\n        }\n        if gradesSorted[i] < 7.0 {\n      \
    \      letterGrades[i] = \"A+\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 7.3 {\n            letterGrades[i] = \"A+\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < 7.7 {\n            letterGrades[i] = \"A+\"\
    \n            continue\n        }\n        if gradesSorted[i] < 8.0 {\n      \
    \      letterGrades[i] = \"A+\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 8.3 {\n            letterGrades[i] = \"A+\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < 8.7 {\n            letterGrades[i] = \"A+\"\
    \n            continue\n        }\n        if gradesSorted[i] < 9.0 {\n      \
    \      letterGrades[i] = \"A+\"\n            continue\n        }\n        if gradesSorted[i]\
    \ < 9.3 {\n            letterGrades[i] = \"A+\"\n            continue\n      \
    \  }\n        if gradesSorted[i] < ", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    letterGrades\
    \ := make([]string, len(grades))\n    for i := 0; i < len(grades); i++ {\n   \
    \     if gradesSorted[i] < 3.0 {\n            letterGrades[i] = \"E\"\n      \
    \  } else if gradesSorted[i] < 3.3 {\n            letterGrades[i] = \"D-\"\n \
    \       } else if gradesSorted[i] < 3.7 {\n            letterGrades[i] = \"C+\"\
    \n        } else if gradesSorted[i] < 4.0 {\n            letterGrades[i] = \"\
    B-\"\n        } else if gradesSorted[i] < 4.3 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if gradesSorted[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if gradesSorted[i] < 5.0 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 5.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if gradesSorted[i] < 6.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 6.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 6.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 7.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] < 7.3 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if gradesSorted[i] < 7.7 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if gradesSorted[i] < 8.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] < 8.3 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] < 8.7 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] < 9.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if gradesSorted[i] < 9.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if gradesSorted[i] < 9.7 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if gradesSorted[i] < 10.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if gradesSorted", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    var\
    \ letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ >= 4.0 {\n            letterGrades = append(letterGrades, \"A+\")\n        }\
    \ else if grade >= 3.7 {\n            letterGrades = append(letterGrades, \"A\"\
    )\n        } else if grade >= 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade >= 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade >= 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade >= 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade >= 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade >= 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade >= 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    var grades_string\
    \ []string\n    for _, grade := range grades {\n        if grade > 3.0 {\n   \
    \         grades_string = append(grades_string, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            grades_string = append(grades_string, \"B\")\n        }\
    \ else if grade > 2.3 {\n            grades_string = append(grades_string, \"\
    B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"E\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"A\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ grade", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // Loop through the grades and find the letter grade\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = ", "    var letterGrades []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.3 {\n            letterGrades\
    \ = append(letterGrades, \"C\")\n        } else if grade > 1.3 && grade < 1.7\
    \ {\n            letterGrades = append(letterGrades, \"C-\")\n        } else if\
    \ grade > 1.0 {\n            letterGrades = append(letterGrades, \"D+\")\n   \
    \     } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    letterGrades := []string{}\n    for _,\
    \ grade := range gradesSorted {\n        if grade > 4.0 {\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        } else if grade > 3.7 {\n          \
    \  letterGrades = append(letterGrades, \"A\")\n        } else if grade > 3.3 {\n\
    \            letterGrades = append(letterGrades, \"A-\")\n        } else if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[0]+gradesSorted[1]+gradesSorted[2]+gradesSorted[3]+gradesSorted[4]+gradesSorted[5]+gradesSorted[6]+gradesSorted[7]+gradesSorted[8]+gradesSorted[9]+gradesSorted[10]+gradesSorted[11]+gradesSorted[12]+gradesSorted[13]+gradesSorted[14]+gradesSorted[15]+gradesSorted[16]+gradesSorted[17]+gradesSorted[18]+gradesSorted[19]+gradesSorted[20]+gradesSorted[21]+gradesSorted[22]+gradesSorted[23]+gradesSorted[24]+gradesSorted[25]+gradesSorted[26]+gradesSorted[27]+gradesSorted[28]+gradesSorted[29]+gradesSorted[30]+gradesSorted[31]\n\
    \    gradesSorted[0] = gradesSorted[0]+gradesSorted[1]+gradesSorted[2]+gradesSorted[3]+gradesSorted[4]+gradesSorted[5]+gradesSorted[6]+gradesSorted[7]+gradesSorted[8]+gradesSorted[9]+gradesSorted[10]+gradesSorted[11]+gradesSorted[12]+gradesSorted[13]+gradesSorted[14]+gradesSorted[15]+gradesSorted[16]+gradesSorted[17]+gradesSorted[18]+gradesSorted[19]+gradesSorted[20]+gradesSorted[21]+gradesSorted[22]+gradesSorted[23]+gradesSorted[24]+gradesSorted[25]+gradesSorted[26]+gradesSorted[27]+gradesSorted[28]+gradesSorted[29]+gradesSorted[30]+gradesSorted[31]\n\
    \    gradesSorted[0] = gradesSorted[0]+gradesSorted[1]+gradesSorted[2]+gradesSorted[3]+gradesSorted[4]+gradesSorted[5]+gradesSorted[6]+gradesSorted[7]+gradesSorted[8]+gradesSorted[9]+gradesSorted[10]+gradesSorted[11]+gradesSorted[12]+gradesSorted[13]+gradesSorted[14]+gradesSorted[15",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ grade", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSor", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    letterGrades := make([]string, len(gradesSorted))\n    for i := 0; i < len(gradesSorted);\
    \ i++ {\n        if gradesSorted[i] < 3.0 {\n            letterGrades[i] = \"\
    E\"\n        } else if gradesSorted[i] < 3.3 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else if gradesSorted[i] < 3.7 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if gradesSorted[i] < 4.0 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if gradesSorted[i] < 4.3 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if gradesSorted[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if gradesSorted[i] < 5.0 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 5.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if gradesSorted[i] < 6.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 6.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 6.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if gradesSorted[i] < 7.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 7.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 7.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if gradesSorted[i] < 8.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 8.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 8.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if gradesSorted[i] < 9.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if gradesSorted[i] < 9.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] < 9.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if gradesSorted[i] < 10.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if ", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >=\
    \ 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\
    \n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n        \
    \    letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else\
    \ {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    var result []string\n    for _, grade := range grades {\n        if\
    \ grade > 4.0 {\n            result = append(result, \"A+\")\n        } else if\
    \ grade > 3.7 {\n            result = append(result, \"A\")\n        } else if\
    \ grade > 3.3 {\n            result = append(result, \"A-\")\n        } else if\
    \ grade > 3.0 {\n            result = append(result, \"B+\")\n        } else if\
    \ grade > 2.7 {\n            result = append(result, \"B\")\n        } else if\
    \ grade > 2.3 {\n            result = append(result, \"B-\")\n        } else if\
    \ grade > 2.0 {\n            result = append(result, \"C+\")\n        } else if\
    \ grade > 1.7 {\n            result = append(result, \"C\")\n        } else if\
    \ grade > 1.3 {\n            result = append(result, \"C-\")\n        } else if\
    \ grade > 1.0 {\n            result = append(result, \"D+\")\n        } else if\
    \ grade > 0.7 {\n            result = append(result, \"D\")\n        } else if\
    \ grade > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n\
    \            result = append(result, \"E\")\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    result := make([]string, len(grades))\n    for\
    \ i := range grades {\n        if grades[i] >= 4.0 {\n            result[i] =\
    \ \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n          \
    \  result[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n\
    \            result[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.3 {\n            result[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ && grades[i] < 3.0 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 && grades[i] < 2.7 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] < 2.3 {\n            result[i] = \"C+\"\n \
    \       } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            result[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   result[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3\
    \ {\n            result[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            result[i] = \"D\"\n        } else if grades[i] >= 0.0 &&\
    \ grades[i] < 0.7 {\n            result[i] = \"D-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    return result\n}\n", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i := 1; i < gradesLen;\
    \ i++ {\n        if grades[i-1] > grades[i] {\n            letterGrades[i] = \"\
    A+\"\n        } else if grades[i-1] < grades[i] {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i-1] == grades[i] {\n            letterGrades[i]\
    \ = \"A\"\n        } else {\n            letterGrades[i] = \"B+\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    // Your code here\n    grades := make([]float64,\
    \ len(grades))\n    grades[0] = 4.0\n    grades[1] = 3.7\n    grades[2] = 3.3\n\
    \    grades[3] = 3.0\n    grades[4] = 2.7\n    grades[5] = 2.3\n    grades[6]\
    \ = 2.0\n    grades[7] = 1.7\n    grades[8] = 1.3\n    grades[9] = 1.0\n    grades[10]\
    \ = 0.7\n    grades[11] = 0.0\n    grades[12] = 0.0\n    grades[13] = 0.0\n  \
    \  grades[14] = 0.0\n    grades[15] = 0.0\n    grades[16] = 0.0\n    grades[17]\
    \ = 0.0\n    grades[18] = 0.0\n    grades[19] = 0.0\n    grades[20] = 0.0\n  \
    \  grades[21] = 0.0\n    grades[22] = 0.0\n    grades[23] = 0.0\n    grades[24]\
    \ = 0.0\n    grades[25] = 0.0\n    grades[26] = 0.0\n    grades[27] = 0.0\n  \
    \  grades[28] = 0.0\n    grades[29] = 0.0\n    grades[30] = 0.0\n    grades[31]\
    \ = 0.0\n    grades[32] = 0.0\n    grades[33] = 0.0\n    grades[34] = 0.0\n  \
    \  grades[35] = 0.0\n    grades[36] = 0.0\n    grades[37] = 0.0\n    grades[38]\
    \ = 0.0\n    grades[39] = 0.0\n    grades[40] = 0.0\n    grades[41] = 0.0\n  \
    \  grades[42] = 0.0\n    grades[43] = 0.0\n    grades[44] = 0.0\n    grades[45]\
    \ = 0.0\n    grades[46] = 0.0\n    grades[47] = 0.0\n    grades[48] = 0.0\n  \
    \  grades[49] = 0.0\n    grades[50] = 0.0\n    grades[51] = 0.0\n    grades[52]\
    \ = 0.0\n    grades[53] = 0.0\n    grades[54] = 0.0\n    grades[55] = 0.0\n  \
    \  grades[56] = 0.0\n    grades[57] = 0.0\n    grades[58] = 0.0\n    grades[59]\
    \ = 0.0\n    grades[60] = 0.0\n    grades[61] = 0.0\n    grades[62] = 0.0\n  \
    \  grades[63] = 0.0\n    grades[64] = 0.0\n    grades[65] = 0.0\n    grades[66]\
    \ = 0.0\n    grades[67] = 0.0\n    grades[68] = 0.0\n    grades[69] = 0.0\n  \
    \  grades[70] = 0.0\n", "    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\
    \n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\
    \n        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    var grades_string []string\n    for _, grade\
    \ := range grades {\n        if grade > 4.0 {\n            grades_string = append(grades_string,\
    \ \"A+\")\n        } else if grade > 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    var gradesSorted\
    \ []float64\n    for _, grade := range grades {\n        gradesSorted = append(gradesSorted,\
    \ grade)\n    }\n    sort.Float64s(gradesSorted)\n    var gradesStrings []string\n\
    \    for _, grade := range gradesSorted {\n        if grade > 3.0 {\n        \
    \    gradesStrings = append(gradesStrings, \"B+\")\n        } else if grade >\
    \ 2.7 {\n            gradesStrings = append(gradesStrings, \"B\")\n        } else\
    \ if grade > 2.3 {\n            gradesStrings = append(gradesStrings, \"B-\")\n\
    \        } else if grade > 2.0 {\n            gradesStrings = append(gradesStrings,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            gradesStrings = append(gradesStrings,\
    \ \"C\")\n        } else if grade > 1.3 {\n            gradesStrings = append(gradesStrings,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            gradesStrings = append(gradesStrings,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            gradesStrings = append(gradesStrings,\
    \ \"D\")\n        } else if grade > 0.0 {\n            gradesStrings = append(gradesStrings,\
    \ \"D-\")\n        } else {\n            gradesStrings = append(gradesStrings,\
    \ \"E\")\n        }\n    }\n    return gradesStrings\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    grade", "    // Write your code here\n    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    // Write your code here\n    result := make([]string,\
    \ len(grades))\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i]\
    \ >= 4.0 {\n            result[i] = \"A+\"\n        } else if grades[i] >= 3.7\
    \ {\n            result[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n   \
    \         result[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n         \
    \   result[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            result[i] = \"B-\"\
    \n        } else if grades[i] >= 2.0 {\n            result[i] = \"C+\"\n     \
    \   } else if grades[i] >= 1.7 {\n            result[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            result[i] = \"D+\"\n        } else if grades[i] >= 0.7\
    \ {\n            result[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n   \
    \         result[i] = \"D-\"\n        } else {\n            result[i] = \"E\"\n\
    \        }\n    }\n    return result\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    // Your\
    \ code here\n    grades := make([]float64, len(grades))\n    grades[0] = 4.0\n\
    \    grades[1] = 4.7\n    grades[2] = 4.3\n    grades[3] = 4.0\n    grades[4]\
    \ = 4.7\n    grades[5] = 4.3\n    grades[6] = 4.0\n    grades[7] = 4.7\n    grades[8]\
    \ = 4.3\n    grades[9] = 4.0\n    grades[10] = 4.7\n    grades[11] = 4.3\n   \
    \ grades[12] = 4.0\n    grades[13] = 4.7\n    grades[14] = 4.3\n    grades[15]\
    \ = 4.0\n    grades[16] = 4.7\n    grades[17] = 4.3\n    grades[18] = 4.0\n  \
    \  grades[19] = 4.7\n    grades[20] = 4.3\n    grades[21] = 4.0\n    grades[22]\
    \ = 4.7\n    grades[23] = 4.3\n    grades[24] = 4.0\n    grades[25] = 4.7\n  \
    \  grades[26] = 4.3\n    grades[27] = 4.0\n    grades[28] = 4.7\n    grades[29]\
    \ = 4.3\n    grades[30] = 4.0\n    grades[31] = 4.7\n    grades[32] = 4.3\n  \
    \  grades[33] = 4.0\n    grades[34] = 4.7\n    grades[35] = 4.3\n    grades[36]\
    \ = 4.0\n    grades[37] = 4.7\n    grades[38] = 4.3\n    grades[39] = 4.0\n  \
    \  grades[40] = 4.7\n    grades[41] = 4.3\n    grades[42] = 4.0\n    grades[43]\
    \ = 4.7\n    grades[44] = 4.3\n    grades[45] = 4.0\n    grades[46] = 4.7\n  \
    \  grades[47] = 4.3\n    grades[48] = 4.0\n    grades[49] = 4.7\n    grades[50]\
    \ = 4.3\n    grades[51] = 4.0\n    grades[52] = 4.7\n    grades[53] = 4.3\n  \
    \  grades[54] = 4.0\n    grades[55] = 4.7\n    grades[56] = 4.3\n    grades[57]\
    \ = 4.0\n    grades[58] = 4.7\n    grades[59] = 4.3\n    grades[60] = 4.0\n  \
    \  grades[61] = 4.7\n    grades[62] = 4.3\n    grades[63] = 4.0\n    grades[64]\
    \ = 4.7\n    grade", "    var gradesSorted []float64\n    for _, grade := range\
    \ grades {\n        gradesSorted = append(gradesSorted, grade)\n    }\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = gradesSorted[:len(gradesSorted)-1]\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSor", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    result := make([]string, len(grades))\n    for i := range grades {\n      \
    \  if grades[i] < 3.0 {\n            result[i] = \"E\"\n        } else if grades[i]\
    \ >= 3.0 && grades[i] < 3.7 {\n            result[i] = \"D-\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            result[i] = \"D+\"\n \
    \       } else if grades[i] >= 4.0 && grades[i] < 4.7 {\n            result[i]\
    \ = \"C-\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n        \
    \    result[i] = \"C+\"\n        } else if grades[i] >= 5.0 && grades[i] < 5.7\
    \ {\n            result[i] = \"B-\"\n        } else if grades[i] >= 5.7 && grades[i]\
    \ < 6.0 {\n            result[i] = \"B+\"\n        } else if grades[i] >= 6.0\
    \ && grades[i] < 6.7 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 6.7 && grades[i] < 7.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 7.0 && grades[i] < 7.7 {\n            result[i] = \"A\"\n  \
    \      } else if grades[i] >= 7.7 && grades[i] < 8.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grades[i] >= 8.0 && grades[i] < 8.7 {\n        \
    \    result[i] = \"A\"\n        } else if grades[i] >= 8.7 && grades[i] < 9.0\
    \ {\n            result[i] = \"A+\"\n        } else if grades[i] >= 9.0 && grades[i]\
    \ < 9.7 {\n            result[i] = \"A\"\n        } else if grades[i] >= 9.7 &&\
    \ grades[i] < 10.0 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ >= 10.0 && grades[i] < 10.7 {\n            result[i] = \"A\"\n        } else\
    \ if grades[i] >= 10.7 && grades[i] < 11.0 {\n            result[i] = \"A+\"\n\
    \        } else if grades[i] >= 11.0 && grades[i] < 11.7 {\n            result[i]\
    \ = \"A\"\n        } else if grades[i] >= 11.7 && grades[i] < 12.0 {\n       \
    \     result[i] = \"A+\"\n        } else if grades[i] >= 12.0 && grades[i] < 12.7\
    \ {\n            result[i] = \"A\"\n        } else if grades[i] >= 12.7 && grades[i]\
    \ < 13.0 {\n            result[i] = \"A+\"\n        } else if grades[i] >= 13.0\
    \ && grades[i] < 13.7 {\n            result[i] = \"A\"\n        } else if grades[i]\
    \ >= 13.7 && grades[i] < 14.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 14.0 && grades[i] < 14.7 {\n            result[i] = \"A", " \
    \   gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n \
    \           letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 && grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    var grades_string []string\n    var gpas []float64\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter string\n    var letter string\n    var letter string\n    var letter\
    \ string\n    var letter string\n    var letter string\n    var letter string\n\
    \    var letter string\n    var letter string\n    var letter string\n    var\
    \ letter ", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades", "    // Your code here\n    result := []string{}\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = \"B+\"\n        } else if grade > 2.7 {\n            grade = \"B\"\n     \
    \   } else if grade > 2.3 {\n            grade = \"B-\"\n        } else if grade\
    \ > 2.0 {\n            grade = \"C+\"\n        } else if grade > 1.7 {\n     \
    \       grade = \"C\"\n        } else if grade > 1.3 {\n            grade = \"\
    C-\"\n        } else if grade > 1.0 {\n            grade = \"D+\"\n        } else\
    \ if grade > 0.7 {\n            grade = \"D\"\n        } else if grade > 0.0 {\n\
    \            grade = \"D-\"\n        } else {\n            grade = \"E\"\n   \
    \     }\n        result = append(result, grade)\n    }\n    return result\n}\n",
  "    // Write your code here\n    \n    return []string{\"A+\", \"A\", \"A-\", \"\
    B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n}\n",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 && grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 4.0 {\n            grades_string = append(grades_string, \"A+\")\n \
    \       } else if grade > 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades := append([]float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, grades...)\n    grade", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 1.0)\n    gradesSorted = append(gradesSorted, 2.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 5.0)\n    gradesSorted = append(gradesSorted, 6.0)\n    gradesSorted = append(gradesSorted,\
    \ 7.0)\n    gradesSorted = append(gradesSorted, 8.0)\n    gradesSorted = append(gradesSorted,\
    \ 9.0)\n    gradesSorted = append(gradesSorted, 10.0)\n    gradesSorted = append(gradesSorted,\
    \ 11.0)\n    gradesSorted = append(gradesSorted, 12.0)\n    gradesSorted = append(gradesSorted,\
    \ 13.0)\n    gradesSorted = append(gradesSorted, 14.0)\n    gradesSorted = append(gradesSorted,\
    \ 15.0)\n    gradesSorted = append(gradesSorted, 16.0)\n    gradesSorted = append(gradesSorted,\
    \ 17.0)\n    gradesSorted = append(gradesSorted, 18.0)\n    gradesSorted = append(gradesSorted,\
    \ 19.0)\n    gradesSorted = append(gradesSorted, 20.0)\n    gradesSorted = append(gradesSorted,\
    \ 21.0)\n    gradesSorted = append(gradesSorted, 22.0)\n    gradesSorted = append(gradesSorted,\
    \ 23.0)\n    gradesSorted = append(gradesSorted, 24.0)\n    gradesSorted = append(gradesSorted,\
    \ 25.0)\n    gradesSorted = append(gradesSorted, 26.0)\n    gradesSorted = append(gradesSorted,\
    \ 27.0)\n    gradesSorted = append(gradesSorted, 28.0)\n    gradesSorted = append(gradesSorted,\
    \ 29.0)\n    gradesSorted = append(gradesSorted, 30.0)\n    gradesSorted = append(gradesSorted,\
    \ 31.0)\n    gradesSorted = append(gradesSorted, 32.0)\n    gradesSorted = append(gradesSorted,\
    \ 33.0)\n    gradesSorted = append(gradesSorted, 34.0)\n    gradesSorted = append(gradesSorted,\
    \ 35.0)\n    gradesSorted = append(gradesSorted, 36.0)", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = ", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    var grades2 []float64\n    var grades3 []float64\n    var grades4 []float64\n\
    \    var grades5 []float64\n    var grades6 []float64\n    var grades7 []float64\n\
    \    var grades8 []float64\n    var grades9 []float64\n    var grades10 []float64\n\
    \    var grades11 []float64\n    var grades12 []float64\n    var grades13 []float64\n\
    \    var grades14 []float64\n    var grades15 []float64\n    var grades16 []float64\n\
    \    var grades17 []float64\n    var grades18 []float64\n    var grades19 []float64\n\
    \    var grades20 []float64\n    var grades21 []float64\n    var grades22 []float64\n\
    \    var grades23 []float64\n    var grades24 []float64\n    var grades25 []float64\n\
    \    var grades26 []float64\n    var grades27 []float64\n    var grades28 []float64\n\
    \    var grades29 []float64\n    var grades30 []float64\n    var grades31 []float64\n\
    \    var grades32 []float64\n    var grades33 []float64\n    var grades34 []float64\n\
    \    var grades35 []float64\n    var grades36 []float64\n    var grades37 []float64\n\
    \    var grades38 []float64\n    var grades39 []float64\n    var grades40 []float64\n\
    \    var grades41 []float64\n    var grades42 []float64\n    var grades43 []float64\n\
    \    var grades44 []float64\n    var grades45 []float64\n    var grades46 []float64\n\
    \    var grades47 []float64\n    var grades48 []float64\n    var grades49 []float64\n\
    \    var grades50 []float64\n    var grades51 []float64\n    var grades52 []float64\n\
    \    var grades53 []float64\n    var grades54 []float64\n    var grades55 []float64\n\
    \    var grades56 []float64\n    var grades57 []float64\n    var grades58 []float64\n\
    \    var grades59 []float64\n    var grades60 []float64\n    var grades61 []float64\n\
    \    var grades62 []float64\n    var grades63 []float64\n    var grades64 []float64\n\
    \    var grades65 []float64\n    var grades66 []float64\n    var grades67 []float64\n\
    \    var grades68 []float64\n    var grades69 []float64\n    var grades70 []float64\n\
    \    var ", "    var letterGrades []string\n    for _, grade := range grades {\n\
    \        if grade >= 4.0 {\n            letterGrades = append(letterGrades, \"\
    A+\")\n        } else if grade > 3.7 {\n            letterGrades = append(letterGrades,\
    \ \"A\")\n        } else if grade > 3.3 {\n            letterGrades = append(letterGrades,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    var result []string\n\
    \    for _, grade := range grades {\n        if grade > 4.0 {\n            result\
    \ = append(result, \"A+\")\n        } else if grade > 3.7 {\n            result\
    \ = append(result, \"A\")\n        } else if grade > 3.3 {\n            result\
    \ = append(result, \"A-\")\n        } else if grade > 3.0 {\n            result\
    \ = append(result, \"B+\")\n        } else if grade > 2.7 {\n            result\
    \ = append(result, \"B\")\n        } else if grade > 2.3 {\n            result\
    \ = append(result, \"B-\")\n        } else if grade > 2.0 {\n            result\
    \ = append(result, \"C+\")\n        } else if grade > 1.7 {\n            result\
    \ = append(result, \"C\")\n        } else if grade > 1.3 {\n            result\
    \ = append(result, \"C-\")\n        } else if grade > 1.0 {\n            result\
    \ = append(result, \"D+\")\n        } else if grade > 0.7 {\n            result\
    \ = append(result, \"D\")\n        } else if grade > 0.0 {\n            result\
    \ = append(result, \"D-\")\n        } else {\n            result = append(result,\
    \ \"E\")\n        }\n    }\n    return result\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[gradesSorted[len(gradesSorted)-1]] = 0.0\n    gradesSorted[0]\
    \ += 4.0\n    gradesSorted[1] += 3.7\n    gradesSorted[2] += 3.3\n    gradesSorted[3]\
    \ += 3.0\n    gradesSorted[4] += 2.7\n    gradesSorted[5] += 2.3\n    gradesSorted[6]\
    \ += 2.0\n    gradesSorted[7] += 1.7\n    gradesSorted[8] += 1.3\n    gradesSorted[9]\
    \ += 1.0\n    gradesSorted[10] += 0.7\n    gradesSorted[11] += 0.0\n    gradesSorted[12]\
    \ = 0.0\n    gradesSorted[13] = 0.0\n    gradesSorted[14] = 0.0\n    gradesSorted[15]\
    \ = 0.0\n    gradesSorted[16] = 0.0\n    gradesSorted[17] = 0.0\n    gradesSorted[18]\
    \ = 0.0\n    gradesSorted[19] = 0.0\n    gradesSorted[20] = 0.0\n    gradesSorted[21]\
    \ = 0.0\n    gradesSorted[22] = 0.0\n    gradesSorted[23] = 0.0\n    gradesSorted[24]\
    \ = 0.0\n    gradesSorted[25] = 0.0\n    gradesSorted[26] = 0.0\n    gradesSorted[27]\
    \ = 0.0\n    gradesSorted[28] = 0.0\n    gradesSorted[29] = 0.0\n    gradesSorted[30]\
    \ = 0.0\n    gradesSorted[31] = 0.0\n    gradesSorted[32] = 0.0\n    gradesSorted[33]\
    \ = 0.0\n    gradesSorted[34] = 0.0\n    gradesSorted[35] = 0.0\n    gradesSorted[36]\
    \ = 0.0\n    gradesSorted[37] = 0.0\n    gradesSorted[38] = 0.0\n    gradesSorted[39]\
    \ = 0.0\n    gradesSorted[40] = 0.0\n    gradesSorted[41] = 0.0\n    gradesSorted[42]\
    \ = 0.0\n    gradesSorted[43] = 0.0\n    gradesSorted[44] = 0.0\n    gradesSorted[45]\
    \ = 0.0\n    gradesSorted[46] = 0.0\n    gradesSorted[47] = 0.0\n    gradesSorted[48]\
    \ = 0.0\n    gradesSorted[49] = 0.0\n    gradesSorted[50] = 0.0\n    gradesSorted[51]\
    \ = 0.0\n    gradesSorted[52] = ", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    var letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.3 {\n            letterGrades\
    \ = append(letterGrades, \"C+\")\n        } else if grade > 1.3 && grade < 1.7\
    \ {\n            letterGrades = append(letterGrades, \"C\")\n        } else if\
    \ grade > 1.0 {\n            letterGrades = append(letterGrades, \"C-\")\n   \
    \     } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    letterGrades := make([]string, len(grades))\n    for i := 0; i < len(grades);\
    \ i++ {\n        if gradesSorted[i] < 4.0 {\n            letterGrades[i] = \"\
    A+\"\n        } else if gradesSorted[i] > 3.7 {\n            letterGrades[i] =\
    \ \"A\"\n        } else if gradesSorted[i] > 3.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] > 3.0 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if gradesSorted[i] > 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if gradesSorted[i] > 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if gradesSorted[i] > 2.0 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if gradesSorted[i] > 1.7 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] > 1.3 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if gradesSorted[i] > 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if gradesSorted[i] > 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if gradesSorted[i] > 0.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ <= 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] <= 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letterGrades[i] = \"\
    B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] <= 2.7 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ <= 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 2.0 {\n            letterGrades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] <= 1.3 {\n       \
    \     letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ <= 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    var letterGrades\
    \ []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n  \
    \          letterGrades = append(letterGrades, \"A+\")\n        } else if grade\
    \ > 3.7 {\n            letterGrades = append(letterGrades, \"A\")\n        } else\
    \ if grade > 3.3 {\n            letterGrades = append(letterGrades, \"A-\")\n\
    \        } else if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\
    \n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n        \
    \    letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSor",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(", "    gradesSorted := make([]float64, len(grades))\n \
    \   copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-2])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-3])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-4])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-5])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-6])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-7])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-8])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-9])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-10])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-11])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-12])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-13])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-14])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-15])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-16])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-17])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-18])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-19])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-20])\n\
    \    gradesSorted := append(grade", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    grades := append([]float64{4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0}, grades...)\n    grades = append([]float64{0.0,\
    \ 0.7}, grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades\
    \ = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted ", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{0.0}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    gradesSorted\
    \ = append(gradesSorted, []float64{0.0}...)\n    gradesSorted = append(gradesSorted,\
    \ []float64{0.0}...)\n    gradesSorted = append(gradesSorted, []float64{0.0}...)\n\
    \    gradesSorted = append(gradesSorted, []float64{0.0}...)\n    grade", "   \
    \ gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSortedLen := len(gradesSorted)\n \
    \   letterGrades := make([]string, gradesSortedLen)\n    for i := 0; i < gradesSortedLen;\
    \ i++ {\n        if gradesSorted[i] > 4.0 {\n            letterGrades[i] = \"\
    A+\"\n        } else if gradesSorted[i] > 3.7 {\n            letterGrades[i] =\
    \ \"A\"\n        } else if gradesSorted[i] > 3.3 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if gradesSorted[i] > 3.0 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if gradesSorted[i] > 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if gradesSorted[i] > 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if gradesSorted[i] > 2.0 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if gradesSorted[i] > 1.7 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if gradesSorted[i] > 1.3 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if gradesSorted[i] > 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if gradesSorted[i] > 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if gradesSorted[i] > 0.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    result := make([]string, len(grades))\n\
    \    for i := range grades {\n        if grades[i] < 4.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grades[i] >= 4.0 && grades[i] < 3.7 {\n        \
    \    result[i] = \"A\"\n        } else if grades[i] >= 3.7 && grades[i] < 3.3\
    \ {\n            result[i] = \"A-\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.0 {\n            result[i] = \"B+\"\n        } else if grades[i] >= 3.0\
    \ && grades[i] < 2.7 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.7 && grades[i] < 2.3 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.3 && grades[i] < 2.0 {\n            result[i] = \"C+\"\n \
    \       } else if grades[i] >= 2.0 && grades[i] < 1.7 {\n            result[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.7 && grades[i] < 1.3 {\n         \
    \   result[i] = \"C-\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.0\
    \ {\n            result[i] = \"D+\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 0.7 {\n            result[i] = \"D\"\n        } else if grades[i] >= 0.7 &&\
    \ grades[i] < 0.0 {\n            result[i] = \"D-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    return result\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade >= 4.0 {\n            grades_string = append(grades_string, \"A+\")\n\
    \        } else if grade > 3.7 && grade < 4.0 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 && grade < 3.7 {\n            grades_string\
    \ = append(grades_string, \"A-\")\n        } else if grade > 3.0 && grade < 3.3\
    \ {\n            grades_string = append(grades_string, \"B+\")\n        } else\
    \ if grade > 2.7 && grade < 3.0 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 && grade < 2.7 {\n            grades_string\
    \ = append(grades_string, \"B-\")\n        } else if grade > 2.0 && grade < 2.3\
    \ {\n            grades_string = append(grades_string, \"C+\")\n        } else\
    \ if grade > 1.7 && grade < 2.0 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 && grade < 1.7 {\n            grades_string\
    \ = append(grades_string, \"C-\")\n        } else if grade > 1.0 && grade < 1.3\
    \ {\n            grades_string = append(grades_string, \"D+\")\n        } else\
    \ if grade > 0.7 && grade < 1.0 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 && grade < 0.7 {\n            grades_string\
    \ = append(grades_string, \"D-\")\n        } else {\n            grades_string\
    \ = append(grades_string, \"E\")\n        }\n    }\n    return grades_string\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[2]\
    \ = \"D\"\n    letterGrades[3] = \"C+\"\n    letterGrades[4] = \"C\"\n    letterGrades[5]\
    \ = \"B+\"\n    letterGrades[6] = \"B\"\n    letterGrades[7] = \"A-\"\n    letterGrades[8]\
    \ = \"A\"\n    letterGrades[9] = \"A+\"\n    letterGrades[10] = \"A-\"\n    letterGrades[11]\
    \ = \"A\"\n    letterGrades[12] = \"B+\"\n    letterGrades[13] = \"B\"\n    letterGrades[14]\
    \ = \"B-\"\n    letterGrades[15] = \"B\"\n    letterGrades[16] = \"C+\"\n    letterGrades[17]\
    \ = \"C\"\n    letterGrades[18] = \"C-\"\n    letterGrades[19] = \"C\"\n    letterGrades[20]\
    \ = \"D+\"\n    letterGrades[21] = \"D\"\n    letterGrades[22] = \"D-\"\n    letterGrades[23]\
    \ = \"D\"\n    letterGrades[24] = \"E\"\n    letterGrades[25] = \"F\"\n    letterGrades[26]\
    \ = \"F+\"\n    letterGrades[27] = \"F-\"\n    letterGrades[28] = \"F\"\n    letterGrades[29]\
    \ = \"G+\"\n    letterGrades[30] = \"G\"\n    letterGrades[31] = \"G-\"\n    letterGrades[32]\
    \ = \"G\"\n    letterGrades[33] = \"A+\"\n    letterGrades[34] = \"A\"\n    letterGrades[35]\
    \ = \"A-\"\n    letterGrades[36] = \"A\"\n    letterGrades[37] = \"B+\"\n    letterGrades[38]\
    \ = \"B\"\n    letterGrades[39] = \"B-\"\n    letterGrades[40] = \"B\"\n    letterGrades[41]\
    \ = \"C+\"\n    letterGrades[42] = \"C\"\n    letterGrades[43] = \"C-\"\n    letterGrades[44]\
    \ = \"C\"\n    letterGrades[45] = \"D+\"\n    letterGrades[46] = \"D\"\n    letterGrades[47]\
    \ = \"D-\"\n    letterGrades[48] = \"D", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    var gradesList\
    \ []string\n    for _, grade := range grades {\n        if grade > 4.0 {\n   \
    \         gradesList = append(gradesList, \"A+\")\n        } else if grade > 3.7\
    \ {\n            gradesList = append(gradesList, \"A\")\n        } else if grade\
    \ > 3.3 {\n            gradesList = append(gradesList, \"A-\")\n        } else\
    \ if grade > 3.0 {\n            gradesList = append(gradesList, \"B+\")\n    \
    \    } else if grade > 2.7 {\n            gradesList = append(gradesList, \"B\"\
    )\n        } else if grade > 2.3 {\n            gradesList = append(gradesList,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            gradesList = append(gradesList,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            gradesList = append(gradesList,\
    \ \"C\")\n        } else if grade > 1.3 {\n            gradesList = append(gradesList,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            gradesList = append(gradesList,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            gradesList = append(gradesList,\
    \ \"D\")\n        } else if grade > 0.0 {\n            gradesList = append(gradesList,\
    \ \"D-\")\n        } else {\n            gradesList = append(gradesList, \"E\"\
    )\n        }\n    }\n    return gradesList\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"E\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"A\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    // Write your code here\n    \n    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    \n    letterGrades := make([]string, len(grades))\n\
    \    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 4.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n \
    \           letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n \
    \           letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n \
    \           letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n  \
    \          letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n  \
    \          letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n   \
    \         letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n   \
    \         letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n   \
    \         letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n    \
    \        letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    \n    return letterGrades\n}\n", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        if grades[i] < 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 4.0 && grades[i] < 3.7 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.0 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 2.7 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.0 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 1.3 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.0 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.7 && grades[i] < 0.0 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    var letterGrades\
    \ []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n  \
    \          letterGrades = append(letterGrades, \"A+\")\n        } else if grade\
    \ >= 3.7 && grade < 4.0 {\n            letterGrades = append(letterGrades, \"\
    A\")\n        } else if grade >= 3.3 && grade < 3.7 {\n            letterGrades\
    \ = append(letterGrades, \"A-\")\n        } else if grade >= 3.0 && grade < 3.3\
    \ {\n            letterGrades = append(letterGrades, \"B+\")\n        } else if\
    \ grade >= 2.7 && grade < 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 && grade < 2.7 {\n            letterGrades\
    \ = append(letterGrades, \"B-\")\n        } else if grade >= 2.0 && grade < 2.3\
    \ {\n            letterGrades = append(letterGrades, \"C+\")\n        } else if\
    \ grade >= 1.7 && grade < 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 && grade < 1.7 {\n            letterGrades\
    \ = append(letterGrades, \"C-\")\n        } else if grade >= 1.0 && grade < 1.3\
    \ {\n            letterGrades = append(letterGrades, \"D+\")\n        } else if\
    \ grade >= 0.7 && grade < 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[0])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n    gradesSorted :=\
    \ append(gradesSorted, gradesSorted[0])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[0])\n    gradesSorted := append(gradesSorted, gradesSorted[len(grade",
  "    result := make([]string, len(grades))\n    for i := 0; i < len(grades); i++\
    \ {\n        if grades[i] >= 4.0 {\n            result[i] = \"A+\"\n        }\
    \ else if grades[i] >= 3.7 {\n            result[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 3.0 {\n            result[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            result[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         result[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n         \
    \   result[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n            result[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 {\n            result[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 {\n            result[i] = \"D+\"\n     \
    \   } else if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 {\n            result[i] = \"D-\"\n        } else {\n  \
    \          result[i] = \"E\"\n        }\n    }\n    return result\n}\n", "   \
    \ var grades_string []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n       \
    \ } else if grade > 2.7 {\n            grades_string = append(grades_string, \"\
    B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-2])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-3])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-4])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-5])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-6])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-7])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-8])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-9])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-10])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-11])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-12])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-13])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-14])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-15])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-16])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-17])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-18])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-19])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-20])\n\
    \    gradesSorted := append(grade", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] < 3.0 {\n            letterGrades[i] = \"E\"\n        } else if\
    \ grades[i] >= 3.0 && grades[i] < 4.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] >= 4.0 && grades[i] < 5.0 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 5.0 && grades[i] < 6.0 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 6.0 && grades[i]\
    \ < 7.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 7.0 && grades[i] < 8.0 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 8.0 && grades[i] < 9.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 9.0 && grades[i] < 10.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 10.0 && grades[i] < 11.0 {\n       \
    \     letterGrades[i] = \"A-\"\n        } else if grades[i] >= 11.0 {\n      \
    \      letterGrades[i] = \"A+\"\n        }\n    }\n    return letterGrades\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = ", "    result := make([]string, len(grades))\n   \
    \ for i := range grades {\n        if grades[i] < 4.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grades[i] >= 4.0 && grades[i] < 3.7 {\n        \
    \    result[i] = \"A\"\n        } else if grades[i] >= 3.7 && grades[i] < 3.3\
    \ {\n            result[i] = \"A-\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.0 {\n            result[i] = \"B+\"\n        } else if grades[i] >= 3.0\
    \ && grades[i] < 2.7 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.7 && grades[i] < 2.3 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.3 && grades[i] < 2.0 {\n            result[i] = \"C+\"\n \
    \       } else if grades[i] >= 2.0 && grades[i] < 1.7 {\n            result[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.7 && grades[i] < 1.3 {\n         \
    \   result[i] = \"C-\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.0\
    \ {\n            result[i] = \"D+\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 0.7 {\n            result[i] = \"D\"\n        } else if grades[i] >= 0.7 &&\
    \ grades[i] < 0.0 {\n            result[i] = \"D-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    return result\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i := 1; i < gradesLen;\
    \ i++ {\n        if grades[i] > 3.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] < 3.0 {\n            letterGrades[i] = \"A-\"\n \
    \       } else if grades[i] < 3.7 {\n            letterGrades[i] = \"A\"\n   \
    \     } else if grades[i] > 3.7 {\n            letterGrades[i] = \"B+\"\n    \
    \    } else if grades[i] > 3.3 {\n            letterGrades[i] = \"B\"\n      \
    \  } else if grades[i] < 3.3 {\n            letterGrades[i] = \"B-\"\n       \
    \ } else if grades[i] < 2.7 {\n            letterGrades[i] = \"C+\"\n        }\
    \ else if grades[i] > 2.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] < 2.3 {\n            letterGrades[i] = \"C-\"\n        } else if\
    \ grades[i] < 1.7 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i]\
    \ > 1.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] <\
    \ 1.3 {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] < 1.0\
    \ {\n            letterGrades[i] = \"E\"\n        } else {\n            letterGrades[i]\
    \ = \"F\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSortedLen := len(gradesSorted)\n    letterGrades := make([]string,\
    \ gradesSortedLen)\n    for i := 0; i < gradesSortedLen; i++ {\n        if gradesSorted[i]\
    \ > 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if gradesSorted[i]\
    \ > 2.7 {\n            letterGrades[i] = \"B\"\n        } else if gradesSorted[i]\
    \ > 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if gradesSorted[i]\
    \ > 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if gradesSorted[i]\
    \ > 1.7 {\n            letterGrades[i] = \"C\"\n        } else if gradesSorted[i]\
    \ > 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if gradesSorted[i]\
    \ > 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if gradesSorted[i]\
    \ > 0.7 {\n            letterGrades[i] = \"D\"\n        } else if gradesSorted[i]\
    \ > 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   // Your code here\n    grades := []float64{4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0,\
    \ 1.7, 1.3, 1.0, 0.7}\n    grades := append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)", " \
    \   var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 4.0 {\n            grades_string = append(grades_string, \"A+\")\n \
    \       } else if grade > 3.7 {\n            grades_string = append(grades_string,\
    \ \"A\")\n        } else if grade > 3.3 {\n            grades_string = append(grades_string,\
    \ \"A-\")\n        } else if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    var gradesSorted []float64\n    for _, grade := range grades {\n        gradesSorted\
    \ = append(gradesSorted, grade)\n    }\n    sort.Float64s(gradesSorted)\n    var\
    \ gradesLetterGrade []string\n    for _, grade := range gradesSorted {\n     \
    \   if grade > 3.0 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"B\")\n        } else if grade > 2.3 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"C\")\n        } else if grade > 1.3 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"D\")\n        } else if grade > 0.0 {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"D-\")\n        } else {\n            gradesLetterGrade = append(gradesLetterGrade,\
    \ \"E\")\n        }\n    }\n    return gradesLetterGrade\n}\n", "    result :=\
    \ []string{}\n    for _, grade := range grades {\n        if grade > 4.0 {\n \
    \           grade = 4.0\n        } else if grade > 3.7 {\n            grade =\
    \ 3.7\n        } else if grade > 3.3 {\n            grade = 3.3\n        } else\
    \ if grade > 3.0 {\n            grade = 3.0\n        } else if grade > 2.7 {\n\
    \            grade = 2.7\n        } else if grade > 2.3 {\n            grade =\
    \ 2.3\n        } else if grade > 2.0 {\n            grade = 2.0\n        } else\
    \ if grade > 1.7 {\n            grade = 1.7\n        } else if grade > 1.3 {\n\
    \            grade = 1.3\n        } else if grade > 1.0 {\n            grade =\
    \ 1.0\n        } else if grade > 0.7 {\n            grade = 0.7\n        } else\
    \ if grade > 0.0 {\n            grade = 0.0\n        } else {\n            grade\
    \ = 0.0\n        }\n        grade = grade * 10\n        grade = grade / 10\n \
    \       grade = grade * 100\n        grade = grade / 100\n        grade = grade\
    \ * 1000\n        grade = grade / 1000\n        grade = grade * 10000\n      \
    \  grade = grade / 10000\n        grade = grade * 100000\n        grade = grade\
    \ / 100000\n        grade = grade * 1000000\n        grade = grade / 1000000\n\
    \        grade = grade * 10000000\n        grade = grade / 10000000\n        grade\
    \ = grade * 100000000\n        grade = grade / 100000000\n        grade = grade\
    \ * 1000000000\n        grade = grade / 1000000000\n        grade = grade * 10000000000\n\
    \        grade = grade / 10000000000\n        grade = grade * 100000000000\n \
    \       grade = grade / 100000000000\n        grade = grade * 1000000000000\n\
    \        grade = grade / 1000000000000\n        grade = grade * 10000000000000\n\
    \        grade = grade / 10000000000000\n        grade = grade * 100000000000000\n\
    \        grade = grade / 100000000000000\n        grade = grade * 1000000000000000\n\
    \        grade = grade / 1000000000000000\n        grade = grade * 10000000000000000\n\
    \        grade = grade / 10000000000000000\n        grade = grade * 100000000000000000\n\
    \        grade = grade / 100000000000000000\n        grade = grade * 1000000000000000000\n\
    \        grade = ", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 && grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[0] < 3.0] = 1.0\n\
    \    gradesSorted[gradesSorted[0] > 3.0] = 2.0\n    gradesSorted[gradesSorted[0]\
    \ > 2.0] = 3.0\n    gradesSorted[gradesSorted[0] > 1.7] = 4.0\n    gradesSorted[gradesSorted[0]\
    \ > 1.3] = 5.0\n    gradesSorted[gradesSorted[0] > 0.7] = 6.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 7.0\n    gradesSorted[gradesSorted[0] > 0] = 8.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 9.0\n    gradesSorted[gradesSorted[0] > 0] = 10.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 11.0\n    gradesSorted[gradesSorted[0] > 0] = 12.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 13.0\n    gradesSorted[gradesSorted[0] > 0] = 14.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 15.0\n    gradesSorted[gradesSorted[0] > 0] = 16.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 17.0\n    gradesSorted[gradesSorted[0] > 0] = 18.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 19.0\n    gradesSorted[gradesSorted[0] > 0] = 20.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 25.0\n    gradesSorted[gradesSorted[0] > 0] = 26.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 30.0\n    gradesSorted[gradesSorted[0] > 0] = 31.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 32.0\n    gradesSorted[gradesSorted[0] > 0] = 33.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 34.0\n    gradesSorted[gradesSorted[0] > 0] = 35.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 36.0\n    gradesSorted[gradesSorted[0] > 0] = 37.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 38.0\n    gradesSorted[gradesSorted[0] > 0] = 39.0\n    gradesSorted[gradesSorted[0]\
    \ > 0] = 44.0\n    gradesSorted[gradesSorted[0] > 0] = 45.0\n    ", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[gradesSorted[len(gradesSorted)-1]] = 0.0\n    gradesSorted[0]\
    \ += 4.0\n    gradesSorted[1] += 3.7\n    gradesSorted[2] += 3.3\n    gradesSorted[3]\
    \ += 3.0\n    gradesSorted[4] += 2.7\n    gradesSorted[5] += 2.3\n    gradesSorted[6]\
    \ += 2.0\n    gradesSorted[7] += 1.7\n    gradesSorted[8] += 1.3\n    gradesSorted[9]\
    \ += 1.0\n    gradesSorted[10] += 0.7\n    gradesSorted[11] += 0.0\n    gradesSorted[12]\
    \ = 0.0\n    gradesSorted[13] = 0.0\n    gradesSorted[14] = 0.0\n    gradesSorted[15]\
    \ = 0.0\n    gradesSorted[16] = 0.0\n    gradesSorted[17] = 0.0\n    gradesSorted[18]\
    \ = 0.0\n    gradesSorted[19] = 0.0\n    gradesSorted[20] = 0.0\n    gradesSorted[21]\
    \ = 0.0\n    gradesSorted[22] = 0.0\n    gradesSorted[23] = 0.0\n    gradesSorted[24]\
    \ = 0.0\n    gradesSorted[25] = 0.0\n    gradesSorted[26] = 0.0\n    gradesSorted[27]\
    \ = 0.0\n    gradesSorted[28] = 0.0\n    gradesSorted[29] = 0.0\n    gradesSorted[30]\
    \ = 0.0\n    gradesSorted[31] = 0.0\n    gradesSorted[32] = 0.0\n    gradesSorted[33]\
    \ = 0.0\n    gradesSorted[34] = 0.0\n    gradesSorted[35] = 0.0\n    gradesSorted[36]\
    \ = 0.0\n    gradesSorted[37] = 0.0\n    gradesSorted[38] = 0.0\n    gradesSorted[39]\
    \ = 0.0\n    gradesSorted[40] = 0.0\n    gradesSorted[41] = 0.0\n    gradesSorted[42]\
    \ = 0.0\n    gradesSorted[43] = 0.0\n    gradesSorted[44] = 0.0\n    gradesSorted[45]\
    \ = 0.0\n    gradesSorted[46] = 0.0\n    gradesSorted[47] = 0.0\n    gradesSorted[48]\
    \ = 0.0\n    gradesSorted[49] = 0.0\n    gradesSorted[50] = 0.0\n    gradesSorted[51]\
    \ = 0.0\n    gradesSorted[52] = ", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 4.0\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 4.0\n    gradesSorted[0] -= 3.7\n    gradesSorted[len(gradesSorted)-1] -= 3.7\n\
    \    gradesSorted[0] -= 3.3\n    gradesSorted[len(gradesSorted)-1] -= 3.3\n  \
    \  gradesSorted[0] -= 3.0\n    gradesSorted[len(gradesSorted)-1] -= 3.0\n    gradesSorted[0]\
    \ -= 2.7\n    gradesSorted[len(gradesSorted)-1] -= 2.7\n    gradesSorted[0] -=\
    \ 2.3\n    gradesSorted[len(gradesSorted)-1] -= 2.3\n    gradesSorted[0] -= 2.0\n\
    \    gradesSorted[len(gradesSorted)-1] -= 2.0\n    gradesSorted[0] -= 1.7\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 1.7\n    gradesSorted[0] -= 1.3\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 1.3\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 0.7\n    gradesSorted[len(gradesSorted)-1] -= 0.7\n\
    \    gradesSorted[0] -= 0.0\n    gradesSorted[len(gradesSorted)-1] -= 0.0\n  \
    \  gradesSorted[0] -= 0.0\n    gradesSorted[len(gradesSorted)-1] -= 0.0\n    gradesSorted[0]\
    \ -= 0.0\n    gradesSorted[len(gradesSorted)-1] -= 0.0\n    gradesSorted[0] -=\
    \ 0.0\n    gradesSorted[len(gradesSorted)-1] -= 0.0\n    gradesSorted[0] -= 0.0\n\
    \    gradesSorted[len(gradesSorted)-1] -= 0.0\n    gradesSorted[0] -= 0.0\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 0.0\n    gradesSorted[0] -= 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 0.0\n    gradesSorted[0] -= 0.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 0.0\n    gradesSorted[0] -= 0.0\n    gradesSorted[len(gradesSorted)-1] -= 0.0\n\
    \    gradesSorted[0] -= 0.0\n    gradesSorted[len(gradesSorted)-1] -= 0.0\n  \
    \  gradesSorted[0] -= 0.0\n    grades", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount\
    \ := 0\n    gradesTotal := 0.0\n    for _, grade := range gradesSorted {\n   \
    \     gradesCount++\n        gradesTotal += grade\n    }\n\n    letterGrades :=\
    \ make([]string, gradesCount)\n    for i := 0; i < gradesCount; i++ {\n      \
    \  letterGrades[i] = fmt.Sprintf(\"%+.2f\", gradesSorted[i]/gradesTotal)\n   \
    \ }\n\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount\
    \ := 0\n    letterGrades := make([]string, len(grades))\n    for _, grade := range\
    \ gradesSorted {\n        if grade > 0 {\n            gradesCount++\n        }\n\
    \    }\n\n    for i := 0; i < gradesCount; i++ {\n        letterGrades[i] = \"\
    A+\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"D-\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"E\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"F\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"G\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"H\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"I\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"J\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"K\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"L\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"M\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"N\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"O\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"P\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"Q\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"R\"\n    }\n    for i := gradesCount; i < len(grades); i++ {\n        letterGrades[i]\
    \ = \"S\"\n    }\n    for i := grades", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[gradesSorted[len(gradesSorted)-1]] = 0.0\n    gradesSorted[0]\
    \ += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] *= 10\n\
    \    gradesSorted[len(gradesSorted)-1] *= 10\n    gradesSorted[0] += 0.5\n   \
    \ gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 0.5\n    gradesSorted[0] *= 10\n    gradesSorted[len(gradesSorted)-1] *=\
    \ 10\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n\
    \    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n  \
    \  gradesSorted[0] *= 10\n    gradesSorted[len(gradesSorted)-1] *= 10\n    gradesSorted[0]\
    \ += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] *= 10\n\
    \    gradesSorted[len(gradesSorted)-1] *= 10\n    gradesSorted[0] += 0.5\n   \
    \ gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 0.5\n    gradesSorted[0] *= 10\n    gradesSorted[len(gradesSorted)-1] *=\
    \ 10\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n\
    \    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n  \
    \  gradesSorted[0] *= 10\n    gradesSorted[len(gradesSorted)-1] *= 10\n    gradesSorted[0]\
    \ += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] *= 10\n\
    \    gradesSorted[len(gradesSorted)-1] *= 10\n    gradesSorted[0] += 0.5\n   \
    \ gradesSorted[len(gradesSorted)-1] += ", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0.0)\n    gradesSorted ", "    var letterGrades\
    \ []string\n    for _, grade := range grades {\n        if grade >= 4.0 {\n  \
    \          letterGrades = append(letterGrades, \"A+\")\n        } else if grade\
    \ >= 3.7 && grade < 4.0 {\n            letterGrades = append(letterGrades, \"\
    A\")\n        } else if grade >= 3.3 && grade < 3.7 {\n            letterGrades\
    \ = append(letterGrades, \"A-\")\n        } else if grade >= 3.0 && grade < 3.3\
    \ {\n            letterGrades = append(letterGrades, \"B+\")\n        } else if\
    \ grade >= 2.7 && grade < 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade >= 2.3 && grade < 2.7 {\n            letterGrades\
    \ = append(letterGrades, \"B-\")\n        } else if grade >= 2.0 && grade < 2.3\
    \ {\n            letterGrades = append(letterGrades, \"C+\")\n        } else if\
    \ grade >= 1.7 && grade < 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade >= 1.3 && grade < 1.7 {\n            letterGrades\
    \ = append(letterGrades, \"C-\")\n        } else if grade >= 1.0 && grade < 1.3\
    \ {\n            letterGrades = append(letterGrades, \"D+\")\n        } else if\
    \ grade >= 0.7 && grade < 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade >= 0.0 && grade < 0.7 {\n            letterGrades\
    \ = append(letterGrades, \"D-\")\n        } else {\n            letterGrades =\
    \ append(letterGrades, \"E\")\n        }\n    }\n    return letterGrades\n}\n",
  "    var gradesList []string\n    for _, grade := range grades {\n        if grade\
    \ > 4.0 {\n            gradesList = append(gradesList, \"A+\")\n        } else\
    \ if grade > 3.7 {\n            gradesList = append(gradesList, \"A\")\n     \
    \   } else if grade > 3.3 {\n            gradesList = append(gradesList, \"A-\"\
    )\n        } else if grade > 3.0 {\n            gradesList = append(gradesList,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            gradesList = append(gradesList,\
    \ \"B\")\n        } else if grade > 2.3 {\n            gradesList = append(gradesList,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            gradesList = append(gradesList,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            gradesList = append(gradesList,\
    \ \"C\")\n        } else if grade > 1.3 {\n            gradesList = append(gradesList,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            gradesList = append(gradesList,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            gradesList = append(gradesList,\
    \ \"D\")\n        } else if grade > 0.0 {\n            gradesList = append(gradesList,\
    \ \"D-\")\n        } else {\n            gradesList = append(gradesList, \"E\"\
    )\n        }\n    }\n    return gradesList\n}\n", "    // Your code here\n   \
    \ result := []string{}\n    for _, grade := range grades {\n        if grade >\
    \ 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0 {\n\
    \            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n      \
    \      grade = grade + 2.0\n        }\n        if grade < 1.7 {\n            grade\
    \ = grade + 1.7\n        }\n        if grade < 1.3 {\n            grade = grade\
    \ + 1.3\n        }\n        if grade < 1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade < 0.7 {\n            grade = grade + 0.7\n      \
    \  }\n        if grade < 0.3 {\n            grade = grade + 0.3\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n", "  \
    \  // Your code here\n    return []string{\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"}\n}\n", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    var gradesString\
    \ []string\n    for _, grade := range grades {\n        if grade > 3.0 {\n   \
    \         gradesString = append(gradesString, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            gradesString = append(gradesString, \"B\")\n        } else\
    \ if grade > 2.3 {\n            gradesString = append(gradesString, \"B-\")\n\
    \        } else if grade > 1.7 && grade < 2.3 {\n            gradesString = append(gradesString,\
    \ \"C\")\n        } else if grade > 1.3 && grade < 1.7 {\n            gradesString\
    \ = append(gradesString, \"C-\")\n        } else if grade > 1.0 {\n          \
    \  gradesString = append(gradesString, \"D+\")\n        } else if grade > 0.7\
    \ {\n            gradesString = append(gradesString, \"D\")\n        } else if\
    \ grade > 0.0 {\n            gradesString = append(gradesString, \"D-\")\n   \
    \     } else {\n            gradesString = append(gradesString, \"E\")\n     \
    \   }\n    }\n    return gradesString\n}\n", "    gradesLen := len(grades)\n \
    \   letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n \
    \   letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n       \
    \ } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\
    \n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n        \
    \    letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ letterGrades[i] = \"\"\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n \
    \   }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n\
    \    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n  \
    \  gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0]\
    \ += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] += 0.5\n\
    \    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -= 0.5\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1]\
    \ += 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 0.5\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n\
    \    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n  \
    \  gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0]\
    \ -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] +=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -= 0.5\n\
    \    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] += 0.5\n  \
    \  gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 0.5\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n\
    \    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n  \
    \  gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] -= ", "    var\
    \ letter []string\n    for _, grade := range grades {\n        if grade >= 4.0\
    \ {\n            letter = append(letter, \"A+\")\n        } else if grade > 3.7\
    \ {\n            letter = append(letter, \"A\")\n        } else if grade > 3.3\
    \ {\n            letter = append(letter, \"A-\")\n        } else if grade > 3.0\
    \ {\n            letter = append(letter, \"B+\")\n        } else if grade > 2.7\
    \ {\n            letter = append(letter, \"B\")\n        } else if grade > 2.3\
    \ {\n            letter = append(letter, \"B-\")\n        } else if grade > 2.0\
    \ {\n            letter = append(letter, \"C+\")\n        } else if grade > 1.7\
    \ {\n            letter = append(letter, \"C\")\n        } else if grade > 1.3\
    \ {\n            letter = append(letter, \"C-\")\n        } else if grade > 1.0\
    \ {\n            letter = append(letter, \"D+\")\n        } else if grade > 0.7\
    \ {\n            letter = append(letter, \"D\")\n        } else if grade > 0.0\
    \ {\n            letter = append(letter, \"D-\")\n        } else {\n         \
    \   letter = append(letter, \"E\")\n        }\n    }\n    return letter\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[0]\n    gradesSorted[0] -= gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[0]\n    gradesSorted[0]\
    \ -= gradesSorted[len(", "    gradesSorted := make([]float64, len(grades))\n \
    \   copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 && grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
