language: go_test.go
name: HumanEval_112_reverse_delete
results:
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for _, v := range s {\n\
    \        if v == c {\n            result = append(result, v)\n        }\n    }\n\
    \    if len(result) == 0 {\n        return nil\n    }\n    if len(result) == 1\
    \ {\n        return nil\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazl6mwl9_test.go:17:17: invalid operation: v == c (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)-1\n\
    \    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n            i++\n\
    \            j--\n        } else {\n            result = append(result, s[i])\n\
    \            i++\n            j--\n        }\n    }\n    if i == len(s) {\n  \
    \      result = append(result, s[i])\n    }\n    if j == 0 {\n        result =\
    \ append(result, c[j])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x549ce0, 0x1}, {0x549ce0,\
    \ 0x1})\n\t/tmp/tmp3_lrxwhr_test.go:29 +0x238\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmp3_lrxwhr_test.go:48 +0x153\ntesting.tRunner(0xc0001a01a0, 0x529008)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpa02shifs_test.go:42:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result := append(result,\
    \ s[i])\n        }\n    }\n    if s == result[len(result)-1] {\n        return\
    \ append(result, true)\n    } else {\n        return append(result, false)\n \
    \   }\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl65ikll5_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpl65ikll5_test.go:19:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n       \
    \ if s[i] == c[j] {\n            i++\n            j--\n        } else {\n    \
    \        i++\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s)\n    }\n    if j == 0 {\n        result = append(result, c)\n    }\n    return\
    \ result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpn6wb3kki_test.go:57: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpn6wb3kki_test.go:57:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmpn6wb3kki_test.go:57: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpn6wb3kki_test.go:57:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmpn6wb3kki_test.go:57: expected '[ %!s(bool=true)]', got '[a]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpn6wb3kki_test.go:57:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpn6wb3kki_test.go:57: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpn6wb3kki_test.go:57:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmpn6wb3kki_test.go:57: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073631
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0; j-- {\n\
    \            if s[i] != c[j] {\n                break\n            }\n       \
    \ }\n        if j == 0 {\n            result = append(result, s[i])\n        }\n\
    \    }\n    if result == nil {\n        return nil\n    }\n    return []interface{}{result[len(result)-1],\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[bcd %!s(bool=false)]', got\
    \ '[%!s(uint8=101) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[acdef %!s(bool=false)]',\
    \ got '[%!s(uint8=102) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[cdedc %!s(bool=true)]',\
    \ got '[%!s(uint8=98) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[dik %!s(bool=false)]', got\
    \ '[%!s(uint8=107) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[ %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmphn8fucnv_test.go:55:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[%!s(uint8=97) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[abba %!s(bool=true)]', got\
    \ '[%!s(uint8=97) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmphn8fucnv_test.go:55: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result += append(result, s[i])\n        }\n    }\n    if i == len(s)\
    \ {\n        result += append(result, s[i])\n    }\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhyql6gy_test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpzhyql6gy_test.go:25:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result += append(result, s[i])\n        }\n   \
    \ }\n    result += append(result, s[len(s)-1:len(s)])\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpteewyv8r_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpteewyv8r_test.go:25:5: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    result := []interface{}{}\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n        \
    \    continue\n        }\n        \n        result = append(result, s[i])\n  \
    \  }\n    \n    if s == string(result) {\n        return append(result, true)\n\
    \    }\n    \n    return append(result, false)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjft1037s_test.go:27:20: cannot convert result (variable of type []interface{})
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoo7iqp2a_test.go:162:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n   \
    \         delete(s, i)\n            delete(s, i)\n            delete(s, i)\n \
    \           delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n            delete(s, i)\n\
    \            delete(s, i)\n            delete(s, i)\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpua6w0f8c_test.go:117:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    if result == []interface{}{c} {\n       \
    \ return nil, false\n    }\n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo1fsi_pk_test.go:22:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpo1fsi_pk_test.go:23:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpo1fsi_pk_test.go:25:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            result :=\
    \ append(result, s[i])\n        }\n    }\n    if result == []interface{}{c} {\n\
    \        return append(result, true)\n    } else {\n        return append(result,\
    \ false)\n    }\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_v4q3zqt_test.go:19:13:\
    \ result declared but not used\n/tmp/tmp_v4q3zqt_test.go:22:8: invalid operation:\
    \ result == []interface{}{\u2026} (slice can only be compared to nil)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result := append(result, s[i])\n            i = 0\n        }\n   \
    \ }\n    if i == 0 {\n        result := append(result, s[i])\n    }\n    return\
    \ append(result, \"true\")\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmperupoz8e_test.go:21:13: result declared but not used

    /tmp/tmperupoz8e_test.go:26:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp5u6hr1tv_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp5u6hr1tv_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp5u6hr1tv_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmp5u6hr1tv_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp5u6hr1tv_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp5u6hr1tv_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp5u6hr1tv_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) {\n        if s[i] == c[j] {\n            i++\n\
    \            j--\n        } else {\n            result += s[i]\n        }\n  \
    \  }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5wcp7zg1_test.go:23:13: invalid operation: result += s[i] (mismatched
    types []interface{} and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result += append(result, s[i])\n        }\n   \
    \ }\n    if i == len(s) {\n        result += append(result, s[i])\n    }\n   \
    \ return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi6b_b35t_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpi6b_b35t_test.go:26:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == c[0] {\n            result = append(result, s[i])\n  \
    \          c := c[1:]\n        } else {\n            result = append(result, s[i])\n\
    \        }\n    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqj4l5n_x_test.go:19:13: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n  \
    \          j--\n        } else {\n            result = append(result, s[i])\n\
    \            i++\n            j--\n        }\n    }\n    return append(result,\
    \ c[j])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpid8u_vjg_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpid8u_vjg_test.go:38\
    \ +0x932\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n            continue\n\
    \        }\n        result = append(result, s[i])\n    }\n    if result == s {\n\
    \        return append(result, true)\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksdz9shz_test.go:23:18: invalid operation: result == s (mismatched types
    []interface{} and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result := append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == len(s) {\n        result := append(result,\
    \ s[i])\n    }\n    return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0qru5fq_test.go:22:13: result declared but not used

    /tmp/tmpx0qru5fq_test.go:27:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n\
    \            i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, \"\
    True\")\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmptkcwv7lo_test.go:29\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmptkcwv7lo_test.go:45\
    \ +0x15a6\ntesting.tRunner(0xc0001124e0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n      \
    \      continue\n        }\n        \n        result = append(result, s[i])\n\
    \    }\n    \n    if s == result {\n        return nil\n    }\n    \n    return\
    \ []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9uv8cwqr_test.go:20:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp9uv8cwqr_test.go:27:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result += append([]interface{}{s[i]}, c[i])\n \
    \           i++\n        }\n    }\n    if i == len(s) {\n        result += append([]interface{}{s[i]},\
    \ c[i])\n    }\n    return append([]interface{}{result}, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3qj52l4t_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmp3qj52l4t_test.go:27:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n            continue\n\
    \        }\n        result = append(result, s[i])\n    }\n    if s == result {\n\
    \        return nil\n    }\n    return []interface{}{result, true}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0gqvnvp_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpm0gqvnvp_test.go:23:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, c[j])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpsgpxf211_test.go:28\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpsgpxf211_test.go:44\
    \ +0x1da6\ntesting.tRunner(0xc000192680, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073633
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp5u6hr1tv_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp5u6hr1tv_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp5u6hr1tv_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmp5u6hr1tv_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp5u6hr1tv_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp5u6hr1tv_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp5u6hr1tv_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] != c[j] {\n            result = append(result,\
    \ s[i])\n        }\n        i++\n        j--\n    }\n    if i == j {\n       \
    \ result = append(result, s[i])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpeew_sskc_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpeew_sskc_test.go:38\
    \ +0x8f5\ntesting.tRunner(0xc0001036c0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] != c[j] {\n            result = append(result,\
    \ s[i])\n        }\n        i++\n        j--\n    }\n    if i == j {\n       \
    \ result = append(result, s[i])\n    }\n    return []interface{}{result, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpr0skjt_q_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpr0skjt_q_test.go:38\
    \ +0xdf5\ntesting.tRunner(0xc00011b040, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.125s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n            continue\n\
    \        }\n        result = append(result, s[i])\n    }\n    if result == s {\n\
    \        return nil\n    }\n    return []interface{}{result}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpibr8tahy_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpibr8tahy_test.go:23:18: invalid operation: result == s (mismatched types
    []interface{} and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    var k int\n    for i = 0; i < len(s); i++ {\n        for j = i; j < len(s);\
    \ j++ {\n            if s[i] == c[j] {\n                k = j\n            } else\
    \ {\n                break\n            }\n        }\n        if k > i {\n   \
    \         result = append(result, s[k])\n        }\n    }\n    if result == nil\
    \ {\n        return nil\n    }\n    return append(result, true), false\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwnb6donn_test.go:34:34:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result += append([]interface{}{s[i]},\
    \ c[j])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result += append([]interface{}{s[i]}, c[j])\n    }\n    return append([]interface{}{s[i]},\
    \ c[j], result)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn8o53_hk_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpn8o53_hk_test.go:29:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    if result == []interface{}{c} {\n       \
    \ return nil, false\n    }\n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo1fsi_pk_test.go:22:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpo1fsi_pk_test.go:23:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpo1fsi_pk_test.go:25:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(c) && j < len(s) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, \"\
    True\")\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpoh_pwp7d_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpoh_pwp7d_test.go:41\
    \ +0x1c73\ntesting.tRunner(0xc0001924e0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073632
- exit_code: null
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i-1\n        }\n    }\n    if i == 0 {\n        result = append(result, s[i])\n\
    \    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073644
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n            continue\n\
    \        }\n        result = append(result, s[i])\n    }\n    if s == string(result)\
    \ {\n        return append(result, true)\n    }\n    return append(result, false)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj70_v_77_test.go:23:20: cannot convert result (variable of type []interface{})
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            deleted = true\n        } else\
    \ {\n            deleted = false\n        }\n    }\n    if deleted {\n       \
    \ result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozx84lnl_test.go:18:13: undefined: deleted

    /tmp/tmpozx84lnl_test.go:20:13: undefined: deleted

    /tmp/tmpozx84lnl_test.go:23:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073632
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    return append(result, c[j])\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp7fjao9gu_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp7fjao9gu_test.go:37\
    \ +0x8bb\ntesting.tRunner(0xc0001201a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result += []interface{}{s[i]}\n\
    \            i++\n            j--\n        }\n    }\n    if i == len(s) {\n  \
    \      result += []interface{}{s[i]}\n    }\n    if j == 0 {\n        result +=\
    \ []interface{}{c[j]}\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkr4mf19v_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpkr4mf19v_test.go:29:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpkr4mf19v_test.go:32:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue // skip the character\n\
    \        }\n        \n        result = append(result, s[i])\n    }\n    \n   \
    \ if result == []interface{}{c} {\n        return nil, false\n    }\n    \n  \
    \  return result, true\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyr3jad5b_test.go:25:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpyr3jad5b_test.go:26:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpyr3jad5b_test.go:29:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result := append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == 0 {\n        result := append(result, s[i])\n\
    \    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfh4r573__test.go:22:13: result declared but not used

    /tmp/tmpfh4r573__test.go:27:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == c {\n            result = append(result, s[i])\n     \
    \   }\n    }\n    if result == nil {\n        return nil\n    }\n    if result[len(result)-1]\
    \ == c {\n        return nil\n    }\n    return append(result, s[len(s)-1])\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0s2qf1y3_test.go:17:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            deleted\
    \ = true\n        }\n    }\n    if deleted {\n        fmt.Println(\"Deleted all\
    \ characters in s\", s)\n    }\n    return append(result, s)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg66f2lg__test.go:19:13: undefined: deleted

    /tmp/tmpg66f2lg__test.go:22:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073633
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] != c[j] {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        } else {\n            i++\n\
    \            j--\n        }\n    }\n    if i == j {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, \"palindrome\")\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp155t28of_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp155t28of_test.go:41\
    \ +0xc5d\ntesting.tRunner(0xc0001a0340, 0x528d68)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            deleted =\
    \ true\n        }\n    }\n    if deleted {\n        result = append(result, s)\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyg96bhba_test.go:19:13: undefined: deleted

    /tmp/tmpyg96bhba_test.go:22:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073633
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)-1\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \            j--\n        }\n    }\n    return append(result, c[j])\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpi1e8rwnn_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpi1e8rwnn_test.go:38\
    \ +0x8fb\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result += append(result, s[i])\n        }\n   \
    \ }\n    if i == len(s) {\n        return append(result, true)\n    } else {\n\
    \        return append(result, false)\n    }\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jripc9b_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c {\n            continue\n  \
    \      }\n        result = append(result, s[i])\n    }\n    if s == fmt.Sprintf(\"\
    %s\", result) {\n        return nil, false\n    }\n    return result, true\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp16ahnwyy_test.go:18:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmp16ahnwyy_test.go:24:21:\
    \ too many return values\n\thave (nil, bool)\n\twant ([]interface{})\n/tmp/tmp16ahnwyy_test.go:26:20:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            deleted = true\n        } else\
    \ {\n            deleted = false\n        }\n    }\n    \n    if deleted {\n \
    \       result = append(result, s)\n    }\n    \n    return result\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_tzn5pn_test.go:19:13: undefined: deleted

    /tmp/tmpk_tzn5pn_test.go:21:13: undefined: deleted

    /tmp/tmpk_tzn5pn_test.go:25:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    result := []interface{}{}\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n           \
    \ deleted = true\n        }\n    }\n    \n    if deleted {\n        result = append(result,\
    \ s)\n    }\n    \n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp64ld3bq4_test.go:20:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp64ld3bq4_test.go:21:13: undefined: deleted

    /tmp/tmp64ld3bq4_test.go:25:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073633
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for _, v := range s {\n\
    \        if v == c {\n            result = append(result, v)\n        }\n    }\n\
    \    if result == nil {\n        return nil\n    }\n    if result[len(result)-1]\
    \ == c {\n        return append(result, result[:len(result)-1]), true\n    }\n\
    \    return append(result, result[:len(result)-1]), false\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjknhhc93_test.go:17:17:\
    \ invalid operation: v == c (mismatched types rune and string)\n/tmp/tmpjknhhc93_test.go:25:56:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n\
    /tmp/tmpjknhhc93_test.go:27:52: too many return values\n\thave ([]interface{},\
    \ bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n   \
    \     } else {\n            result = append(result, s[i])\n            i = i +\
    \ 1\n        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpgmxj8uej_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpgmxj8uej_test.go:39\
    \ +0x839\ntesting.tRunner(0xc000198ea0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073636
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    k := len(c)\n    \n    for i < j {\n        if s[i] != c[k] {\n         \
    \   result = append(result, s[i])\n            i++\n        }\n        k--\n \
    \   }\n    \n    if i == j {\n        result = append(result, s[i])\n    }\n \
    \   \n    return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpssdmts65_test.go:21\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpssdmts65_test.go:42\
    \ +0x845\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n   \
    \         continue\n        }\n        \n        result = append(result, s[i])\n\
    \    }\n    \n    if result == []interface{}{c} {\n        return nil, false\n\
    \    }\n    \n    return result, true\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinnkr3b6_test.go:27:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpinnkr3b6_test.go:28:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpinnkr3b6_test.go:31:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpa02shifs_test.go:42:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    for _, v := range\
    \ s {\n        if v == c {\n            result = append(result, v)\n        }\n\
    \    }\n    if len(result) == 0 {\n        return nil\n    }\n    result := append(result,\
    \ s[len(s)-1])\n    return []interface{}{result}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprx9ojsoz_test.go:17:17: invalid operation: v == c (mismatched types rune
    and string)

    /tmp/tmprx9ojsoz_test.go:24:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073635
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: null
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result = append(result, s[i])\n            i = 0\n        }\n    }\n\
    \    if i == 0 {\n        result = append(result, s[i])\n    }\n    return append(result,\
    \ \"true\")\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073646
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n      \
    \  } else {\n            result = append(result, s[i])\n        }\n    }\n   \
    \ if i == len(s) {\n        return append(result, true)\n    }\n    return append(result,\
    \ reverse_delete(s[i:], c))\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpno2oh5x6_test.go:19:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            deleted = true\n        }\n  \
    \  }\n    \n    if deleted {\n        result = append(result, s)\n    }\n    \n\
    \    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7b7qh6t_test.go:19:13: undefined: deleted

    /tmp/tmpk7b7qh6t_test.go:23:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result := append(result, s[i])\n            i =\
    \ 0\n        }\n    }\n    if i == 0 {\n        result := append(result, s[i])\n\
    \    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfh4r573__test.go:22:13: result declared but not used

    /tmp/tmpfh4r573__test.go:27:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073631
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    j :=\
    \ len(s)\n    for i < j {\n        if s[i] == c[j] {\n            i++\n      \
    \      j--\n        } else {\n            result += append([]interface{}{s[i]},\
    \ c[j])\n            i++\n            j--\n        }\n    }\n    if i == j {\n\
    \        result += append([]interface{}{s[i]}, c[j])\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphlzfh8mv_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmphlzfh8mv_test.go:29:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    return []interface{}{result, true}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp2x998ul1_test.go:17\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp2x998ul1_test.go:32\
    \ +0x75a\ntesting.tRunner(0xc00019e1a0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073637
- exit_code: null
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result = append(result, s[i])\n            i = i - 1\n        }\n\
    \    }\n    if i == 0 {\n        result = append(result, c[i])\n    }\n    return\
    \ []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073648
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for _, v := range s {\n        if v == c {\n            result = append(result,\
    \ v)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n\
    \    if len(result) == 1 {\n        return nil\n    }\n    if len(result) == 2\
    \ {\n        return nil\n    }\n    if len(result) > 2 {\n        return nil\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjttrm5zp_test.go:18:17: invalid operation: v == c (mismatched types rune
    and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == c {\n            result = append(result, s[i])\n     \
    \   }\n    }\n    if s == result {\n        return nil\n    }\n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstzmiv51_test.go:17:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpstzmiv51_test.go:21:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0; j-- {\n\
    \            if s[i] == c[j] {\n                s = s[:i] + s[i+1:]\n        \
    \        break\n            }\n        }\n    }\n    if s == c {\n        result\
    \ = []interface{}{s, true}\n    } else {\n        result = []interface{}{s, false}\n\
    \    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmpez52jv90_test.go:55: expected '[cdedc %!s(bool=true)]',\
    \ got '[bcdedca %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmpez52jv90_test.go:55: expected '[ %!s(bool=true)]', got '[\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n  \
    \      tmpez52jv90_test.go:55: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n  \
    \      tmpez52jv90_test.go:55: expected '[abcdedcba %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=false)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n  \
    \      tmpez52jv90_test.go:55: expected '[abba %!s(bool=true)]', got '[abba %!s(bool=false)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n        tmpez52jv90_test.go:55:\
    \ expected '[ %!s(bool=true)]', got '[am %!s(bool=false)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \            j--\n        }\n    }\n    return append(result, c[j])\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpo64u2xgk_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpo64u2xgk_test.go:38\
    \ +0x8fb\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c {\n            result = append(result, s[i])\n\
    \            i++\n        }\n    }\n    if i == len(s) {\n        return nil\n\
    \    }\n    for i := len(s)-1; i >= 0; i-- {\n        if s[i] == c {\n       \
    \     result = append(result, s[i])\n        }\n    }\n    return []interface{}{result,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpojw272m3_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpojw272m3_test.go:27:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) {\n        if s[i] == c[j] {\n            i++\n    \
    \        j--\n        } else {\n            result = append(result, s[i])\n  \
    \          i = i + 1\n        }\n    }\n    return append(result, c[j])\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpjeu772jl_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpjeu772jl_test.go:37\
    \ +0x896\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, c[j])\n    }\n    return []interface{}{result, true}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 20 [running]:\ntesting.tRunner.func1.2({0x5146a0, 0xc000162000})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5146a0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpncc_hh_i_test.go:28\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpncc_hh_i_test.go:44\
    \ +0x1d3c\ntesting.tRunner(0xc0001036c0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    j :=\
    \ len(s) - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n  \
    \          j--\n        } else {\n            result = append(result, s[i])\n\
    \            i++\n        }\n    }\n    if i == j {\n        result = append(result,\
    \ s[i])\n    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmplyr9y5lf_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmplyr9y5lf_test.go:40\
    \ +0xcf3\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result = append(result, s[i])\n            i = i + 1\n        }\n\
    \    }\n    return append(result, s[len(s)-1:len(s)], true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpla28fsnx_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpla28fsnx_test.go:35\
    \ +0x8bf\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    fmt.Println(result)\n    return []interface{}{result,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptoiiyurw_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s)-1\n    for i < j {\n        if s[i] == c[j] {\n      \
    \      i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == j {\n        result =\
    \ append(result, s[i])\n    }\n    return []interface{}{result, true}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp1ex6e6nn_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp1ex6e6nn_test.go:41\
    \ +0xdd5\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(c) && j < len(s) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    if j == 0 {\n        result\
    \ = append(result, c[j])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x51e5c7, 0x5}, {0x51e2b3,\
    \ 0x2})\n\t/tmp/tmp__uci2qm_test.go:19 +0x245\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmp__uci2qm_test.go:44 +0x59\ntesting.tRunner(0xc0001a0340, 0x529008)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == c[0] {\n            result = append(result, s[i])\n  \
    \          deleted = true\n        }\n    }\n    if deleted {\n        return\
    \ append(result, true)\n    } else {\n        return append(result, false)\n \
    \   }\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw87l2y41_test.go:19:13: undefined: deleted

    /tmp/tmpw87l2y41_test.go:22:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] != c[j] {\n            result = append(result,\
    \ s[i])\n        }\n        i++\n        j--\n    }\n    if i == j {\n       \
    \ result = append(result, s[i])\n    }\n    return []interface{}{result, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpr0skjt_q_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpr0skjt_q_test.go:38\
    \ +0xdf5\ntesting.tRunner(0xc00011b040, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.125s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n            continue\n\
    \        }\n        result = append(result, s[i])\n    }\n    if result == s {\n\
    \        return nil\n    }\n    return []interface{}{result, true}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp33ixe5p0_test.go:23:18: invalid operation: result == s (mismatched types
    []interface{} and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073637
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[i])\n \
    \       }\n    }\n    if result == []interface{}{c} {\n        return nil, false\n\
    \    }\n    return result, true\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppw6g6gsx_test.go:17:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmppw6g6gsx_test.go:21:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmppw6g6gsx_test.go:22:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmppw6g6gsx_test.go:24:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    var k int\n    var isPalindrome bool\n    for i = 0; i < len(s); i++ {\n\
    \        for j = i; j < len(s); j++ {\n            if s[i] == c[j] {\n       \
    \         k = j\n            } else {\n                k = -1\n            }\n\
    \            if k == -1 {\n                isPalindrome = false\n            \
    \    break\n            }\n        }\n        if isPalindrome {\n            result\
    \ = append(result, s[i])\n            isPalindrome = false\n        }\n    }\n\
    \    return append(result, s[i])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x51e5c7?, 0x5d4210?}, {0x51e2b3?,\
    \ 0x203000?})\n\t/tmp/tmp40j596ap_test.go:22 +0x65\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmp40j596ap_test.go:47 +0x59\ntesting.tRunner(0xc00011b040, 0x529008)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073638
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] != c {\n            result = append(result, s[i])\n \
    \       }\n    }\n    if s == result {\n        return nil\n    }\n    return\
    \ []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3y5zlxo__test.go:17:20: invalid operation: s[i] != c (mismatched types
    byte and string)

    /tmp/tmp3y5zlxo__test.go:21:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result += append(result, s[i])\n        }\n    }\n    if i == len(s)\
    \ {\n        result += append(result, s[i])\n    }\n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzhyql6gy_test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmpzhyql6gy_test.go:25:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // \nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6rcwj8k_test.go:162:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073638
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i = i + 1\n    }\n\
    \    if i == len(s) {\n        result = append(result, s[i])\n    }\n    return\
    \ []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpjr17311a_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpjr17311a_test.go:38\
    \ +0x82c\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n         \
    \   j--\n        } else {\n            result = append(result, s[i])\n       \
    \     i++\n            j--\n        }\n    }\n    if i == j {\n        result\
    \ = append(result, s[i])\n    }\n    return []interface{}{result, true}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpasy0pxy5_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpasy0pxy5_test.go:41\
    \ +0xe08\ntesting.tRunner(0xc0001a01a0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        \n\
    \        result = append(result, s[i])\n    }\n    \n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpvjwb66s5_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpvjwb66s5_test.go:35\
    \ +0x5ef\ntesting.tRunner(0xc0001a01a0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        \n\
    \        result = append(result, s[i])\n    }\n    \n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpvjwb66s5_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpvjwb66s5_test.go:35\
    \ +0x5ef\ntesting.tRunner(0xc0001a01a0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            deleted = true\n        } else\
    \ {\n            deleted = false\n        }\n    }\n    \n    if deleted {\n \
    \       result = append(result, s)\n    }\n    \n    return result\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_tzn5pn_test.go:19:13: undefined: deleted

    /tmp/tmpk_tzn5pn_test.go:21:13: undefined: deleted

    /tmp/tmpk_tzn5pn_test.go:25:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            result = append(result, s[i])\n\
    \        }\n    }\n    \n    if result == []interface{}{c} {\n        return nil,\
    \ false\n    }\n    \n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsobis2do_test.go:23:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpsobis2do_test.go:24:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpsobis2do_test.go:27:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    if result == []interface{}{c} {\n       \
    \ return nil, false\n    }\n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo1fsi_pk_test.go:22:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpo1fsi_pk_test.go:23:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpo1fsi_pk_test.go:25:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073629
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ _, v := range s {\n        if v == c {\n            result = append(result,\
    \ v)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n\
    \    if result[len(result)-1] == c {\n        return append(result, result[:len(result)-1]),\
    \ true\n    }\n    return append(result, result[:len(result)-1]), false\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3bllsbk5_test.go:18:17:\
    \ invalid operation: v == c (mismatched types rune and string)\n/tmp/tmp3bllsbk5_test.go:26:56:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n\
    /tmp/tmp3bllsbk5_test.go:28:52: too many return values\n\thave ([]interface{},\
    \ bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(c) && j < len(s) {\n        if s[i] != c[j] {\n       \
    \     i++\n            j--\n        } else {\n            i++\n            j--\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s)\n\
    \    }\n    if j == 0 {\n        result = append(result, c)\n    }\n    return\
    \ result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp85z24_b9_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp85z24_b9_test.go:43\
    \ +0x1bc6\ntesting.tRunner(0xc0001a0340, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s)\n    for i < j {\n        if s[i] == c[j] {\n        \
    \    i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    return append(result,\
    \ c[j])\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpvglguyn7_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpvglguyn7_test.go:39\
    \ +0x8fb\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    result := []interface{}{}\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n        \
    \    continue\n        }\n        \n        result = append(result, s[i])\n  \
    \  }\n    \n    if s == result[len(result)-1] {\n        return append(result,\
    \ true)\n    }\n    \n    return append(result, false)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpvnvn__2p_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpvnvn__2p_test.go:41\
    \ +0x9c5\ntesting.tRunner(0xc000103380, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    return append(result, c[j])\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp7fjao9gu_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp7fjao9gu_test.go:37\
    \ +0x8bb\ntesting.tRunner(0xc0001201a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073634
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)-1\n\
    \    for i < len(c) && j < len(c) {\n        if s[i] == c[j] {\n            i++\n\
    \            j--\n        } else {\n            result = append(result, s[i])\n\
    \            i++\n            j--\n        }\n    }\n    if i == len(s) {\n  \
    \      result = append(result, s[i])\n    }\n    return append(result, \"true\"\
    )\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpcnj1ok38_test.go:29\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpcnj1ok38_test.go:45\
    \ +0x1bc5\ntesting.tRunner(0xc00019aea0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    if result == []interface{}{c} {\n        return\
    \ nil, false\n    }\n    return result, true\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz0vs0_xx_test.go:18:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpz0vs0_xx_test.go:22:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpz0vs0_xx_test.go:23:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpz0vs0_xx_test.go:25:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result\
    \ := append(result, s[i])\n        }\n    }\n    if s == result {\n        return\
    \ append(result, true)\n    }\n    return append(result, false)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpol00hl3w_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpol00hl3w_test.go:19:13: result declared but not used

    /tmp/tmpol00hl3w_test.go:22:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    if j == 0 {\n        result\
    \ = append(result, c[j])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x549ce0, 0x1}, {0x549ce0,\
    \ 0x1})\n\t/tmp/tmp8hn66581_test.go:29 +0x238\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmp8hn66581_test.go:48 +0x153\ntesting.tRunner(0xc0001a01a0, 0x529008)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return []interface{}{result}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpsjqvqvp5_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpsjqvqvp5_test.go:40\
    \ +0xbfc\ntesting.tRunner(0xc000103520, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result += append([]interface{}{s[i]}, c[i])\n \
    \           i++\n        }\n    }\n    return append(result, c[:i]...)\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu6ko4ks_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmptu6ko4ks_test.go:26:28: cannot use c[:i] (value of type string) as type
    []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    if s == result {\n        return nil\n  \
    \  }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfbluuo0k_test.go:22:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp5u6hr1tv_test.go:43: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp5u6hr1tv_test.go:43: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp5u6hr1tv_test.go:43: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmp5u6hr1tv_test.go:43: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp5u6hr1tv_test.go:43:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmp5u6hr1tv_test.go:43: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmp5u6hr1tv_test.go:43: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_vo22okb_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_vo22okb_test.go:40\
    \ +0xdd5\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    if result == []interface{}{c} {\n        return\
    \ append(result, true)\n    } else {\n        return append(result, false)\n \
    \   }\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpofx2cd1r_test.go:18:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpofx2cd1r_test.go:22:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c[i] {\n   \
    \         continue\n        }\n        \n        result = append(result, s[i])\n\
    \    }\n    \n    if result == s {\n        return nil\n    }\n    \n    return\
    \ append(result, false)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2wm1wois_test.go:27:18: invalid operation: result == s (mismatched types
    []interface{} and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[i])\n \
    \       }\n    }\n    \n    if result == []interface{}{c} {\n        return nil,\
    \ false\n    }\n    \n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzc78u8cc_test.go:18:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpzc78u8cc_test.go:23:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpzc78u8cc_test.go:24:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpzc78u8cc_test.go:27:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result := append(result, s[i])\n\
    \        }\n    }\n    if result == nil {\n        return nil\n    }\n    if result[len(result)-1]\
    \ == c {\n        return append(result, result[:len(result)-1]), true\n    }\n\
    \    return append(result, result[:len(result)-1]), false\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_lxgjiu_test.go:17:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpo_lxgjiu_test.go:18:13:\
    \ result declared but not used\n/tmp/tmpo_lxgjiu_test.go:25:56: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n/tmp/tmpo_lxgjiu_test.go:27:52:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    j :=\
    \ len(s)\n    for i < j {\n        if s[i] == c[j] {\n            i++\n      \
    \      j--\n        } else {\n            result = append(result, s[i])\n    \
    \        i++\n        }\n    }\n    if i == j {\n        result = append(result,\
    \ s[i])\n    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp9lxot82y_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp9lxot82y_test.go:40\
    \ +0xcf3\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n         \
    \   j--\n        } else {\n            result = append(result, s[i])\n       \
    \     i++\n            j--\n        }\n    }\n    if i == j {\n        result\
    \ = append(result, s[i])\n    }\n    return []interface{}{result}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp9s_xp1j9_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp9s_xp1j9_test.go:41\
    \ +0xc1c\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073641
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for _, v := range s {\n        if v == c {\n            continue\n      \
    \  }\n        result = append(result, v)\n    }\n    if s == result {\n      \
    \  return nil\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm3sinh93_test.go:18:17: invalid operation: v == c (mismatched types rune
    and string)

    /tmp/tmpm3sinh93_test.go:23:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n         \
    \   j--\n        } else {\n            result = append(result, s[i])\n       \
    \     i++\n            j--\n        }\n    }\n    if i == j {\n        result\
    \ = append(result, s[i])\n    }\n    return []interface{}{result, true}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpasy0pxy5_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpasy0pxy5_test.go:41\
    \ +0xe08\ntesting.tRunner(0xc0001a01a0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n         \
    \   j--\n        } else {\n            result = append(result, s[i])\n       \
    \     i++\n            j--\n        }\n    }\n    if i == j {\n        result\
    \ = append(result, s[i])\n    }\n    return []interface{}{result, true}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpasy0pxy5_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpasy0pxy5_test.go:41\
    \ +0xe08\ntesting.tRunner(0xc0001a01a0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpa02shifs_test.go:42:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[0] {\n            s = s[:i] + s[i+1:]\n        }\n\
    \    }\n    if s == \"\" {\n        return nil\n    }\n    result = append(result,\
    \ s)\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp4g42e2q8_test.go:17\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp4g42e2q8_test.go:40\
    \ +0x3a5\ntesting.tRunner(0xc00011a680, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073641
- exit_code: null
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i - 1\n        }\n    }\n    if i == 0 {\n        result = append(result, s[i])\n\
    \    }\n    return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073654
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c {\n            result = append(result,\
    \ s[i])\n        }\n    }\n    if len(result) == 0 {\n        return nil\n   \
    \ }\n    if result[len(result)-1] == c {\n        return append(result, result[:len(result)-1])\n\
    \    }\n    return nil\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate\
    \ := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenw3pkag_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_vo22okb_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_vo22okb_test.go:40\
    \ +0xdd5\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpt0r82l24_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpt0r82l24_test.go:40\
    \ +0xc08\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[0] {\n            deleted = true\n        } else\
    \ {\n            deleted = false\n        }\n    }\n    if deleted {\n       \
    \ result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv1yv8kxh_test.go:18:13: undefined: deleted

    /tmp/tmpv1yv8kxh_test.go:20:13: undefined: deleted

    /tmp/tmpv1yv8kxh_test.go:23:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i]\
    \ == c[j] {\n            i++\n            j--\n        } else {\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s)\n\
    \    }\n    if j == 0 {\n        result = append(result, c)\n    }\n    return\
    \ result\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpwikenzm1_test.go:57: expected '[bcd %!s(bool=false)]', got\
    \ '[]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n        tmpwikenzm1_test.go:57:\
    \ expected '[acdef %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmpwikenzm1_test.go:57: expected '[cdedc %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmpwikenzm1_test.go:57:\
    \ expected '[dik %!s(bool=false)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmpwikenzm1_test.go:57: expected '[ %!s(bool=true)]', got '[a]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmpwikenzm1_test.go:57:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__6\
    \ (0.00s)\n        tmpwikenzm1_test.go:57: expected '[abcdedcba %!s(bool=true)]',\
    \ got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n        tmpwikenzm1_test.go:57:\
    \ expected '[abba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmpwikenzm1_test.go:57: expected '[ %!s(bool=true)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    if s == result {\n        return nil\n  \
    \  }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhk4bj9v_test.go:22:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            deleted =\
    \ true\n        } else {\n            deleted = false\n        }\n    }\n    if\
    \ deleted {\n        result = append(result, s)\n    }\n    return result\n}\n\
    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkrggnu5__test.go:19:13: undefined: deleted

    /tmp/tmpkrggnu5__test.go:21:13: undefined: deleted

    /tmp/tmpkrggnu5__test.go:24:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073641
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == len(s) {\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, \"True\")\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_vud5ghf_test.go:28\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_vud5ghf_test.go:44\
    \ +0x1b85\ntesting.tRunner(0xc0001924e0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s)-1\n    for i < len(s) && j < len(c) {\n        if s[i]\
    \ == c[j] {\n            i++\n            j--\n        } else {\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s[i])\n\
    \    }\n    if j == 0 {\n        result = append(result, c[j])\n    }\n    return\
    \ append(result, \"palindrome\")\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpm4j0kj00_test.go:28\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpm4j0kj00_test.go:47\
    \ +0x1805\ntesting.tRunner(0xc0001a0340, 0x52a010)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpa02shifs_test.go:42:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp55ux8v3q_test.go:17\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp55ux8v3q_test.go:32\
    \ +0x5ef\ntesting.tRunner(0xc000103520, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        \n\
    \        result = append(result, s[i])\n    }\n    \n    if result == []interface{}{c}\
    \ {\n        return nil, nil\n    }\n    \n    return result, true\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphcrxwzs9_test.go:25:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmphcrxwzs9_test.go:26:21: too many return values\n\thave (nil,\
    \ nil)\n\twant ([]interface{})\n/tmp/tmphcrxwzs9_test.go:29:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n         \
    \   j--\n        } else {\n            result = append(result, s[i])\n       \
    \     i++\n            j--\n        }\n    }\n    return append(result, c[j])\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpar8lphre_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpar8lphre_test.go:38\
    \ +0x8fb\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[i])\n \
    \       }\n    }\n    if s == string(result) {\n        return append(result,\
    \ true)\n    }\n    return append(result, false)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk8dl4saf_test.go:17:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpk8dl4saf_test.go:21:20: cannot convert result (variable of type []interface{})
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpa02shifs_test.go:42:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    result := []interface{}{}\n\
    \    \n    for i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n        \
    \    result := append(result, s[i])\n        }\n    }\n    \n    if result ==\
    \ s {\n        return append(result, true)\n    } else {\n        return append(result,\
    \ false)\n    }\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate :=\
    \ reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcde\", \"\
    ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppiwi8qkx_test.go:21:13: result declared but not used

    /tmp/tmppiwi8qkx_test.go:25:18: invalid operation: result == s (mismatched types
    []interface{} and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s) - 1\n    for i < j {\n        if s[i] == c[j] {\n    \
    \        i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == j {\n\
    \        result = append(result, s[i])\n    }\n    return []interface{}{result,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp9q9w7rqt_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp9q9w7rqt_test.go:42\
    \ +0xe08\ntesting.tRunner(0xc000103520, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_vo22okb_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_vo22okb_test.go:40\
    \ +0xdd5\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        \n\
    \        result = append(result, s[i])\n    }\n    \n    if s == result {\n  \
    \      return nil\n    }\n    \n    return []interface{}{result, true}\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgtpfrnck_test.go:25:13: invalid operation: s == result (mismatched types
    string and []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0; j-- {\n\
    \            if s[i] == c[j] {\n                result = append(result, s[i])\n\
    \                break\n            }\n        }\n    }\n    if result == nil\
    \ {\n        return nil\n    }\n    return []interface{}{result[len(result)-1],\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[bcd %!s(bool=false)]', got\
    \ '[%!s(uint8=101) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[acdef %!s(bool=false)]',\
    \ got '[%!s(uint8=98) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[cdedc %!s(bool=true)]',\
    \ got '[%!s(uint8=97) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[dik %!s(bool=false)]', got\
    \ '[%!s(uint8=119) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__4\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[ %!s(bool=true)]', got '[%!s(uint8=97)\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__5 (0.00s)\n   \
    \     tmpbpryeaia_test.go:53: expected '[abcdedcba %!s(bool=true)]', got '[]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n        tmpbpryeaia_test.go:53:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[abba %!s(bool=true)]', got\
    \ '[%!s(uint8=118) %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8\
    \ (0.00s)\n        tmpbpryeaia_test.go:53: expected '[ %!s(bool=true)]', got '[%!s(uint8=97)\
    \ %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvcf127ld_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            deleted = true\n        } else\
    \ {\n            deleted = false\n        }\n    }\n    if deleted {\n       \
    \ result = append(result, s)\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpozx84lnl_test.go:18:13: undefined: deleted

    /tmp/tmpozx84lnl_test.go:20:13: undefined: deleted

    /tmp/tmpozx84lnl_test.go:23:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073632
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) {\n        if s[i] == c[j] {\n            i++\n    \
    \        j--\n        } else {\n            result = append(result, s[i])\n  \
    \          i++\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpud_82hwg_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpud_82hwg_test.go:40\
    \ +0x854\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        result\
    \ = append(result, s[i])\n    }\n    return append(result, true)\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp55ux8v3q_test.go:17\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp55ux8v3q_test.go:32\
    \ +0x5ef\ntesting.tRunner(0xc000103520, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073642
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == c[0] {\n            s = s[1:]\n\
    \        } else {\n            result = append(result, s[i])\n        }\n    }\n\
    \    if s == \"\" {\n        return append(result, true)\n    } else {\n     \
    \   return append(result, false)\n    }\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpoher45ck_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpoher45ck_test.go:43\
    \ +0x93e\ntesting.tRunner(0xc0001a0340, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)-1\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \            j--\n        }\n    }\n    if i == j {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpbjm5t8m4_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpbjm5t8m4_test.go:41\
    \ +0xc3d\ntesting.tRunner(0xc0001a01a0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] != c[j] {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        } else {\n            i++\n\
    \            j--\n        }\n    }\n    return append(result, c[j])\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmph86o96o7_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmph86o96o7_test.go:38\
    \ +0x8fc\ntesting.tRunner(0xc000103380, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0; j-- {\n\
    \            if s[i] == c[j] {\n                s = s[:i] + s[i+1:]\n        \
    \        c = c[:j] + c[j+1:]\n            }\n        }\n    }\n    if s == c {\n\
    \        result = append(result, \"True\")\n    } else {\n        result = append(result,\
    \ \"False\")\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x51e64d?, 0x5d4290?}, {0x51e360?,\
    \ 0x203000?})\n\t/tmp/tmp2s095dw8_test.go:20 +0x1e5\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmp2s095dw8_test.go:49 +0x233\ntesting.tRunner(0xc0001a0340, 0x529010)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            deleted = true\n        } else\
    \ {\n            deleted = false\n        }\n    }\n    \n    if deleted {\n \
    \       result = append(result, s)\n    }\n    \n    return result\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_tzn5pn_test.go:19:13: undefined: deleted

    /tmp/tmpk_tzn5pn_test.go:21:13: undefined: deleted

    /tmp/tmpk_tzn5pn_test.go:25:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073634
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    for\
    \ _, char := range s {\n        if char == c {\n            result = append(result,\
    \ char)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n   \
    \ }\n    if len(result) == 1 {\n        return append(result, true)\n    }\n \
    \   result := result[:len(result)-1]\n    return append(result, false)\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphc57441_test.go:18:20: invalid operation: char == c (mismatched types
    rune and string)

    /tmp/tmpphc57441_test.go:28:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // \nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoo7iqp2a_test.go:162:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c {\n            i++\n \
    \       } else {\n            result += append(result, s[i])\n        }\n    }\n\
    \    result := append(result, s[len(s)-1])\n    return []interface{}{result, true}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_osg3s05_test.go:19:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmp_osg3s05_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmp_osg3s05_test.go:25:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073643
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    i := 0\n    for i < len(s) {\n        if s[i] == c[i] {\n            i++\n\
    \        } else {\n            result = append(result, s[i])\n            i =\
    \ i + 1\n        }\n    }\n    if i == len(s) {\n        result = append(result,\
    \ s[i])\n    }\n    return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp5yql3ctx_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp5yql3ctx_test.go:39\
    \ +0x6ec\ntesting.tRunner(0xc000103380, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    \n    \n    return []interface{}{s,\
    \ true}\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[bcd %!s(bool=false)]', got\
    \ '[abcde %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[acdef %!s(bool=false)]', got '[abcdef\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[cdedc %!s(bool=true)]', got '[abcdedcba\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n   \
    \     tmpa02shifs_test.go:42: expected '[dik %!s(bool=false)]', got '[dwik %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmpa02shifs_test.go:42:\
    \ expected '[ %!s(bool=true)]', got '[a %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7\
    \ (0.00s)\n        tmpa02shifs_test.go:42: expected '[abba %!s(bool=true)]', got\
    \ '[vabba %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n\
    \        tmpa02shifs_test.go:42: expected '[ %!s(bool=true)]', got '[mamma %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073630
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == c[0] {\n            deleted = true\n        }\n    }\n\
    \    if deleted {\n        result = append(result, s)\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3lddgve_test.go:18:13: undefined: deleted

    /tmp/tmpd3lddgve_test.go:21:8: undefined: deleted

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        \n\
    \        result = append(result, s[i])\n    }\n    \n    if s == result {\n  \
    \      return nil, false\n    }\n    \n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbztat0vs_test.go:25:13:\
    \ invalid operation: s == result (mismatched types string and []interface{})\n\
    /tmp/tmpbztat0vs_test.go:26:21: too many return values\n\thave (nil, bool)\n\t\
    want ([]interface{})\n/tmp/tmpbztat0vs_test.go:29:20: too many return values\n\
    \thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\n\
    \    for i < j {\n        if s[i] == c[j] {\n            i++\n            j--\n\
    \        } else {\n            result = append(result, s[i])\n            i++\n\
    \        }\n    }\n    if i == j {\n        result = append(result, s[i])\n  \
    \  }\n    return []interface{}{result}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpsjqvqvp5_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpsjqvqvp5_test.go:40\
    \ +0xbfc\ntesting.tRunner(0xc000103520, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073640
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := make([]interface{}, 0)\n\
    \    for _, v := range s {\n        if v == c {\n            result = append(result,\
    \ v)\n        }\n    }\n    if len(result) == 0 {\n        return nil\n    }\n\
    \    if len(result) == 1 {\n        return nil\n    }\n    if result[len(result)-1]\
    \ == result[0] {\n        return nil\n    }\n    return result, nil\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpydc1fwtj_test.go:18:17:\
    \ invalid operation: v == c (mismatched types rune and string)\n/tmp/tmpydc1fwtj_test.go:31:20:\
    \ too many return values\n\thave ([]interface{}, nil)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < j {\n        if s[i] == c[j] {\n            i++\n         \
    \   j--\n        } else {\n            result = append(result, s[i])\n       \
    \     i++\n        }\n    }\n    if i == j {\n        result = append(result,\
    \ s[i])\n    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpnbzszobk_test.go:19\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpnbzszobk_test.go:40\
    \ +0xdd5\ntesting.tRunner(0xc0001a01a0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s) - 1\n    for i < len(s) && j < len(c) {\n        if s[i]\
    \ == c[j] {\n            i++\n            j--\n        } else {\n            i++\n\
    \        }\n    }\n    if i == len(s) {\n        result = append(result, s)\n\
    \    } else {\n        result = append(result, s[:i])\n    }\n    if j == 0 {\n\
    \        result = append(result, c)\n    } else {\n        result = append(result,\
    \ c[:j])\n    }\n    return result\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:4] with length 2 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5136a0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5136a0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete({0x51e5c7?, 0x5d42b0?}, {0x51e2b3,\
    \ 0x2})\n\t/tmp/tmpgwvsh9ms_test.go:35 +0x2bc\ncommand-line-arguments_test.TestReverse_Delete(0x0?)\n\
    \t/tmp/tmpgwvsh9ms_test.go:47 +0x59\ntesting.tRunner(0xc0001a01a0, 0x529008)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(c) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result += append([]interface{}{s[i]},\
    \ c[j])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result += append([]interface{}{s[i]}, c[j])\n    }\n    return result\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1f2lbn2a_test.go:23:13: invalid operation: operator + not defined on result
    (variable of type []interface{})

    /tmp/tmp1f2lbn2a_test.go:29:9: invalid operation: operator + not defined on result
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c {\n            result = append(result, s[i])\n \
    \       }\n    }\n    \n    if result == []interface{}{c} {\n        return nil,\
    \ false\n    }\n    \n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzc78u8cc_test.go:18:20:\
    \ invalid operation: s[i] == c (mismatched types byte and string)\n/tmp/tmpzc78u8cc_test.go:23:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpzc78u8cc_test.go:24:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpzc78u8cc_test.go:27:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073640
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    i := 0\n    j := len(s)\
    \ - 1\n    for i < len(s) && j < len(c) {\n        if s[i] == c[j] {\n       \
    \     i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == len(s)\
    \ {\n        result = append(result, s[i])\n    }\n    return append(result, true)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range\
    \ [1] with length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x5146a0,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5146a0, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpvpsiao5b_test.go:29\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpvpsiao5b_test.go:45\
    \ +0x1c65\ntesting.tRunner(0xc0001036c0, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            result = append(result, s[i])\n\
    \        }\n    }\n    \n    if len(result) == 0 {\n        return nil\n    }\n\
    \    \n    if result[len(result)-1] == c[0] {\n        return append(result, c[0]),\
    \ true\n    }\n    \n    return append(result, c[0]), false\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyt1qhe_a_test.go:28:38:\
    \ too many return values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n\
    /tmp/tmpyt1qhe_a_test.go:31:34: too many return values\n\thave ([]interface{},\
    \ bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Write your code here\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaa66ohw3_test.go:270:6: expected ''('', found TestReverse_Delete

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073627
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s)\n    for i < j {\n        if s[i] == c[j] {\n        \
    \    i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    if i == j {\n        result =\
    \ append(result, s[i])\n    }\n    return []interface{}{result, true}\n}\n\nfunc\
    \ TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp_ajpp_ku_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp_ajpp_ku_test.go:41\
    \ +0xdd5\ntesting.tRunner(0xc0001a0340, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s)-1\n    for i < j {\n        if s[i] == c[j] {\n      \
    \      i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n            j--\n        }\n    }\n    if i == j {\n\
    \        result = append(result, s[i])\n    }\n    return []interface{}{result}\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [4] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [4] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp9cogfbhl_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp9cogfbhl_test.go:42\
    \ +0xc1c\ntesting.tRunner(0xc0001924e0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var i int\n    var j int\n\
    \    for i = 0; i < len(s); i++ {\n        for j = len(c) - 1; j >= 0; j-- {\n\
    \            if s[i] != c[j] {\n                break\n            }\n       \
    \ }\n        if j == -1 {\n            result = append(result, s[i])\n       \
    \ }\n    }\n    return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\n    --- FAIL: TestReverse_Delete/test_num__0\
    \ (0.00s)\n        tmp812zdwaq_test.go:52: expected '[bcd %!s(bool=false)]', got\
    \ '[[] %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__1 (0.00s)\n\
    \        tmp812zdwaq_test.go:52: expected '[acdef %!s(bool=false)]', got '[[%!s(uint8=98)]\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__2 (0.00s)\n   \
    \     tmp812zdwaq_test.go:52: expected '[cdedc %!s(bool=true)]', got '[[] %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__3 (0.00s)\n        tmp812zdwaq_test.go:52:\
    \ expected '[dik %!s(bool=false)]', got '[[%!s(uint8=119)] %!s(bool=true)]'\n\
    \    --- FAIL: TestReverse_Delete/test_num__4 (0.00s)\n        tmp812zdwaq_test.go:52:\
    \ expected '[ %!s(bool=true)]', got '[[%!s(uint8=97)] %!s(bool=true)]'\n    ---\
    \ FAIL: TestReverse_Delete/test_num__5 (0.00s)\n        tmp812zdwaq_test.go:52:\
    \ expected '[abcdedcba %!s(bool=true)]', got '[[%!s(uint8=97) %!s(uint8=98) %!s(uint8=99)\
    \ %!s(uint8=100) %!s(uint8=101) %!s(uint8=100) %!s(uint8=99) %!s(uint8=98) %!s(uint8=97)]\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__6 (0.00s)\n   \
    \     tmp812zdwaq_test.go:52: expected '[abcdedcba %!s(bool=true)]', got '[[]\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__7 (0.00s)\n   \
    \     tmp812zdwaq_test.go:52: expected '[abba %!s(bool=true)]', got '[[%!s(uint8=118)]\
    \ %!s(bool=true)]'\n    --- FAIL: TestReverse_Delete/test_num__8 (0.00s)\n   \
    \     tmp812zdwaq_test.go:52: expected '[ %!s(bool=true)]', got '[[] %!s(bool=true)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c {\n            i++\n            continue\n\
    \        }\n        result = append(result, s[i])\n        i++\n    }\n    if\
    \ i == len(s) {\n        return nil\n    }\n    return append(result, s[len(s)-i:]...)\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpavv8pg27_test.go:18:20: invalid operation: s[i] == c (mismatched types
    byte and string)

    /tmp/tmpavv8pg27_test.go:28:28: cannot use s[len(s) - i:] (value of type string)
    as type []interface{} in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            result = append(result, s[i])\n\
    \        }\n    }\n    \n    if result == []interface{}{c} {\n        return nil,\
    \ false\n    }\n    \n    return result, true\n}\n\nfunc TestReverse_Delete(t\
    \ *testing.T) {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n \
    \    { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"acdef\"\
    , false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"\
    cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"\
    dik\", false} },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\
    \", true} },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsobis2do_test.go:23:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmpsobis2do_test.go:24:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmpsobis2do_test.go:27:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073639
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] != c {\n            result = append(result, s[i])\n     \
    \   }\n    }\n    if result == []interface{}{c} {\n        return nil, false\n\
    \    }\n    return result, true\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n\
    \  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppcf6h1b1_test.go:17:20:\
    \ invalid operation: s[i] != c (mismatched types byte and string)\n/tmp/tmppcf6h1b1_test.go:21:8:\
    \ invalid operation: result == []interface{}{\u2026} (slice can only be compared\
    \ to nil)\n/tmp/tmppcf6h1b1_test.go:22:21: too many return values\n\thave (nil,\
    \ bool)\n\twant ([]interface{})\n/tmp/tmppcf6h1b1_test.go:24:20: too many return\
    \ values\n\thave ([]interface{}, bool)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073644
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result = append(result, s[i])\n            i = i + 1\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return []interface{}{result, true}\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5134c0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5134c0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpk517vbbp_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpk517vbbp_test.go:38\
    \ +0x82c\ntesting.tRunner(0xc0001924e0, 0x528de0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result = append(result, s[i])\n            i = i + 1\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpde_4obi8_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpde_4obi8_test.go:38\
    \ +0x6ec\ntesting.tRunner(0xc0001036c0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n    for i\
    \ < len(s) {\n        if s[i] == c[i] {\n            i++\n        } else {\n \
    \           result = append(result, s[i])\n            i = i + 1\n        }\n\
    \    }\n    if i == len(s) {\n        result = append(result, s[i])\n    }\n \
    \   return append(result, \"True\")\n}\n\nfunc TestReverse_Delete(t *testing.T)\
    \ {\n  candidate := reverse_delete\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    abcde\", \"ae\"), expected: []interface{}{\"bcd\", false} },\n     { actual: candidate(\"\
    abcdef\", \"b\"), expected: []interface{}{\"acdef\", false} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"ab\"), expected: []interface{}{\"cdedc\", true} },\n\
    \     { actual: candidate(\"dwik\", \"w\"), expected: []interface{}{\"dik\", false}\
    \ },\n     { actual: candidate(\"a\", \"a\"), expected: []interface{}{\"\", true}\
    \ },\n     { actual: candidate(\"abcdedcba\", \"\"), expected: []interface{}{\"\
    abcdedcba\", true} },\n     { actual: candidate(\"abcdedcba\", \"v\"), expected:\
    \ []interface{}{\"abcdedcba\", true} },\n     { actual: candidate(\"vabba\", \"\
    v\"), expected: []interface{}{\"abba\", true} },\n     { actual: candidate(\"\
    mamma\", \"mia\"), expected: []interface{}{\"\", true} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpde_4obi8_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpde_4obi8_test.go:38\
    \ +0x6ec\ntesting.tRunner(0xc0001036c0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073645
- exit_code: 2
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    var result []interface{}\n    var index int\n    var temp\
    \ string\n    for index = 0; index < len(s); index++ {\n        if s[index] ==\
    \ c[index] {\n            temp += s[index] + \" \"\n        } else {\n       \
    \     result = append(result, temp)\n            temp = \"\"\n        }\n    }\n\
    \    result = append(result, temp)\n    return append(result, \"True\")\n}\n\n\
    func TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphm0p16rh_test.go:20:21: invalid operation: s[index] + " " (mismatched
    types byte and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073645
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    result := []interface{}{}\n    \n    for i := 0; i < len(s);\
    \ i++ {\n        if s[i] == c[i] {\n            continue\n        }\n        \n\
    \        result = append(result, s[i])\n    }\n    \n    return append(result,\
    \ true)\n}\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmpvjwb66s5_test.go:18\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmpvjwb66s5_test.go:35\
    \ +0x5ef\ntesting.tRunner(0xc0001a01a0, 0x527d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073639
- exit_code: 1
  program: "package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Task\n// We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n// then check if the result\
    \ string is palindrome.\n// A string is called palindrome if it reads the same\
    \ backward as forward.\n// You should return a tuple containing the result string\
    \ and True/False for the check.\n// Example\nfunc reverse_delete(s string, c string)\
    \ []interface{} {\n    // Your code here\n    result := []interface{}{}\n    i\
    \ := 0\n    j := len(s)\n    for i < j {\n        if s[i] == c[j] {\n        \
    \    i++\n            j--\n        } else {\n            result = append(result,\
    \ s[i])\n            i++\n        }\n    }\n    return append(result, c[j])\n\
    }\n\nfunc TestReverse_Delete(t *testing.T) {\n  candidate := reverse_delete\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"abcde\", \"ae\"), expected: []interface{}{\"\
    bcd\", false} },\n     { actual: candidate(\"abcdef\", \"b\"), expected: []interface{}{\"\
    acdef\", false} },\n     { actual: candidate(\"abcdedcba\", \"ab\"), expected:\
    \ []interface{}{\"cdedc\", true} },\n     { actual: candidate(\"dwik\", \"w\"\
    ), expected: []interface{}{\"dik\", false} },\n     { actual: candidate(\"a\"\
    , \"a\"), expected: []interface{}{\"\", true} },\n     { actual: candidate(\"\
    abcdedcba\", \"\"), expected: []interface{}{\"abcdedcba\", true} },\n     { actual:\
    \ candidate(\"abcdedcba\", \"v\"), expected: []interface{}{\"abcdedcba\", true}\
    \ },\n     { actual: candidate(\"vabba\", \"v\"), expected: []interface{}{\"abba\"\
    , true} },\n     { actual: candidate(\"mamma\", \"mia\"), expected: []interface{}{\"\
    \", true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestReverse_Delete (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 2 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.reverse_delete(...)\n\t/tmp/tmp7_8ogunv_test.go:20\n\
    command-line-arguments_test.TestReverse_Delete(0x0?)\n\t/tmp/tmp7_8ogunv_test.go:38\
    \ +0x8bb\ntesting.tRunner(0xc0001924e0, 0x528d60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073645
