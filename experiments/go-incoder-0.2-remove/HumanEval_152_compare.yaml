name: HumanEval_152_compare
language: go_test.go
prompt: "package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I\
  \ think we all remember that feeling when the result of some long-awaited\n// event\
  \ is finally known. The feelings and thoughts you have at that moment are\n// definitely\
  \ worth noting down and comparing.\n// Your task is to determine if a person correctly\
  \ guessed the results of a number of matches.\n// You are given two arrays of scores\
  \ and guesses of equal length, where each index shows a match. \n// Return an array\
  \ of the same length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\nfunc compare(game []int, guess []int) []int\
  \ {\n"
tests: "func TestCompare(t *testing.T) {\n  candidate := compare\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2}), expected:\
  \ []int{0, 0, 0, 0, 3, 3} },\n     { actual: candidate([]int{0, 0, 0, 0, 0, 0},\
  \ []int{0, 0, 0, 0, 0, 0}), expected: []int{0, 0, 0, 0, 0, 0} },\n     { actual:\
  \ candidate([]int{1, 2, 3}, []int{-1, -2, -3}), expected: []int{2, 4, 6} },\n  \
  \   { actual: candidate([]int{1, 2, 3, 5}, []int{-1, 2, 3, 4}), expected: []int{2,\
  \ 0, 0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
  \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
  \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(guess))\n    for i := range guess {\n\
    \        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    var result []int\n    for i := range guess {\n        if game[i] != guess[i]\
    \ {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n}\n", "    // Your code\
    \ here\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    // Your code here\n    \n    return guess\n}\n", "    // Your code here\n \
    \   return guess\n}\n", "    var result []int\n    for i := range guess {\n  \
    \      if game[i] != guess[i] {\n            result = append(result, abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result\n}\n", "    // TODO: Write\
    \ a function that will compare two arrays of ints and return an array of the same\
    \ length\n    // denoting how far off each guess was. If they have guessed correctly,\
    \ the value is 0, and if not, the value\n    // is the absolute difference between\
    \ the guess and the score.\n    // example:\n    \n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n    return guess\n}\n", "    // Your code\
    \ here\n}\n", "    result := make([]int, len(guess))\n    for i, score := range\
    \ game {\n        if guess[i] == score {\n            result[i] = 0\n        }\
    \ else {\n            result[i] = abs(guess[i] - score)\n        }\n    }\n  \
    \  return result\n}\n", "    // TODO: Write a function that returns an array of\
    \ ints denoting how far off each guess was\n    // if the guesses were correct,\
    \ the value should be 0, otherwise the value should be the absolute difference\
    \ between the guess and the score\n    return guess\n}\n", "    \n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n}\n", "    // Your code here\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    // TODO: Write\
    \ your comparison function here\n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // Your code here\n}\n", "    // Your code\
    \ here\n    \n}\n", "    // Your code here\n    \n    return guess\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] == guess[i] {\n            result[i]\
    \ = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n   \
    \     }\n    }\n    return result\n}\n", "    // Your code here\n}\n", "    //\
    \ Your code here\n    \n}\n", "    // TODO: Your code here\n    return guess\n\
    }\n", "    // Your code here\n}\n", "    \n}\n", "    // Your code here\n}\n",
  "    // Your code here\n    \n}\n", "    result := make([]int, len(guess))\n   \
    \ for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    var result []int\n    for i := 0; i < len(guess); i++ {\n        if\
    \ game[i] != guess[i] {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        } else {\n            result = []int{0, 0}\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n", " \
    \   // Your code here\n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    var result []int\n    var score int\n  \
    \  var guess int\n    var i int\n    var j int\n    var k int\n    for i = 0;\
    \ i < len(game); i++ {\n        score = game[i]\n        guess = guess[i]\n  \
    \      for j = i; j < len(game); j++ {\n            k = j\n            if guess\
    \ == game[k] {\n                score++\n                k++\n            }\n\
    \            if score > game[k] {\n                score--\n                k--\n\
    \            }\n        }\n        result[i] = score\n    }\n    return result\n\
    }\n", "    // TODO: Write a function that will compare two arrays of ints and\
    \ return an array of ints\n    // denoting how far off each guess was. If they\
    \ have guessed correctly, the value is 0,\n    // and if not, the value is the\
    \ absolute difference between the guess and the score.\n    // The function should\
    \ return an array of ints denoting how far off each guess was.\n    // The function\
    \ should return an array of ints denoting how far off each guess was.\n    //\
    \ The function should return an array of ints denoting how far off each guess\
    \ was.\n    // The function should return an array of ints denoting how far off\
    \ each guess was.\n    // The function should return an array of ints denoting\
    \ how far off each guess was.\n    // The function should return an array of ints\
    \ denoting how far off each guess was.\n    // The function should return an array\
    \ of ints denoting how far off each guess was.\n    // The function should return\
    \ an array of ints denoting how far off each guess was.\n    // The function should\
    \ return an array of ints denoting how far off each guess was.\n    // The function\
    \ should return an array of ints denoting how far off each guess was.\n    //\
    \ The function should return an array of ints denoting how far off each guess\
    \ was.\n    // The function should return an array of ints denoting how far off\
    \ each guess was.\n    // The function should return an array of ints denoting\
    \ how far off each guess was.\n    // The function should return an array of ints\
    \ denoting how far off each guess was.\n    // The function should return an array\
    \ of ints denoting how far off each guess was.\n    // The function should return\
    \ an array of ints denoting how far off each guess was.\n    // The function should\
    \ return an array of ints denoting how far off each guess was.\n    // The function\
    \ should return an array of ints denoting how far off each guess was.\n    //\
    \ The function should return an array of ints denoting how far off each guess\
    \ was.\n    // The function should return an array of ints denoting how far off\
    \ each guess was.\n    // The function should return an array of ints denoting\
    \ how far off each guess was.\n    // The function should return an array of ints\
    \ denoting how far off each guess was.\n    // The function should return an array\
    \ of ints denoting how far off each guess was.\n    // The function should return\
    \ an array of ints denoting how far off each guess was.\n    // The function should ",
  "    var result []int\n    for i := 0; i < len(guess); i++ {\n        if game[i]\
    \ != guess[i] {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    \n   \
    \ return guess\n}\n", "    // Your code here\n    \n    return guess\n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    // TODO: Write\
    \ your code here\n    \n    return guess\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for i := 0; i < len(guess);\
    \ i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n       \
    \ } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n}\n", "    var result []int\n\
    \    for i := 0; i < len(guess); i++ {\n        if game[i] != guess[i] {\n   \
    \         result = append(result, abs(game[i] - guess[i]))\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n}\n", "    // TODO: Write a\
    \ function that will compare two arrays of ints and return an array of ints denoting\
    \ how far off each guess was\n}\n", "    result := make([]int, len(guess))\n \
    \   for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    \n    return guess\n}\n", "    //\
    \ Your code here\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    // Your code here\n    \n    return guess\n}\n", "    // Your code\
    \ here\n}\n", "    var result []int\n    \n    // Your code here\n    \n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    \n    for i := range guess {\n        if\
    \ game[i] == guess[i] {\n            result[i] = 0\n        } else {\n       \
    \     result[i] = abs(guess[i] - game[i])\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    // Your code here\n    \n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    \    return guess\n}\n", "    // Your code here\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // Your code here\n    \n}\n", "    // Your\
    \ code here\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    \n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n    \n    return guess\n}\n", "    // Your code here\n}\n",
  "    result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ result {\n        result[i] = 0\n    }\n    for i := range guess {\n       \
    \ if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n    \
    \        result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n    \n    return guess\n}\n", "    // Your code\
    \ here\n}\n", "    // Your code here\n}\n", "    // TODO: Write code here\n  \
    \  return guess\n}\n", "    // Your code here\n    \n    return guess\n}\n", " \
    \   // Your code here\n    \n    return guess\n}\n", "    // Your code here\n\
    \    return guess\n}\n", "    result := make([]int, len(guess))\n    for i :=\
    \ range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(guess))\n    for i := range result\
    \ {\n        result[i] = 0\n    }\n    for i := range guess {\n        if game[i]\
    \ != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n        }\n\
    \    }\n    return result\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    // Your code here\n}\n", "    var result []int\n    var correct bool\n\
    \    var diff int\n    for i := 0; i < len(guess); i++ {\n        if game[i] ==\
    \ guess[i] {\n            result[i] = 0\n            correct = true\n        }\
    \ else {\n            result[i] = abs(game[i] - guess[i])\n            correct\
    \ = false\n        }\n    }\n    if correct {\n        for i := 0; i < len(guess);\
    \ i++ {\n            diff += abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ append(result, diff)\n}\n", "    var result []int\n    for i := 0; i < len(guess);\
    \ i++ {\n        if game[i] == guess[i] {\n            result[i] = 0\n       \
    \ } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n    }\n\
    \    return result\n}\n", "    // Your code here\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // Your code here\n}\n", "    \n}\n", " \
    \   result := make([]int, len(guess))\n    for i := range result {\n        result[i]\
    \ = 0\n    }\n    \n    // Your code here\n    \n    return result\n}\n", "  \
    \  // Your code here\n    \n    return guess\n}\n", "    // Your code here\n}\n",
  "    var result []int\n    for i := 0; i < len(guess); i++ {\n        if game[i]\
    \ == guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    result := make([]int, len(guess))\n \
    \   for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    // Your code here\n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] == guess[i] {\n   \
    \         result[i] = 0\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] == guess[i] {\n            result[i] = 0\n     \
    \   } else {\n            result[i] = abs(game[i] - guess[i])\n        }\n   \
    \ }\n    return result\n}\n", "    // Your code here\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    \n}\n", "    result := make([]int, len(guess))\n \
    \   for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n\
    \    return result\n}\n", "    // Your code here\n}\n", "    \n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    // Your code here\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   var result []int\n    for i := 0; i < len(guess); i++ {\n        if game[i]\
    \ != guess[i] {\n            result = append(result, abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range result {\n        result[i] = 0\n    }\n    for i := range guess\
    \ {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n}\n", "  \
    \  // TODO: Write your code here\n    return guess\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n    return guess\n}\n", "    // Your code\
    \ here\n    \n}\n", "    // Your code here\n    return guess\n}\n", "    var result\
    \ []int\n    for i := 0; i < len(guess); i++ {\n        if game[i] != guess[i]\
    \ {\n            result = append(result, abs(game[i] - guess[i]))\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(guess))\n    for i := range\
    \ result {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   // Your code here\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    var result []int\n    for i := 0; i < len(guess); i++ {\n        if\
    \ game[i] == guess[i] {\n            result[i] = 0\n        } else {\n       \
    \     result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range guess {\n   \
    \     result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n", " \
    \   var result []int\n    \n    // Your code here\n    \n    return result\n}",
  "    // TODO: Write your code here\n    return guess\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n    \n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ \n    for i := range guess {\n        if game[i] == guess[i] {\n           \
    \ result[i] = 0\n        } else {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n    return\
    \ guess\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    // Your code here\n    \n}\n", "    result := make([]int, len(guess))\n   \
    \ for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(guess))\n    for i, score\
    \ := range game {\n        result[i] = abs(score - guess[i])\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for i := 0; i < len(guess); i++ {\n\
    \        if game[i] == guess[i] {\n            result[i] = 0\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    \n    return guess\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(guess))\n    for\
    \ i := range guess {\n        result[i] = abs(game[i] - guess[i])\n    }\n   \
    \ return result\n}\n", "    var result []int\n    \n    // Your code here\n  \
    \  \n    return result\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    result := make([]int, len(guess))\n    for i := range result {\n  \
    \      result[i] = 0\n    }\n    for i := range guess {\n        if game[i] ==\
    \ guess[i] {\n            result[i] = 0\n        } else {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n    \n    return guess\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n}\n", "    // Your code here\n    \n}\n", "    // Your code\
    \ here\n}\n", "    // Your code here\n    return guess\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // Your code here\n    \n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range guess {\n        result[i] =\
    \ abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    var result []int\n    for i := 0; i <\
    \ len(guess); i++ {\n        diff := abs(game[i] - guess[i])\n        if diff\
    \ == 0 {\n            result[i] = 0\n        } else {\n            result[i] =\
    \ diff\n        }\n    }\n    return result\n}\n", "    // Your code here\n  \
    \  \n    return guess\n}\n", "    result := make([]int, len(guess))\n    for i\
    \ := range result {\n        result[i] = 0\n    }\n    for i := range guess {\n\
    \        if game[i] != guess[i] {\n            result[i] = abs(game[i] - guess[i])\n\
    \        }\n    }\n    return result\n}\n", "    // Your code here\n}\n", "  \
    \  result := make([]int, len(guess))\n    for i := range guess {\n        result[i]\
    \ = abs(game[i] - guess[i])\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range result {\n        result[i] = 0\n    }\n   \
    \ for i := range guess {\n        if game[i] != guess[i] {\n            result[i]\
    \ = abs(game[i] - guess[i])\n        }\n    }\n    return result\n}\n", "    //\
    \ Your code here\n}\n", "    // TODO: Write code here\n    return guess\n}\n",
  "    // Your code here\n    \n    return guess\n}\n", "    // TODO: Write your solution\
    \ here\n}\n", "    result := make([]int, len(guess))\n    for i := range guess\
    \ {\n        result[i] = abs(game[i] - guess[i])\n    }\n    return result\n}\n",
  "    // Your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    \    \n    return guess\n}\n", "    // Your code here\n}\n", "    // Your code\
    \ here\n    \n    return guess\n}\n", "    result := make([]int, len(guess))\n\
    \    for i := range result {\n        result[i] = 0\n    }\n    for i := range\
    \ guess {\n        if game[i] != guess[i] {\n            result[i] = abs(game[i]\
    \ - guess[i])\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(guess))\n    for i := range guess {\n        result[i] = abs(game[i] - guess[i])\n\
    \    }\n    return result\n}\n", "    // Your code here\n}\n", "    var result\
    \ []int\n    \n    // Your code here\n    \n    return result\n}\n", "    var\
    \ result []int\n    for i := range guess {\n        if game[i] != guess[i] {\n\
    \            result = append(result, abs(game[i] - guess[i]))\n        }\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for i := 0; i < len(guess);\
    \ i++ {\n        if game[i] != guess[i] {\n            result = append(result,\
    \ abs(game[i] - guess[i]))\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(guess))\n    for i := range result {\n        result[i] =\
    \ 0\n    }\n    for i := range guess {\n        if game[i] != guess[i] {\n   \
    \         result[i] = abs(game[i] - guess[i])\n        }\n    }\n    return result\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n    \n    return guess\n\
    }\n", "    // Your code here\n    \n    return guess\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
