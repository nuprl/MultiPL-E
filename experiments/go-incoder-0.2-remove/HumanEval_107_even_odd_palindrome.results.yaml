language: go_test.go
name: HumanEval_107_even_odd_palindrome
results:
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_even(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_odd(n))\n   \
    \ return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3fzb9789_test.go:22:47:\
    \ undefined: even_odd_palindrome_even\n/tmp/tmp3fzb9789_test.go:23:45: undefined:\
    \ even_odd_palindrome_odd\n/tmp/tmp3fzb9789_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(i))\n\
    \        oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvtq8q8o4_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpvtq8q8o4_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpvtq8q8o4_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        if isPalindrome(i)\
    \ {\n            oddPalindromeCount++\n        } else {\n            evenPalindromeCount++\n\
    \        }\n    }\n    return []interface{}{evenPalindromeCount, oddPalindromeCount}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpccoyq0ze_test.go:27:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(n-i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3o14rdn__test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp3o14rdn__test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp3o14rdn__test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        evenPalindromeCount = 0\n     \
    \   oddPalindromeCount = 0\n        for j := 1; j <= i/2; j++ {\n            if\
    \ i%2 == 0 && j%2 == 0 {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else if i%2 != 0 &&\
    \ j%2 != 0 {\n                oddPalindromes = append(oddPalindromes, i)\n   \
    \             oddPalindromeCount++\n            }\n        }\n        if evenPalindromeCount\
    \ > oddPalindromeCount {\n            oddPalindromes = append(oddPalindromes,\
    \ i)\n            oddPalindromeCount++\n        } else {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n            evenPalindromeCount++\n        }\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzhy0hqpe_test.go:44:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpns5fudm7_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpns5fudm7_test.go:24:16: undefined: isEven\n\
    /tmp/tmpns5fudm7_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsk5vtn58_test.go:54:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074196
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_even(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_odd(n))\n   \
    \ return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3fzb9789_test.go:22:47:\
    \ undefined: even_odd_palindrome_even\n/tmp/tmp3fzb9789_test.go:23:45: undefined:\
    \ even_odd_palindrome_odd\n/tmp/tmp3fzb9789_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n    \
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06hvwpjw_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpns5fudm7_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpns5fudm7_test.go:24:16: undefined: isEven\n\
    /tmp/tmpns5fudm7_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes := make([]interface{}, 0)\n \
    \   oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    even\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkv5qfocs_test.go:55:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074196
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes, oddPalindromes\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5_hl1jw_test.go:28:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0, n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i <\
    \ n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n       \
    \         evenPalindromes = append(evenPalindromes, i)\n            } else {\n\
    \                oddPalindromes = append(oddPalindromes, i)\n            }\n \
    \       }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5zus7u25_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp5zus7u25_test.go:25:16: undefined: isEven\n\
    /tmp/tmp5zus7u25_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n-i-1)...)\n\
    \        oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n-i)...)\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpodxi86kh_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpodxi86kh_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpodxi86kh_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3gfa89s_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmpw3gfa89s_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmpw3gfa89s_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n    \
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06hvwpjw_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n\
    \        oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1k2nek6_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpd1k2nek6_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpd1k2nek6_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyijekfd1_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpyijekfd1_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpyijekfd1_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(n-i, i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(n-i, n-i))\n    }\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptp887pmr_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmptp887pmr_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmptp887pmr_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpns5fudm7_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpns5fudm7_test.go:24:16: undefined: isEven\n\
    /tmp/tmpns5fudm7_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpns5fudm7_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpns5fudm7_test.go:24:16: undefined: isEven\n\
    /tmp/tmpns5fudm7_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(n-i, i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(n-i, i))\n    }\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiuu18wuk_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpiuu18wuk_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpiuu18wuk_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n\
    \        oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1k2nek6_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpd1k2nek6_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpd1k2nek6_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome(i))\n \
    \       oddPalindromes = append(oddPalindromes, even_odd_palindrome(i))\n    }\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyqn03557_test.go:26:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes, oddPalindromes\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5_hl1jw_test.go:28:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n\
    \            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuxz0imjs_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmpuxz0imjs_test.go:25:16: undefined: isEven\n\
    /tmp/tmpuxz0imjs_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074198
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n))\n  \
    \  return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0y49e9vh_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074198
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n\
    \    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes,\
    \ oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes, oddPalindromes\
    \ = evenPalindromes, oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n\
    \    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes,\
    \ oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes, oddPalindromes\
    \ = evenPalindromes, oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n\
    \    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes,\
    \ oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes, oddPalindromes\
    \ = evenPalindromes, oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n\
    \    evenPalindromes, oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes,\
    \ oddPalindromes = evenPalindromes, oddPalindromes\n    evenPalindromes, \nfunc\
    \ TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiepe5ty__test.go:41:5: expected 1 expression

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome(i))\n        oddPalindromes =\
    \ append(oddPalindromes, even_odd_palindrome(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppogeylkg_test.go:26:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n    \
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06hvwpjw_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_even(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_odd(n))\n   \
    \ return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3fzb9789_test.go:22:47:\
    \ undefined: even_odd_palindrome_even\n/tmp/tmp3fzb9789_test.go:23:45: undefined:\
    \ even_odd_palindrome_odd\n/tmp/tmp3fzb9789_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3gfa89s_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmpw3gfa89s_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmpw3gfa89s_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(n-i, i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(n-i, n-i))\n    }\n    return\
    \ evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptp887pmr_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmptp887pmr_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmptp887pmr_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    for i := 1; i <= n;\
    \ i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n          \
    \      evenPalindromes = append(evenPalindromes, i)\n            } else {\n  \
    \              oddPalindromes = append(oddPalindromes, i)\n            }\n   \
    \     }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi0nd8qoe_test.go:26:12:\
    \ undefined: isPalindrome\n/tmp/tmpi0nd8qoe_test.go:27:16: undefined: isEven\n\
    /tmp/tmpi0nd8qoe_test.go:34:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome(i))\n        oddPalindromes =\
    \ append(oddPalindromes, even_odd_palindrome(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppogeylkg_test.go:26:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyijekfd1_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpyijekfd1_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpyijekfd1_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    evenPalindromeCount := 0\n\
    \    oddPalindromeCount := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw1dptf8m_test.go:25:12: undefined: isPalindrome

    /tmp/tmpw1dptf8m_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    for i := 0; i < n; i++\
    \ {\n        if isPalindrome(evenPalindromes[i]) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        }\n        if isPalindrome(oddPalindromes[i])\
    \ {\n            oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n\
    \    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpbsxcp3_test.go:29:12: undefined: isPalindrome

    /tmp/tmpbpbsxcp3_test.go:32:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n))\n  \
    \  return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0y49e9vh_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074198
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome(i))\n        oddPalindromes =\
    \ append(oddPalindromes, even_odd_palindrome(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppogeylkg_test.go:26:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n))\n  \
    \  return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0y49e9vh_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074198
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n    \
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06hvwpjw_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n    \
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06hvwpjw_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3gfa89s_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmpw3gfa89s_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmpw3gfa89s_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(i))\n   \
    \     oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptm9y5alk_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmptm9y5alk_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmptm9y5alk_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        evenPalindromeCount += isPalindrome(i)\n\
    \        oddPalindromeCount += !isPalindrome(i)\n    }\n    evenPalindromes =\
    \ append(evenPalindromes, evenPalindromeCount)\n    oddPalindromes = append(oddPalindromes,\
    \ oddPalindromeCount)\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6lnvs66i_test.go:25:32:\
    \ undefined: isPalindrome\n/tmp/tmp6lnvs66i_test.go:26:32: undefined: isPalindrome\n\
    /tmp/tmp6lnvs66i_test.go:30:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n\
    \        oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplb4i303g_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmplb4i303g_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmplb4i303g_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n))\n  \
    \  return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0y49e9vh_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp0y49e9vh_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074198
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoi1bcjg7_test.go:55:1: expected ''{'', found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0, n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <=\
    \ n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n       \
    \         evenPalindromes = append(evenPalindromes, i)\n            } else {\n\
    \                oddPalindromes = append(oddPalindromes, i)\n            }\n \
    \       }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_lu57u7s_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp_lu57u7s_test.go:25:16: undefined: isEven\n\
    /tmp/tmp_lu57u7s_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n    \
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06hvwpjw_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp06hvwpjw_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindrome(i))\n\
    \        oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindrome(i))\n\
    \    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1k2nek6_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpd1k2nek6_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpd1k2nek6_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    evenPalindromes = append(evenPalindromes,\
    \ evenPalindrome(n))\n    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprpqafaf7_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmprpqafaf7_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmprpqafaf7_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes, oddPalindromes\n}\n\
    \nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5_hl1jw_test.go:28:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    evenPalindromes = append(evenPalindromes,\
    \ evenPalindrome(n))\n    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprpqafaf7_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmprpqafaf7_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmprpqafaf7_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(n))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(n))\n    }\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqia57rlr_test.go:23:51: undefined: even_odd_palindrome_test

    /tmp/tmpqia57rlr_test.go:24:49: undefined: even_odd_palindrome_test

    /tmp/tmpqia57rlr_test.go:26:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3gfa89s_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmpw3gfa89s_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmpw3gfa89s_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpicg__24k_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpicg__24k_test.go:29:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(n-i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux8vb38w_test.go:23:51: undefined: even_odd_palindrome_test

    /tmp/tmpux8vb38w_test.go:24:49: undefined: even_odd_palindrome_test

    /tmp/tmpux8vb38w_test.go:26:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0, n)\n    oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <=\
    \ n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n       \
    \         evenPalindromes = append(evenPalindromes, i)\n            } else {\n\
    \                oddPalindromes = append(oddPalindromes, i)\n            }\n \
    \       }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_lu57u7s_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp_lu57u7s_test.go:25:16: undefined: isEven\n\
    /tmp/tmp_lu57u7s_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3gfa89s_test.go:22:47:\
    \ undefined: evenPalindrome\n/tmp/tmpw3gfa89s_test.go:23:45: undefined: oddPalindrome\n\
    /tmp/tmpw3gfa89s_test.go:24:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test.EvenPalindromes(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test.OddPalindromes(n))\n\
    \    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyijekfd1_test.go:22:47:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmpyijekfd1_test.go:23:45: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmpyijekfd1_test.go:24:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, even_odd_palindrome_test(i))\n        oddPalindromes\
    \ = append(oddPalindromes, even_odd_palindrome_test(i))\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81m9_i2q_test.go:23:51:\
    \ undefined: even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:24:49: undefined:\
    \ even_odd_palindrome_test\n/tmp/tmp81m9_i2q_test.go:26:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    // write your code here\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++\
    \ {\n        if isPalindrome(i) {\n            if isEven(i) {\n              \
    \  evenPalindromes = append(evenPalindromes, i)\n            } else {\n      \
    \          oddPalindromes = append(oddPalindromes, i)\n            }\n       \
    \ }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1skuskq0_test.go:24:12:\
    \ undefined: isPalindrome\n/tmp/tmp1skuskq0_test.go:25:16: undefined: isEven\n\
    /tmp/tmp1skuskq0_test.go:32:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes := make([]interface{}, 0)\n \
    \   oddPalindromes := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0wv_7tsv_test.go:22:21:\
    \ no new variables on left side of :=\n/tmp/tmp0wv_7tsv_test.go:23:20: no new\
    \ variables on left side of :=\n/tmp/tmp0wv_7tsv_test.go:25:12: undefined: isPalindrome\n\
    /tmp/tmp0wv_7tsv_test.go:26:16: undefined: isEven\n/tmp/tmp0wv_7tsv_test.go:33:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074199
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppnzg8_mc_test.go:25:12: undefined: isPalindrome

    /tmp/tmppnzg8_mc_test.go:26:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzu1oq4qa_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpzu1oq4qa_test.go:24:16: undefined: isEven\n\
    /tmp/tmpzu1oq4qa_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them\
    \ is even, and two of them are odd.\n// Example 2:\n// Explanation:\n// Integer\
    \ palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of\
    \ them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the\
    \ number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpczclptxv_test.go:23:12:\
    \ undefined: isPalindrome\n/tmp/tmpczclptxv_test.go:24:16: undefined: isEven\n\
    /tmp/tmpczclptxv_test.go:31:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074197
